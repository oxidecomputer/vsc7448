// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Based on mesa-v2021.09 (https://github.com/microchip-ung/mesa/) which has
// the following copyright and license:
//
// Copyright (c) 2004-2021 Microchip Technology Inc. and its subsidiaries.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// This is an autogenerated file; do not edit by hand!
use derive_more::{From, Into};
/// SPI boot master configuration
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct SPI_MST_CFG(u32);
impl SPI_MST_CFG {
    /// Set to enable 32bit address mode. In 32bit addressing mode only CS0 is used, the SPI address region is limited to 256MByte reserved for the SI interface.
    ///
    /// 0: Use 24bit addressing with 4 different CS. 1: Use 32bit addressing on CS0, max 256MByte
    #[inline(always)]
    pub fn a32b_ena(&self) -> u32 {
        (self.0 & 0x800) >> 11
    }
    #[inline(always)]
    pub fn set_a32b_ena(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 11;
        self.0 &= !0x800;
        self.0 |= value;
    }
    /// Controls the clock frequency for the SPI interface (SI_Clk). The clock frequency is VCore system clock divided by the value of this field. Setting this field to 0 or 1 value is illegal.
    ///
    /// The SPI interface frequency is: 250MHz/CLK_DIV.
    #[inline(always)]
    pub fn clk_div(&self) -> u32 {
        self.0 & 0x1f
    }
    #[inline(always)]
    pub fn set_clk_div(&mut self, value: u32) {
        assert!(value <= 0x1f);
        self.0 &= !0x1f;
        self.0 |= value;
    }
    /// The minimum number of SPI clock cycles for which the SPI chip select (SI_nEn) must be deasserted in between transfers. Typical value of this is 100 ns. Setting this field to 0 is illegal.
    #[inline(always)]
    pub fn cs_deselect_time(&self) -> u32 {
        (self.0 & 0x3e0) >> 5
    }
    #[inline(always)]
    pub fn set_cs_deselect_time(&mut self, value: u32) {
        assert!(value <= 0x1f);
        let value = value << 5;
        self.0 &= !0x3e0;
        self.0 |= value;
    }
    /// The type of read-instruction that the SPI Controller generates for reads.
    ///
    /// 0: READ (slow read - Instruction code - 0x03) 1: FAST READ (fast read - Instruction code - 0x0B)
    #[inline(always)]
    pub fn fast_read_ena(&self) -> u32 {
        (self.0 & 0x400) >> 10
    }
    #[inline(always)]
    pub fn set_fast_read_ena(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 10;
        self.0 &= !0x400;
        self.0 |= value;
    }
}
/// SPI boot master status
///
/// This is a replicated register, where each replication holds the status for one chip select.
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct SPI_MST_STATUS(u32);
impl SPI_MST_STATUS {
    /// Upsupported operation has been performed on the SPI master from AHB slave.
    #[inline(always)]
    pub fn unsup_err(&self) -> u32 {
        self.0 & 0x1
    }
    #[inline(always)]
    pub fn set_unsup_err(&mut self, value: u32) {
        assert!(value <= 0x1);
        self.0 &= !0x1;
        self.0 |= value;
    }
}
/// Manual control of the SPI interface
///
/// Note: There are 4 chip selects in total, but only chip select 0 is mapped to IO-pin (SI_nEn). The rest of the SPI chip selects are available as alternate functions on GPIOs, these must be enabled in the GPIO controller before they can be controlled via this register.
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct SW_MODE(u32);
impl SW_MODE {
    /// Set to enable software pin control mode (Bit banging), when set software has direct control of the SPI interface. This mode is used for writing into flash.
    #[inline(always)]
    pub fn sw_pin_ctrl_mode(&self) -> u32 {
        (self.0 & 0x2000) >> 13
    }
    #[inline(always)]
    pub fn set_sw_pin_ctrl_mode(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 13;
        self.0 &= !0x2000;
        self.0 |= value;
    }
    /// Value to drive on SI_nEn outputs, each bit in this field maps to a corresponding chip-select (0 though 3). This field is only used if SW_MODE.SW_PIN_CTRL_MODE is set. Note: Chip selects 1 though 3 are available as alternate GPIO functions.
    #[inline(always)]
    pub fn sw_spi_cs(&self) -> u32 {
        (self.0 & 0x1e0) >> 5
    }
    #[inline(always)]
    pub fn set_sw_spi_cs(&mut self, value: u32) {
        assert!(value <= 0xf);
        let value = value << 5;
        self.0 &= !0x1e0;
        self.0 |= value;
    }
    /// This field has not effect, chip selects are always driven.
    #[inline(always)]
    pub fn sw_spi_cs_oe(&self) -> u32 {
        (self.0 & 0x1e) >> 1
    }
    #[inline(always)]
    pub fn set_sw_spi_cs_oe(&mut self, value: u32) {
        assert!(value <= 0xf);
        let value = value << 1;
        self.0 &= !0x1e;
        self.0 |= value;
    }
    /// Value to drive on SI_Clk output. This field is only used if SW_MODE.SW_PIN_CTRL_MODE is set.
    #[inline(always)]
    pub fn sw_spi_sck(&self) -> u32 {
        (self.0 & 0x1000) >> 12
    }
    #[inline(always)]
    pub fn set_sw_spi_sck(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 12;
        self.0 &= !0x1000;
        self.0 |= value;
    }
    /// Set to enable drive of SI_Clk output. This field is only used if SW_MODE.SW_PIN_CTRL_MODE is set.
    #[inline(always)]
    pub fn sw_spi_sck_oe(&self) -> u32 {
        (self.0 & 0x800) >> 11
    }
    #[inline(always)]
    pub fn set_sw_spi_sck_oe(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 11;
        self.0 &= !0x800;
        self.0 |= value;
    }
    /// Current value of the SI_DI input.
    #[inline(always)]
    pub fn sw_spi_sdi(&self) -> u32 {
        self.0 & 0x1
    }
    #[inline(always)]
    pub fn set_sw_spi_sdi(&mut self, value: u32) {
        assert!(value <= 0x1);
        self.0 &= !0x1;
        self.0 |= value;
    }
    /// Value to drive on SI_DO output. This field is only used if SW_MODE.SW_PIN_CTRL_MODE is set.
    #[inline(always)]
    pub fn sw_spi_sdo(&self) -> u32 {
        (self.0 & 0x400) >> 10
    }
    #[inline(always)]
    pub fn set_sw_spi_sdo(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 10;
        self.0 &= !0x400;
        self.0 |= value;
    }
    /// Set to enable drive of SI_DO output. This field is only used if SW_MODE.SW_PIN_CTRL_MODE is set.
    #[inline(always)]
    pub fn sw_spi_sdo_oe(&self) -> u32 {
        (self.0 & 0x200) >> 9
    }
    #[inline(always)]
    pub fn set_sw_spi_sdo_oe(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 9;
        self.0 &= !0x200;
        self.0 |= value;
    }
}
