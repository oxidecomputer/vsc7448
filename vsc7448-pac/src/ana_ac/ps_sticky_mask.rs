// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Based on mesa-v2021.09 (https://github.com/microchip-ung/mesa/) which has
// the following copyright and license:
//
// Copyright (c) 2004-2021 Microchip Technology Inc. and its subsidiaries.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// This is an autogenerated file; do not edit by hand!
use derive_more::{From, Into};
/// Diagnostic information
///
/// Diagnostic sticky bits.
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct STICKY(u32);
impl STICKY {
    /// Set if frame is redirected due to VCAP IS2. Write 1 to clear this field.
    ///
    /// 0: No redir event 1: A frame was redirected.
    pub fn acl_redir_sticky(&self) -> u32 {
        (self.0 & 0x1000000) >> 24
    }
    pub fn set_acl_redir_sticky(&mut self, value: u32) {
        let value = value << 24;
        assert!(value <= 0x1000000);
        self.0 &= !0x1000000;
        self.0 |= value;
    }
    /// Set if a frame has been forwarded with a non-zero destination set. Write 1 to clear this field.
    ///
    /// 0: No frames forwarded 1: Frame forward event
    pub fn frame_fwd_sticky(&self) -> u32 {
        (self.0 & 0x10000) >> 16
    }
    pub fn set_frame_fwd_sticky(&mut self, value: u32) {
        let value = value << 16;
        assert!(value <= 0x10000);
        self.0 &= !0x10000;
        self.0 |= value;
    }
    /// Set if the GLAG source mask has been used. Write 1 to clear this field.
    pub fn glag_contrib_sticky(&self) -> u32 {
        (self.0 & 0x200) >> 9
    }
    pub fn set_glag_contrib_sticky(&mut self, value: u32) {
        let value = value << 9;
        assert!(value <= 0x200);
        self.0 &= !0x200;
        self.0 |= value;
    }
    /// Set if ip4_mc_ctrl_flood_mask has been used. Write 1 to clear this field.
    pub fn ip4_mc_ctrl_flood_sticky(&self) -> u32 {
        (self.0 & 0x8) >> 3
    }
    pub fn set_ip4_mc_ctrl_flood_sticky(&mut self, value: u32) {
        let value = value << 3;
        assert!(value <= 0x8);
        self.0 &= !0x8;
        self.0 |= value;
    }
    /// Set if ip4_mc_data_flood_mask has been used. Write 1 to clear this field.
    pub fn ip4_mc_data_flood_sticky(&self) -> u32 {
        (self.0 & 0x4) >> 2
    }
    pub fn set_ip4_mc_data_flood_sticky(&mut self, value: u32) {
        let value = value << 2;
        assert!(value <= 0x4);
        self.0 &= !0x4;
        self.0 |= value;
    }
    /// Set if ip6_mc_ctrl_flood_mask has been used. Write 1 to clear this field.
    pub fn ip6_mc_ctrl_flood_sticky(&self) -> u32 {
        (self.0 & 0x20) >> 5
    }
    pub fn set_ip6_mc_ctrl_flood_sticky(&mut self, value: u32) {
        let value = value << 5;
        assert!(value <= 0x20);
        self.0 &= !0x20;
        self.0 |= value;
    }
    /// Set if ip6_mc_data_flood_mask has been used. Write 1 to clear this field.
    pub fn ip6_mc_data_flood_sticky(&self) -> u32 {
        (self.0 & 0x10) >> 4
    }
    pub fn set_ip6_mc_data_flood_sticky(&mut self, value: u32) {
        let value = value << 4;
        assert!(value <= 0x10);
        self.0 &= !0x10;
        self.0 |= value;
    }
    /// Set if l2_mc_flood_mask has been used. Write 1 to clear this field.
    pub fn l2_mc_flood_sticky(&self) -> u32 {
        (self.0 & 0x2) >> 1
    }
    pub fn set_l2_mc_flood_sticky(&mut self, value: u32) {
        let value = value << 1;
        assert!(value <= 0x2);
        self.0 &= !0x2;
        self.0 |= value;
    }
    /// Set if the previous blocks in the Analyzer have signaled that a frame must not be forwarded. This may be done for CPU move or discard operations. Write 1 to clear this field.
    pub fn no_l2_l3_fwd_sticky(&self) -> u32 {
        (self.0 & 0x40) >> 6
    }
    pub fn set_no_l2_l3_fwd_sticky(&mut self, value: u32) {
        let value = value << 6;
        assert!(value <= 0x40);
        self.0 &= !0x40;
        self.0 |= value;
    }
    /// Set if a CPU copy operation from the PGID lookup has been done. Write 1 to clear this field.
    pub fn pgid_cpu_mask_sticky(&self) -> u32 {
        (self.0 & 0x80) >> 7
    }
    pub fn set_pgid_cpu_mask_sticky(&mut self, value: u32) {
        let value = value << 7;
        assert!(value <= 0x80);
        self.0 &= !0x80;
        self.0 |= value;
    }
    /// Set if a mirror probe has been triggered. Write 1 to clear this field.
    ///
    /// 0: Mirror probe not triggered 1: Mirror probe triggered
    pub fn probe_sticky(&self) -> u32 {
        (self.0 & 0x700000) >> 20
    }
    pub fn set_probe_sticky(&mut self, value: u32) {
        let value = value << 20;
        assert!(value <= 0x700000);
        self.0 &= !0x700000;
        self.0 |= value;
    }
    /// Set if a frame, candidate for sFlow sampling, was found. Write 1 to clear this field.
    pub fn sflow_cand_sticky(&self) -> u32 {
        (self.0 & 0x8000) >> 15
    }
    pub fn set_sflow_cand_sticky(&mut self, value: u32) {
        let value = value << 15;
        assert!(value <= 0x8000);
        self.0 &= !0x8000;
        self.0 |= value;
    }
    /// Set if a sFlow destination sample event has taken place. Write 1 to clear this field.
    ///
    /// 0: No event 1: A sample event has occured
    pub fn sflow_dst_sample_sticky(&self) -> u32 {
        (self.0 & 0x4000) >> 14
    }
    pub fn set_sflow_dst_sample_sticky(&mut self, value: u32) {
        let value = value << 14;
        assert!(value <= 0x4000);
        self.0 &= !0x4000;
        self.0 |= value;
    }
    /// Set if a sFlow sample event has taken place. Write 1 to clear this field.
    ///
    /// 0: No event 1: A sample event has occured
    pub fn sflow_sample_sticky(&self) -> u32 {
        (self.0 & 0x1000) >> 12
    }
    pub fn set_sflow_sample_sticky(&mut self, value: u32) {
        let value = value << 12;
        assert!(value <= 0x1000);
        self.0 &= !0x1000;
        self.0 |= value;
    }
    /// Set if a sFlow source sample event has taken place. Write 1 to clear this field.
    ///
    /// 0: No event 1: A sample event has occured
    pub fn sflow_src_sample_sticky(&self) -> u32 {
        (self.0 & 0x2000) >> 13
    }
    pub fn set_sflow_src_sample_sticky(&mut self, value: u32) {
        let value = value << 13;
        assert!(value <= 0x2000);
        self.0 &= !0x2000;
        self.0 |= value;
    }
    /// Set if the source mask has been used. Write 1 to clear this field.
    pub fn src_contrib_sticky(&self) -> u32 {
        (self.0 & 0x100) >> 8
    }
    pub fn set_src_contrib_sticky(&mut self, value: u32) {
        let value = value << 8;
        assert!(value <= 0x100);
        self.0 &= !0x100;
        self.0 |= value;
    }
    /// Set if the unicast flood mask has been used. Write 1 to clear this field.
    pub fn uc_flood_sticky(&self) -> u32 {
        self.0 & 0x1
    }
    pub fn set_uc_flood_sticky(&mut self, value: u32) {
        assert!(value <= 0x1);
        self.0 &= !0x1;
        self.0 |= value;
    }
    /// Set if VLAN mask has been used. Write 1 to clear this field.
    pub fn vlan_contrib_sticky(&self) -> u32 {
        (self.0 & 0x800) >> 11
    }
    pub fn set_vlan_contrib_sticky(&mut self, value: u32) {
        let value = value << 11;
        assert!(value <= 0x800);
        self.0 &= !0x800;
        self.0 |= value;
    }
    /// Set if the egress port mask for a frame was zero and the frame was not sent to the CPU. Write 1 to clear this field.
    pub fn zero_dst_sticky(&self) -> u32 {
        (self.0 & 0x20000) >> 17
    }
    pub fn set_zero_dst_sticky(&mut self, value: u32) {
        let value = value << 17;
        assert!(value <= 0x20000);
        self.0 &= !0x20000;
        self.0 |= value;
    }
}
