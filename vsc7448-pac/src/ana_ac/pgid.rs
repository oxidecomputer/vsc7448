// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Based on mesa-v2021.09 (https://github.com/microchip-ung/mesa/) which has
// the following copyright and license:
//
// Copyright (c) 2004-2021 Microchip Technology Inc. and its subsidiaries.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// This is an autogenerated file; do not edit by hand!
use derive_more::{From, Into};
/// PGID port mask / destination configuration
#[derive(Copy, Clone, Debug, Eq, PartialEq, From, Into)]
pub struct PGID_CFG(u32);
impl PGID_CFG {
    /// PGID port mask or stack forwarding information, depending on STACK_TYPE_ENA. Related parameters: ANA_AC:PGID:PGID_MISC_CFG.STACK_TYPE_ENA
    ///
    /// PGID_MISC_CFG.STACK_TYPE_ENA=0: Destination port mask. PGID_MISC_CFG.STACK_TYPE_ENA=1: Bit 4:0 VStaX destination UPSPN. Bit 5 VStaX destination port type. 0=Normal UPSPN, 1=Internal port (advanced use). Bit 10:6 VStaX destination UPSID Bit 13:11 VStaX forwarding mode. Only used if PGID origins from multicast index in MAC table. In all other cases bit 13:11 must be 0. Encoding: '001': fwd_logical. Forward to logical front port at specific UPS, using (UPSID, UPSPN). '010': fwd_physical. Forward to physical front port at specific UPS, using (UPSID, UPSPN). '101': fwd_gcpu_ups. Forward to GCPU of specific UPS (identified by UPSID). Other: Reserved. If bit 10:6 is a remote UPSID, then 20:16 must be set to 0. If bit 10:6 is the a UPSID, then 20:16 must be set to same value as bit 4:0.
    #[inline(always)]
    pub fn port_mask(&self) -> u32 {
        self.0
    }
    #[inline(always)]
    pub fn set_port_mask(&mut self, value: u32) {
        self.0 = value;
    }
}
/// PGID port mask / destination configuration
#[derive(Copy, Clone, Debug, Eq, PartialEq, From, Into)]
pub struct PGID_CFG1(u32);
impl PGID_CFG1 {
    /// Refer to PGID_CFG.PORT_MASK description.
    #[inline(always)]
    pub fn port_mask1(&self) -> u32 {
        self.0 & 0x1fffff
    }
    #[inline(always)]
    pub fn set_port_mask1(&mut self, value: u32) {
        assert!(value <= 0x1fffff);
        self.0 &= !0x1fffff;
        self.0 |= value;
    }
}
/// Miscellaneous PGID configuration
#[derive(Copy, Clone, Debug, Eq, PartialEq, From, Into)]
pub struct PGID_MISC_CFG(u32);
impl PGID_MISC_CFG {
    /// Copy frame to CPU. Related parameters: ANA_AC:PGID:PGID_MISC_CFG.PGID_CPU_QU
    #[inline(always)]
    pub fn pgid_cpu_copy_ena(&self) -> u32 {
        self.0 & 0x1
    }
    #[inline(always)]
    pub fn set_pgid_cpu_copy_ena(&mut self, value: u32) {
        assert!(value <= 0x1);
        self.0 &= !0x1;
        self.0 |= value;
    }
    /// CPU queue for frames copied to CPU due to PGID_CPU_COPY_ENA. Related parameters: ANA_AC:PGID:PGID_MISC_CFG.PGID_CPU_COPY_ENA
    ///
    /// 0: CPU queue 0 1: CPU queue 1 ... n: CPU queue n.
    #[inline(always)]
    pub fn pgid_cpu_qu(&self) -> u32 {
        (self.0 & 0x70) >> 4
    }
    #[inline(always)]
    pub fn set_pgid_cpu_qu(&mut self, value: u32) {
        assert!(value <= 0x7);
        let value = value << 4;
        self.0 &= !0x70;
        self.0 |= value;
    }
    /// Encoding of PGID_CFG.PORT_MASK. Related parameters: ANA_AC:PGID[0-1076]:PGID_CFG.PORT_MASK
    ///
    /// 0: Port mask encoding 1: Stack forwarding encoding
    #[inline(always)]
    pub fn stack_type_ena(&self) -> u32 {
        (self.0 & 0x2) >> 1
    }
    #[inline(always)]
    pub fn set_stack_type_ena(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 1;
        self.0 &= !0x2;
        self.0 |= value;
    }
}
