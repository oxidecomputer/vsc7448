// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Based on mesa-v2021.09 (https://github.com/microchip-ung/mesa/) which has
// the following copyright and license:
//
// Copyright (c) 2004-2021 Microchip Technology Inc. and its subsidiaries.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// This is an autogenerated file; do not edit by hand!
use derive_more::{From, Into};
/// sFlow sampler control
///
/// This register configures the sFlow sampler.
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct SFLOW_CTRL(u32);
impl SFLOW_CTRL {
    /// Configures the sampler as an ingress, egress or dual direction sampler.
    ///
    /// "00": Disable sampler. "01": RX sampler (samples trafficfrom port) "10": TX sampler (samples traffic to port) "11": RX or TX sampler (samples traffic to and from port)
    pub fn sflow_dir_sel(&self) -> u32 {
        (self.0 & 0x18000) >> 15
    }
    pub fn set_sflow_dir_sel(&mut self, value: u32) {
        let value = value << 15;
        assert!(value <= 0x18000);
        self.0 &= !0x18000;
        self.0 |= value;
    }
    /// The current state of the sampler's PRBS (pseudorandom binary sequence). SFLOW_PRBS for all samplers can be reset using SFLOW_FRAME_RESET_SHOT. Related parameters: ANA_AC::SFLOW_RESET_CTRL.SFLOW_FRAME_RESET_SHOT
    pub fn sflow_prbs(&self) -> u32 {
        (self.0 & 0xfffe0000) >> 17
    }
    pub fn set_sflow_prbs(&mut self, value: u32) {
        let value = value << 17;
        assert!(value <= 0xfffe0000);
        self.0 &= !0xfffe0000;
        self.0 |= value;
    }
    /// The probability with which the sampler copies frames to CPU. The probability can be calculated as: SFLOW_SAMPLE_RATE/32767
    ///
    /// '0x0': 0 probability, i.e. sFlow sampler is disabled. '0x1': 1/32767 '0x7FFF': 100%, i.e. all frames are sampled by the sFlow sampler.
    pub fn sflow_sample_rate(&self) -> u32 {
        self.0 & 0x7fff
    }
    pub fn set_sflow_sample_rate(&mut self, value: u32) {
        assert!(value <= 0x7fff);
        self.0 &= !0x7fff;
        self.0 |= value;
    }
}
/// Source port mask
///
/// Refer to description for ANA_AC:SRC.
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct SRC_CFG1(u32);
impl SRC_CFG1 {
    /// Refer to description for ANA_AC:SRC.
    pub fn port_mask1(&self) -> u32 {
        self.0 & 0x1fffff
    }
    pub fn set_port_mask1(&mut self, value: u32) {
        assert!(value <= 0x1fffff);
        self.0 &= !0x1fffff;
        self.0 |= value;
    }
}
