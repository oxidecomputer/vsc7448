// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Based on mesa-v2021.09 (https://github.com/microchip-ung/mesa/) which has
// the following copyright and license:
//
// Copyright (c) 2004-2021 Microchip Technology Inc. and its subsidiaries.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// This is an autogenerated file; do not edit by hand!
use derive_more::{From, Into};

/// Register `ARP_CFG_0`
///
/// ARP table data
///
/// Configuration registers for ARP table
#[derive(From, Into)]
pub struct ARP_CFG_0(u32);
impl ARP_CFG_0 {
    /// Enable entry for address resolution usage.
    pub fn arp_ena(&self) -> u32 {
        (self.0 & 0x1) >> 0
    }
    pub fn set_arp_ena(&mut self, value: u32) {
        let value = value << 0;
        assert!(value <= 0x1);
        self.0 &= !0x1;
        self.0 |= value;
    }
    /// Routing lookup: Egress router leg (EVMID). Security lookup: Expected Ingress mapped VLAN ID for security lookup when SECUR_MATCH_VMID_ENA is enabled. SIP RPF: Expected ingress VMID if SIP_RPF_ENA==1 and IPv4: ANA_L3:VMID:RLEG_CTRL.RLEG_IP4_SIP_RPF_MODE==Rleg Mode IPv6: ANA_L3:VMID:RLEG_CTRL.RLEG_IP6_SIP_RPF_MODE==Rleg Mode
    pub fn arp_vmid(&self) -> u32 {
        (self.0 & 0x7f00) >> 8
    }
    pub fn set_arp_vmid(&mut self, value: u32) {
        let value = value << 8;
        assert!(value <= 0x7f00);
        self.0 &= !0x7f00;
        self.0 |= value;
    }
    /// 16 most significant bits of MAC address. Used for ARP entry and/or (SMAC,SIP)/(DMAC,DIP) check. Least significant bits are configured in ARP_CFG_1.MAC_LSB. If MAC address for ARP entry is all-zeros, then the frame is redirected to CPU. CPU queue used for such frames is configured in ZERO_DMAC_CPU_QU.

    ///

    /// Bit 0: MAC address bit 32 ... Bit 15: MAC address bit 47
    pub fn mac_msb(&self) -> u32 {
        (self.0 & 0xffff0000) >> 16
    }
    pub fn set_mac_msb(&mut self, value: u32) {
        let value = value << 16;
        assert!(value <= 0xffff0000);
        self.0 &= !0xffff0000;
        self.0 |= value;
    }
    /// Enable Security MAC check. SIP check: If SECUR_MATCH_MAC_ENA=1 and the frame's SMAC is not equal to the MAC in the ARP table (ARP_MAC) when looking up SIP then the L3_SMAC_SIP_MATCH input to ANA_ACL is deasserted. DIP check: If SECUR_MATCH_MAC_ENA=1 and the frame's DMAC is not equal to the MAC in the ARP table (ARP_MAC) when looking up DIP then the L3_SMAC_DIP_MATCH input to ANA_ACL is deasserted. DIP check is only performed for L2 forwarded IP unicast frames. Related parameters: ANA_L3:COMMON:SIP_SECURE_ENA ANA_L3:COMMON:DIP_SECURE_ENA
    pub fn secur_match_mac_ena(&self) -> u32 {
        (self.0 & 0x2) >> 1
    }
    pub fn set_secur_match_mac_ena(&mut self, value: u32) {
        let value = value << 1;
        assert!(value <= 0x2);
        self.0 &= !0x2;
        self.0 |= value;
    }
    /// Enable Security VMID check. SIP check: If SECUR_MATCH_VMID_ENA=1 and the IVMID is not equal to the VMID in the ARP table (ARP_VMID) when looking up SIP, then the L3_SMAC_SIP_MATCH input to ANA_ACL is deasserted. DIP check: If SECUR_MATCH_VMID_ENA=1 and the IVMID is not equal to the VMID in the ARP table (ARP_VMID) when looking up DIP, then the L3_SMAC_DIP_MATCH input to ANA_ACL is deasserted. DIP check is only performed for L2 forwarded IP unicast frames. Related parameters: ANA_L3:COMMON:SIP_SECURE_ENA ANA_L3:COMMON:DIP_SECURE_ENA
    pub fn secur_match_vmid_ena(&self) -> u32 {
        (self.0 & 0x4) >> 2
    }
    pub fn set_secur_match_vmid_ena(&mut self, value: u32) {
        let value = value << 2;
        assert!(value <= 0x4);
        self.0 &= !0x4;
        self.0 |= value;
    }
    /// Enable use for SIP RPF check. Ref. ANA_L3:VMID:RLEG_CTRL.RLEG_IP4_SIP_RPF_MODE ANA_L3:VMID:RLEG_CTRL.RLEG_IP6_SIP_RPF_MODE
    pub fn sip_rpf_ena(&self) -> u32 {
        (self.0 & 0x8) >> 3
    }
    pub fn set_sip_rpf_ena(&mut self, value: u32) {
        let value = value << 3;
        assert!(value <= 0x8);
        self.0 &= !0x8;
        self.0 |= value;
    }
    /// CPU queue used for CPU redirect if MAC address in ARP entry is all-zeros.
    pub fn zero_dmac_cpu_qu(&self) -> u32 {
        (self.0 & 0x70) >> 4
    }
    pub fn set_zero_dmac_cpu_qu(&mut self, value: u32) {
        let value = value << 4;
        assert!(value <= 0x70);
        self.0 &= !0x70;
        self.0 |= value;
    }
}

/// Register `ARP_PTR_REMAP_CFG`
///
/// ARP Pointer Remap Configuration
///
/// This information is used for LPM VCAP actions of type ARP_PTR and with ARP_PTR_REMAP_ENA=1.
#[derive(From, Into)]
pub struct ARP_PTR_REMAP_CFG(u32);
impl ARP_PTR_REMAP_CFG {
    /// Address of ARP entry in ARP Table (ANA_L3:ARP).
    pub fn arp_ptr(&self) -> u32 {
        (self.0 & 0x7ff) >> 0
    }
    pub fn set_arp_ptr(&mut self, value: u32) {
        let value = value << 0;
        assert!(value <= 0x7ff);
        self.0 &= !0x7ff;
        self.0 |= value;
    }
    /// Number of Equal Cost Multiple Paths. Overrules any value in LPM VCAP action.

    ///

    /// 0: 1 path 1: 2 paths 2: 3 paths ...
    pub fn ecmp_cnt(&self) -> u32 {
        (self.0 & 0xf0000) >> 16
    }
    pub fn set_ecmp_cnt(&mut self, value: u32) {
        let value = value << 16;
        assert!(value <= 0xf0000);
        self.0 &= !0xf0000;
        self.0 |= value;
    }
}
