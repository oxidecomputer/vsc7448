// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Based on mesa-v2021.09 (https://github.com/microchip-ung/mesa/) which has
// the following copyright and license:
//
// Copyright (c) 2004-2021 Microchip Technology Inc. and its subsidiaries.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// This is an autogenerated file; do not edit by hand!
use derive_more::{From, Into};
/// Enable per concurrent counter for each sticky bit
///
/// Each ANA_L3 sticky bit can be counted in each of the concurrent counters.
#[derive(Copy, Clone, Debug, Eq, PartialEq, From, Into)]
pub struct RLEG_STICKY_MASK(u32);
impl RLEG_STICKY_MASK {
    /// Enable counting of sticky event per concurrent counter.
    #[inline(always)]
    pub fn rleg_mc_hdr_err_redir_sticky_mask(&self) -> u32 {
        (self.0 & 0x2) >> 1
    }
    #[inline(always)]
    pub fn set_rleg_mc_hdr_err_redir_sticky_mask(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 1;
        self.0 &= !0x2;
        self.0 |= value;
    }
    /// Enable counting of sticky event per concurrent counter.
    #[inline(always)]
    pub fn rleg_mc_hit_sticky_mask(&self) -> u32 {
        (self.0 & 0x4) >> 2
    }
    #[inline(always)]
    pub fn set_rleg_mc_hit_sticky_mask(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 2;
        self.0 &= !0x4;
        self.0 |= value;
    }
    /// Enable counting of sticky event per concurrent counter.
    #[inline(always)]
    pub fn rleg_mc_ip_opt_redir_sticky_mask(&self) -> u32 {
        (self.0 & 0x8) >> 3
    }
    #[inline(always)]
    pub fn set_rleg_mc_ip_opt_redir_sticky_mask(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 3;
        self.0 &= !0x8;
        self.0 |= value;
    }
    /// Enable counting of sticky event per concurrent counter.
    #[inline(always)]
    pub fn rleg_mc_ttl_sticky_mask(&self) -> u32 {
        (self.0 & 0x10) >> 4
    }
    #[inline(always)]
    pub fn set_rleg_mc_ttl_sticky_mask(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 4;
        self.0 &= !0x10;
        self.0 |= value;
    }
    /// Enable counting of sticky event per concurrent counter.
    #[inline(always)]
    pub fn rleg_nonip_uc_redir_sticky_mask(&self) -> u32 {
        self.0 & 0x1
    }
    #[inline(always)]
    pub fn set_rleg_nonip_uc_redir_sticky_mask(&mut self, value: u32) {
        assert!(value <= 0x1);
        self.0 &= !0x1;
        self.0 |= value;
    }
    /// Enable counting of sticky event per concurrent counter.
    #[inline(always)]
    pub fn rleg_uc_hdr_err_redir_sticky_mask(&self) -> u32 {
        (self.0 & 0x20) >> 5
    }
    #[inline(always)]
    pub fn set_rleg_uc_hdr_err_redir_sticky_mask(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 5;
        self.0 &= !0x20;
        self.0 |= value;
    }
    /// Enable counting of sticky event per concurrent counter.
    #[inline(always)]
    pub fn rleg_uc_hit_sticky_mask(&self) -> u32 {
        (self.0 & 0x40) >> 6
    }
    #[inline(always)]
    pub fn set_rleg_uc_hit_sticky_mask(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 6;
        self.0 &= !0x40;
        self.0 |= value;
    }
    /// Enable counting of sticky event per concurrent counter.
    #[inline(always)]
    pub fn rleg_uc_ip_opt_redir_sticky_mask(&self) -> u32 {
        (self.0 & 0x80) >> 7
    }
    #[inline(always)]
    pub fn set_rleg_uc_ip_opt_redir_sticky_mask(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 7;
        self.0 &= !0x80;
        self.0 |= value;
    }
}
/// Enable per concurrent counter for each sticky bit
///
/// Each ANA_L3 sticky bit can be counted in each of the concurrent counters.
#[derive(Copy, Clone, Debug, Eq, PartialEq, From, Into)]
pub struct ROUT_STICKY_MASK(u32);
impl ROUT_STICKY_MASK {
    /// Enable counting of sticky event per concurrent counter.
    #[inline(always)]
    pub fn entry_not_found_sticky_mask(&self) -> u32 {
        (self.0 & 0x4000) >> 14
    }
    #[inline(always)]
    pub fn set_entry_not_found_sticky_mask(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 14;
        self.0 &= !0x4000;
        self.0 |= value;
    }
    /// Enable counting of sticky event per concurrent counter.
    #[inline(always)]
    pub fn ip4_sip_rpf_filter_sticky_mask(&self) -> u32 {
        (self.0 & 0x10000) >> 16
    }
    #[inline(always)]
    pub fn set_ip4_sip_rpf_filter_sticky_mask(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 16;
        self.0 &= !0x10000;
        self.0 |= value;
    }
    /// Enable counting of sticky event per concurrent counter.
    #[inline(always)]
    pub fn ip6_sip_rpf_filter_sticky_mask(&self) -> u32 {
        (self.0 & 0x20000) >> 17
    }
    #[inline(always)]
    pub fn set_ip6_sip_rpf_filter_sticky_mask(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 17;
        self.0 &= !0x20000;
        self.0 |= value;
    }
    /// Enable counting of sticky event per concurrent counter.
    #[inline(always)]
    pub fn ip_max_len_exceeded_sticky_mask(&self) -> u32 {
        (self.0 & 0x10) >> 4
    }
    #[inline(always)]
    pub fn set_ip_max_len_exceeded_sticky_mask(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 4;
        self.0 &= !0x10;
        self.0 |= value;
    }
    /// Enable counting of sticky event per concurrent counter.
    #[inline(always)]
    pub fn l2_mc_fwd_sticky_mask(&self) -> u32 {
        (self.0 & 0x20) >> 5
    }
    #[inline(always)]
    pub fn set_l2_mc_fwd_sticky_mask(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 5;
        self.0 &= !0x20;
        self.0 |= value;
    }
    /// Enable counting of sticky event per concurrent counter.
    #[inline(always)]
    pub fn l3_mc_fwd_sticky_mask(&self) -> u32 {
        (self.0 & 0x80) >> 7
    }
    #[inline(always)]
    pub fn set_l3_mc_fwd_sticky_mask(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 7;
        self.0 &= !0x80;
        self.0 |= value;
    }
    /// Enable counting of sticky event per concurrent counter.
    #[inline(always)]
    pub fn lpm_ip4mc_found_sticky_mask(&self) -> u32 {
        self.0 & 0x1
    }
    #[inline(always)]
    pub fn set_lpm_ip4mc_found_sticky_mask(&mut self, value: u32) {
        assert!(value <= 0x1);
        self.0 &= !0x1;
        self.0 |= value;
    }
    /// Enable counting of sticky event per concurrent counter.
    #[inline(always)]
    pub fn lpm_ip4uc_found_sticky_mask(&self) -> u32 {
        (self.0 & 0x4) >> 2
    }
    #[inline(always)]
    pub fn set_lpm_ip4uc_found_sticky_mask(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 2;
        self.0 &= !0x4;
        self.0 |= value;
    }
    /// Enable counting of sticky event per concurrent counter.
    #[inline(always)]
    pub fn lpm_ip6mc_found_sticky_mask(&self) -> u32 {
        (self.0 & 0x2) >> 1
    }
    #[inline(always)]
    pub fn set_lpm_ip6mc_found_sticky_mask(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 1;
        self.0 &= !0x2;
        self.0 |= value;
    }
    /// Enable counting of sticky event per concurrent counter.
    #[inline(always)]
    pub fn lpm_ip6uc_found_sticky_mask(&self) -> u32 {
        (self.0 & 0x8) >> 3
    }
    #[inline(always)]
    pub fn set_lpm_ip6uc_found_sticky_mask(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 3;
        self.0 &= !0x8;
        self.0 |= value;
    }
    /// Enable counting of sticky event per concurrent counter.
    #[inline(always)]
    pub fn mc_looped_cp_sticky_mask(&self) -> u32 {
        (self.0 & 0x2000) >> 13
    }
    #[inline(always)]
    pub fn set_mc_looped_cp_sticky_mask(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 13;
        self.0 &= !0x2000;
        self.0 |= value;
    }
    /// Enable counting of sticky event per concurrent counter.
    #[inline(always)]
    pub fn mc_rpf_filter_sticky_mask(&self) -> u32 {
        (self.0 & 0x40) >> 6
    }
    #[inline(always)]
    pub fn set_mc_rpf_filter_sticky_mask(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 6;
        self.0 &= !0x40;
        self.0 |= value;
    }
    /// Enable counting of sticky event per concurrent counter.
    #[inline(always)]
    pub fn no_mc_fwd_sticky_mask(&self) -> u32 {
        (self.0 & 0x100) >> 8
    }
    #[inline(always)]
    pub fn set_no_mc_fwd_sticky_mask(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 8;
        self.0 &= !0x100;
        self.0 |= value;
    }
    /// Enable counting of sticky event per concurrent counter.
    #[inline(always)]
    pub fn no_mc_vmid_avail_sticky_mask(&self) -> u32 {
        (self.0 & 0x8000) >> 15
    }
    #[inline(always)]
    pub fn set_no_mc_vmid_avail_sticky_mask(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 15;
        self.0 &= !0x8000;
        self.0 |= value;
    }
    /// Enable counting of sticky event per concurrent counter.
    #[inline(always)]
    pub fn uc_entry_found_sticky_mask(&self) -> u32 {
        (self.0 & 0x200) >> 9
    }
    #[inline(always)]
    pub fn set_uc_entry_found_sticky_mask(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 9;
        self.0 &= !0x200;
        self.0 |= value;
    }
    /// Enable counting of sticky event per concurrent counter.
    #[inline(always)]
    pub fn uc_icmp_redir_sticky_mask(&self) -> u32 {
        (self.0 & 0x400) >> 10
    }
    #[inline(always)]
    pub fn set_uc_icmp_redir_sticky_mask(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 10;
        self.0 &= !0x400;
        self.0 |= value;
    }
    /// Enable counting of sticky event per concurrent counter.
    #[inline(always)]
    pub fn uc_ttl_filtering_sticky_mask(&self) -> u32 {
        (self.0 & 0x800) >> 11
    }
    #[inline(always)]
    pub fn set_uc_ttl_filtering_sticky_mask(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 11;
        self.0 &= !0x800;
        self.0 |= value;
    }
    /// Enable counting of sticky event per concurrent counter.
    #[inline(always)]
    pub fn uc_zero_dmac_found_sticky_mask(&self) -> u32 {
        (self.0 & 0x1000) >> 12
    }
    #[inline(always)]
    pub fn set_uc_zero_dmac_found_sticky_mask(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 12;
        self.0 &= !0x1000;
        self.0 |= value;
    }
}
/// Enable per concurrent counter for each sticky bit
///
/// Each ANA_L3 sticky bit can be counted in each of the concurrent counters.
#[derive(Copy, Clone, Debug, Eq, PartialEq, From, Into)]
pub struct SECUR_STICKY_MASK(u32);
impl SECUR_STICKY_MASK {
    /// Enable counting of sticky event per concurrent counter.
    #[inline(always)]
    pub fn secur_dip_fail_sticky_mask(&self) -> u32 {
        self.0 & 0x1
    }
    #[inline(always)]
    pub fn set_secur_dip_fail_sticky_mask(&mut self, value: u32) {
        assert!(value <= 0x1);
        self.0 &= !0x1;
        self.0 |= value;
    }
    /// Enable counting of sticky event per concurrent counter.
    #[inline(always)]
    pub fn secur_ip4_dip_match_sticky_mask(&self) -> u32 {
        (self.0 & 0x4) >> 2
    }
    #[inline(always)]
    pub fn set_secur_ip4_dip_match_sticky_mask(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 2;
        self.0 &= !0x4;
        self.0 |= value;
    }
    /// Enable counting of sticky event per concurrent counter.
    #[inline(always)]
    pub fn secur_ip4_lpm_found_sticky_mask(&self) -> u32 {
        (self.0 & 0x2) >> 1
    }
    #[inline(always)]
    pub fn set_secur_ip4_lpm_found_sticky_mask(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 1;
        self.0 &= !0x2;
        self.0 |= value;
    }
    /// Enable counting of sticky event per concurrent counter.
    #[inline(always)]
    pub fn secur_ip4_sip_match_sticky_mask(&self) -> u32 {
        (self.0 & 0x40) >> 6
    }
    #[inline(always)]
    pub fn set_secur_ip4_sip_match_sticky_mask(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 6;
        self.0 &= !0x40;
        self.0 |= value;
    }
    /// Enable counting of sticky event per concurrent counter.
    #[inline(always)]
    pub fn secur_ip6_dip_match_sticky_mask(&self) -> u32 {
        (self.0 & 0x80) >> 7
    }
    #[inline(always)]
    pub fn set_secur_ip6_dip_match_sticky_mask(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 7;
        self.0 &= !0x80;
        self.0 |= value;
    }
    /// Enable counting of sticky event per concurrent counter.
    #[inline(always)]
    pub fn secur_ip6_lpm_found_sticky_mask(&self) -> u32 {
        (self.0 & 0x8) >> 3
    }
    #[inline(always)]
    pub fn set_secur_ip6_lpm_found_sticky_mask(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 3;
        self.0 &= !0x8;
        self.0 |= value;
    }
    /// Enable counting of sticky event per concurrent counter.
    #[inline(always)]
    pub fn secur_ip6_sip_match_sticky_mask(&self) -> u32 {
        (self.0 & 0x10) >> 4
    }
    #[inline(always)]
    pub fn set_secur_ip6_sip_match_sticky_mask(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 4;
        self.0 &= !0x10;
        self.0 |= value;
    }
    /// Enable counting of sticky event per concurrent counter.
    #[inline(always)]
    pub fn secur_sip_fail_sticky_mask(&self) -> u32 {
        (self.0 & 0x20) >> 5
    }
    #[inline(always)]
    pub fn set_secur_sip_fail_sticky_mask(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 5;
        self.0 &= !0x20;
        self.0 |= value;
    }
}
/// Enable per concurrent counter for each sticky bit
///
/// Each ANA_L3 sticky bit can be counted in each of the concurrent counters.
#[derive(Copy, Clone, Debug, Eq, PartialEq, From, Into)]
pub struct VLAN_MSTP_STICKY_MASK(u32);
impl VLAN_MSTP_STICKY_MASK {
    /// Enable counting of sticky event per concurrent counter.
    #[inline(always)]
    pub fn mstp_discard_sticky_mask(&self) -> u32 {
        (self.0 & 0x20) >> 5
    }
    #[inline(always)]
    pub fn set_mstp_discard_sticky_mask(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 5;
        self.0 &= !0x20;
        self.0 |= value;
    }
    /// Enable counting of sticky event per concurrent counter.
    #[inline(always)]
    pub fn mstp_fwd_allowed_sticky_mask(&self) -> u32 {
        (self.0 & 0x40) >> 6
    }
    #[inline(always)]
    pub fn set_mstp_fwd_allowed_sticky_mask(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 6;
        self.0 &= !0x40;
        self.0 |= value;
    }
    /// Enable counting of sticky event per concurrent counter.
    #[inline(always)]
    pub fn mstp_lrn_allowed_sticky_mask(&self) -> u32 {
        (self.0 & 0x4) >> 2
    }
    #[inline(always)]
    pub fn set_mstp_lrn_allowed_sticky_mask(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 2;
        self.0 &= !0x4;
        self.0 |= value;
    }
    /// Enable counting of sticky event per concurrent counter.
    #[inline(always)]
    pub fn mstp_lrn_deny_sticky_mask(&self) -> u32 {
        (self.0 & 0x8) >> 3
    }
    #[inline(always)]
    pub fn set_mstp_lrn_deny_sticky_mask(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 3;
        self.0 &= !0x8;
        self.0 |= value;
    }
    /// Enable counting of sticky event per concurrent counter.
    #[inline(always)]
    pub fn port_fwd_deny_sticky_mask(&self) -> u32 {
        (self.0 & 0x8000) >> 15
    }
    #[inline(always)]
    pub fn set_port_fwd_deny_sticky_mask(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 15;
        self.0 &= !0x8000;
        self.0 |= value;
    }
    /// Enable counting of sticky event per concurrent counter.
    #[inline(always)]
    pub fn port_lrn_deny_sticky_mask(&self) -> u32 {
        (self.0 & 0x10000) >> 16
    }
    #[inline(always)]
    pub fn set_port_lrn_deny_sticky_mask(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 16;
        self.0 &= !0x10000;
        self.0 |= value;
    }
    /// Enable counting of sticky event per concurrent counter.
    #[inline(always)]
    pub fn vlan_igr_filter_sticky_mask(&self) -> u32 {
        self.0 & 0x1
    }
    #[inline(always)]
    pub fn set_vlan_igr_filter_sticky_mask(&mut self, value: u32) {
        assert!(value <= 0x1);
        self.0 &= !0x1;
        self.0 |= value;
    }
    /// Enable counting of sticky event per concurrent counter.
    #[inline(always)]
    pub fn vlan_lookup_invld_sticky_mask(&self) -> u32 {
        (self.0 & 0x2) >> 1
    }
    #[inline(always)]
    pub fn set_vlan_lookup_invld_sticky_mask(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 1;
        self.0 &= !0x2;
        self.0 |= value;
    }
    /// Enable counting of sticky event per concurrent counter.
    #[inline(always)]
    pub fn vlan_lrn_deny_sticky_mask(&self) -> u32 {
        (self.0 & 0x10) >> 4
    }
    #[inline(always)]
    pub fn set_vlan_lrn_deny_sticky_mask(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 4;
        self.0 &= !0x10;
        self.0 |= value;
    }
}
