// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Based on mesa-v2021.09 (https://github.com/microchip-ung/mesa/) which has
// the following copyright and license:
//
// Copyright (c) 2004-2021 Microchip Technology Inc. and its subsidiaries.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// This is an autogenerated file; do not edit by hand!
use derive_more::{From, Into};
/// Multicast router leg mask
#[derive(Copy, Clone, Debug, Eq, PartialEq, From, Into)]
pub struct EVMID_MASK_CFG(u32);
impl EVMID_MASK_CFG {
    /// Bit mask with one bit for each router leg. If bit at position N is set, then a copy has to be sent to router leg N. If the frame has been received on router leg N, then the frame is L2 forwarded to other ports in the ingress VLAN. Else the frame is L3 fowarded to the VLAN that router leg N is attached to (ANA_L3:VMID:RLEG_CTRL.RLEG_EVID).
    #[inline(always)]
    pub fn evmid_mask(&self) -> u32 {
        self.0
    }
    #[inline(always)]
    pub fn set_evmid_mask(&mut self, value: u32) {
        self.0 = value;
    }
}
/// L3 multicast control register
///
/// L3 multicast control register
#[derive(Copy, Clone, Debug, Eq, PartialEq, From, Into)]
pub struct L3MC_CTRL(u32);
impl L3MC_CTRL {
    /// CPU queue used for frames redirected due to CPU_REDIR_MODE.
    #[inline(always)]
    pub fn cpu_qu(&self) -> u32 {
        (self.0 & 0x70) >> 4
    }
    #[inline(always)]
    pub fn set_cpu_qu(&mut self, value: u32) {
        debug_assert!(value <= 0x7);
        let value = value << 4;
        self.0 &= !0x70;
        self.0 |= value;
    }
    /// Redirect/copy frame to CPU. CPU queue used is configured in CPU_QU.
    ///
    /// 0b00: No CPU redirection/copy. 0b01: Copy CPU 0b10: Copy to CPU, skip L3 forwarding but preserve L2 forwarding. 0b11: Redirect to CPU, skip L2 and L3 forwarding.
    #[inline(always)]
    pub fn cpu_redir_mode(&self) -> u32 {
        (self.0 & 0xc) >> 2
    }
    #[inline(always)]
    pub fn set_cpu_redir_mode(&mut self, value: u32) {
        debug_assert!(value <= 0x3);
        let value = value << 2;
        self.0 &= !0xc;
        self.0 |= value;
    }
    /// Enable CPU copy of frames, which are otherwise candidates for routing, but have TTL/HL<2. Such frames are not L3 forwarded, but may still be subject to L2 forwarding. CPU queue used is configured in ANA_L3:COMMON:CPU_QU_CFG.CPU_IP_TTL_FAIL_QU.
    #[inline(always)]
    pub fn ipmc_ttl_copy_ena(&self) -> u32 {
        self.0 & 0x1
    }
    #[inline(always)]
    pub fn set_ipmc_ttl_copy_ena(&mut self, value: u32) {
        debug_assert!(value <= 0x1);
        self.0 &= !0x1;
        self.0 |= value;
    }
    /// Enable reverse path forwarding check, i.e. only allow routing of frames received on a specific router leg (RPF_VMID), i.e. IVMID=RPF_VMID. Related parameters: ANA_L3:VLAN_ARP_L3MC_STICKY:L3_ARP_IPMC_STICKY.MC_RPF_FILTER_STICKY Note that this check is a different check than SIP RPF check, ref. ANA_L3:VMID:RLEG_CTRL.RLEG_IP4_SIP_RPF_MODE ANA_L3:VMID:RLEG_CTRL.RLEG_IP6_SIP_RPF_MODE
    #[inline(always)]
    pub fn rpf_chk_ena(&self) -> u32 {
        (self.0 & 0x2) >> 1
    }
    #[inline(always)]
    pub fn set_rpf_chk_ena(&mut self, value: u32) {
        debug_assert!(value <= 0x1);
        let value = value << 1;
        self.0 &= !0x2;
        self.0 |= value;
    }
    /// Expected IVMID if RPF check is enabled, ref. RPF_CHK_ENA.
    #[inline(always)]
    pub fn rpf_vmid(&self) -> u32 {
        (self.0 & 0x7f00) >> 8
    }
    #[inline(always)]
    pub fn set_rpf_vmid(&mut self, value: u32) {
        debug_assert!(value <= 0x7f);
        let value = value << 8;
        self.0 &= !0x7f00;
        self.0 |= value;
    }
}
