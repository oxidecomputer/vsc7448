// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Based on mesa-v2021.09 (https://github.com/microchip-ung/mesa/) which has
// the following copyright and license:
//
// Copyright (c) 2004-2021 Microchip Technology Inc. and its subsidiaries.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// This is an autogenerated file; do not edit by hand!
use derive_more::{From, Into};
/// ARP table data 1
///
/// Configuration registers for ARP table
#[derive(From, Into)]
pub struct ARP_CFG_1(u32);
impl ARP_CFG_1 {
    /// 32 least significant bits of MAC address. Used for ARP entry and/or (SMAC,SIP)/(DMAC,DIP) check. Most significant bits are configured in ARP_CFG_0.MAC_MSB. If MAC address for ARP entry is all-zeros, then the frame is redirected to CPU. CPU queue used for such frames is configured in ZERO_DMAC_CPU_QU.
    ///
    /// Bit 0: MAC bit 0 ... Bit 31: MAC bit 31
    pub fn mac_lsb(&self) -> u32 {
        self.0
    }
    pub fn set_mac_lsb(&mut self, value: u32) {
        self.0 = value;
    }
}
/// Multicast router leg mask
#[derive(From, Into)]
pub struct EVMID_MASK_CFG(u32);
impl EVMID_MASK_CFG {
    /// Bit mask with one bit for each router leg. If bit at position N is set, then a copy has to be sent to router leg N. If the frame has been received on router leg N, then the frame is L2 forwarded to other ports in the ingress VLAN. Else the frame is L3 fowarded to the VLAN that router leg N is attached to (ANA_L3:VMID:RLEG_CTRL.RLEG_EVID).
    pub fn evmid_mask(&self) -> u32 {
        self.0
    }
    pub fn set_evmid_mask(&mut self, value: u32) {
        self.0 = value;
    }
}
