// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Based on mesa-v2021.09 (https://github.com/microchip-ung/mesa/) which has
// the following copyright and license:
//
// Copyright (c) 2004-2021 Microchip Technology Inc. and its subsidiaries.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// This is an autogenerated file; do not edit by hand!
use derive_more::{From, Into};

/// Register `COSID_MAP_TABLE_ANA`
///
/// COSID mapping table
///
/// COSID mapping table used for mapping the selected COSID values. A single mapping table is available for each of the Service/Path VOEs.
#[derive(From, Into)]
pub struct COSID_MAP_TABLE_ANA(u32);
impl COSID_MAP_TABLE_ANA {
    /// The table is used to map the choosen COSID in the ANA. bit(2:0) will be used to map COSID = 0 bit(5:3) will be used to map COSID = 1 ... bit(23:21) will be used to map COSID = 7 When mapping a COSID, the following procedure is followed: 1) Use COSID_SRC_SEL_ANA to select the source of the COSID mapping. I.e. if COSID_SRC_SEL_ANA = 1 (TC) the input to the mapping table is set to the IFH.TC. 2) Map the selected value. If IFH.TC = 3, the mapped COSID will be set to COSID_MAP_TABLE_ANA[11:9]
    pub fn cosid_map_table_ana(&self) -> u32 {
        self.0 & 0xffffff
    }
    pub fn set_cosid_map_table_ana(&mut self, value: u32) {
        assert!(value <= 0xffffff);
        self.0 &= !0xffffff;
        self.0 |= value;
    }
}

/// Register `LBR_CRC_ERR_CNT`
///
/// Count the number of LBR and TST CRC errors received.
///
/// The VOE can verify the CRC-32 of Test TLVs in incoming LBR and TST PDUs. This functionality is enabled using one of the following bit fields: * VOP:VOE_CONF:OAM_HW_CTRL.LBR_TLV_CRC_VERIFY_ENA * VOP:VOE_CONF:OAM_HW_CTRL.TST_TLV_CRC_VERIFY_ENA When enabled the VOE examines the TLV field of valid LBR and TST PDUs in the Rx direction. If the first TLV following the LBR or TST PDU is a Test TLV including a CRC-32 across the Data Pattern, the VOE will calculate the CRC across the Data Pattern and verify the CRC-32. This register will count the number of CRC errors received by the VOE. The CRC counters are indexed as follows: * Service (/Path) VOEs are indexed: 0 - 255 * Port VOEs are indexed: 256 (Port 0) - 266 (Port 10)
#[derive(From, Into)]
pub struct LBR_CRC_ERR_CNT(u32);
impl LBR_CRC_ERR_CNT {
    /// See Register Description.
    pub fn lbr_crc_err_cnt(&self) -> u32 {
        self.0
    }
    pub fn set_lbr_crc_err_cnt(&mut self, value: u32) {
        self.0 = value;
    }
}
