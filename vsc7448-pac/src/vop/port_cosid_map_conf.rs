// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Based on mesa-v2021.09 (https://github.com/microchip-ung/mesa/) which has
// the following copyright and license:
//
// Copyright (c) 2004-2021 Microchip Technology Inc. and its subsidiaries.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// This is an autogenerated file; do not edit by hand!
use derive_more::{From, Into};
/// COSID / Color control signals
///
/// The bit fields in this register determines the source of the COSID mapping / COLOR of frames not processed by the VOE.
#[derive(From, Into)]
pub struct COSID_MAP_CFG_REW(u32);
impl COSID_MAP_CFG_REW {
    /// Determines if the VOE LM counters counts all frames or only GREEN frames.
    ///
    /// '0': do not include yellow frames in the LM count. '1': include yellow frames in the LM count.
    pub fn cnt_yellow_rew(&self) -> u32 {
        self.0 & 0x1
    }
    pub fn set_cnt_yellow_rew(&mut self, value: u32) {
        assert!(value <= 0x1);
        self.0 &= !0x1;
        self.0 |= value;
    }
    /// Determines which internal signal carries color for the current VOE.
    ///
    /// "00": ifh.dp_color "01": ifh.cl_dei "10": REW:MAP_RES_X:MAP_VAL_A.OAM_COLOR (Output from the mapping table) "11": reserved for future use (do not use)
    pub fn color_src_sel_rew(&self) -> u32 {
        (self.0 & 0x6) >> 1
    }
    pub fn set_color_src_sel_rew(&mut self, value: u32) {
        let value = value << 1;
        assert!(value <= 0x6);
        self.0 &= !0x6;
        self.0 |= value;
    }
    /// Selects the source of the COSID mapping.
    ///
    /// "00": ifh.cosid "01": ifh.tc "10": ifh_iprio "11": REW:MAP_RES_X:MAP_VAL_A.OAM_COSID (Output from the mapping table)
    pub fn cosid_src_sel_rew(&self) -> u32 {
        (self.0 & 0x18) >> 3
    }
    pub fn set_cosid_src_sel_rew(&mut self, value: u32) {
        let value = value << 3;
        assert!(value <= 0x18);
        self.0 &= !0x18;
        self.0 |= value;
    }
}
/// LSB of Rx Port VOE mapping table (ANA).
///
/// This register contains the lower 32 bits of the Port VOE Rx (ANA) COSID mapping table. The mapping in this register is used when Port DEI = 0.
#[derive(From, Into)]
pub struct PORT_RX_COSID_MAP(u32);
impl PORT_RX_COSID_MAP {
    /// See register description.
    pub fn port_rx_cosid_map(&self) -> u32 {
        self.0
    }
    pub fn set_port_rx_cosid_map(&mut self, value: u32) {
        self.0 = value;
    }
}
/// MSB of Rx Port VOE mapping table (ANA).
///
/// This register contains the upper 32 bits of the Port VOE Rx (ANA) COSID mapping table. This mapping in this register is used when Port DEI = 1
#[derive(From, Into)]
pub struct PORT_RX_COSID_MAP1(u32);
impl PORT_RX_COSID_MAP1 {
    /// See register description.
    pub fn port_rx_cosid_map1(&self) -> u32 {
        self.0
    }
    pub fn set_port_rx_cosid_map1(&mut self, value: u32) {
        self.0 = value;
    }
}
/// LSB of Tx Port VOE mapping table (REW).
///
/// This register contains the lower 32 bits of the Port VOE Tx (REW) COSID mapping table. This mapping in this register is used when Port DEI = 0
#[derive(From, Into)]
pub struct PORT_TX_COSID_MAP(u32);
impl PORT_TX_COSID_MAP {
    /// See register description.
    pub fn port_tx_cosid_map(&self) -> u32 {
        self.0
    }
    pub fn set_port_tx_cosid_map(&mut self, value: u32) {
        self.0 = value;
    }
}
