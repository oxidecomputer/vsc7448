// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Based on mesa-v2021.09 (https://github.com/microchip-ung/mesa/) which has
// the following copyright and license:
//
// Copyright (c) 2004-2021 Microchip Technology Inc. and its subsidiaries.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// This is an autogenerated file; do not edit by hand!
use derive_more::{From, Into};
/// PCS1G Aneg Configuration
///
/// PCS1G Auto-negotiation configuration register
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct PCS1G_ANEG_CFG(u32);
impl PCS1G_ANEG_CFG {
    /// Advertised Ability Register: Holds the capabilities of the device as described IEEE 802.3, Clause 37.
    #[inline]
    pub fn adv_ability(&self) -> u32 {
        (self.0 & 0xffff0000) >> 16
    }
    #[inline]
    pub fn set_adv_ability(&mut self, value: u32) {
        assert!(value <= 0xffff);
        let value = value << 16;
        self.0 &= !0xffff0000;
        self.0 |= value;
    }
    /// Auto Negotiation Enable
    ///
    /// 0: Auto Negotiation Disabled 1: Auto Negotiation Enabled
    #[inline]
    pub fn aneg_ena(&self) -> u32 {
        self.0 & 0x1
    }
    #[inline]
    pub fn set_aneg_ena(&mut self, value: u32) {
        assert!(value <= 0x1);
        self.0 &= !0x1;
        self.0 |= value;
    }
    /// Auto Negotiation Restart
    ///
    /// 0: No action 1: Restart Auto Negotiation
    #[inline]
    pub fn aneg_restart_one_shot(&self) -> u32 {
        (self.0 & 0x2) >> 1
    }
    #[inline]
    pub fn set_aneg_restart_one_shot(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 1;
        self.0 &= !0x2;
        self.0 |= value;
    }
    /// Software Resolve Abilities
    ///
    /// 0: If Auto Negotiation fails (no matching HD or FD capabilities) the link is disabled 1: The result of an Auto Negotiation is ignored - the link can be setup via software. This bit must be set in SGMII mode.
    #[inline]
    pub fn sw_resolve_ena(&self) -> u32 {
        (self.0 & 0x100) >> 8
    }
    #[inline]
    pub fn set_sw_resolve_ena(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 8;
        self.0 &= !0x100;
        self.0 |= value;
    }
}
/// PCS1G Aneg Next Page Configuration
///
/// PCS1G Auto-negotiation configuration register for next-page function
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct PCS1G_ANEG_NP_CFG(u32);
impl PCS1G_ANEG_NP_CFG {
    /// Next page loaded
    ///
    /// 0: next page is free and can be loaded 1: next page register has been filled (to be set after np_tx has been filled)
    #[inline]
    pub fn np_loaded_one_shot(&self) -> u32 {
        self.0 & 0x1
    }
    #[inline]
    pub fn set_np_loaded_one_shot(&mut self, value: u32) {
        assert!(value <= 0x1);
        self.0 &= !0x1;
        self.0 |= value;
    }
    /// Next page register: Holds the next-page information as described in IEEE 802.3, Clause 37
    #[inline]
    pub fn np_tx(&self) -> u32 {
        (self.0 & 0xffff0000) >> 16
    }
    #[inline]
    pub fn set_np_tx(&mut self, value: u32) {
        assert!(value <= 0xffff);
        let value = value << 16;
        self.0 &= !0xffff0000;
        self.0 |= value;
    }
}
/// PCS1G Aneg Next Page Status Register
///
/// PCS1G Auto-negotiation next page status register
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct PCS1G_ANEG_NP_STATUS(u32);
impl PCS1G_ANEG_NP_STATUS {
    /// Next page ability register from link partner as described in IEEE 802.3, Clause 37
    #[inline]
    pub fn lp_np_rx(&self) -> u32 {
        (self.0 & 0xffff0000) >> 16
    }
    #[inline]
    pub fn set_lp_np_rx(&mut self, value: u32) {
        assert!(value <= 0xffff);
        let value = value << 16;
        self.0 &= !0xffff0000;
        self.0 |= value;
    }
}
/// PCS1G ANEG Status Register
///
/// PCS1G Auto-negotiation status register
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct PCS1G_ANEG_STATUS(u32);
impl PCS1G_ANEG_STATUS {
    /// Auto Negotiation Complete
    ///
    /// 0: No Auto Negotiation has been completed 1: Indicates that an Auto Negotiation has completed successfully
    #[inline]
    pub fn aneg_complete(&self) -> u32 {
        self.0 & 0x1
    }
    #[inline]
    pub fn set_aneg_complete(&mut self, value: u32) {
        assert!(value <= 0x1);
        self.0 &= !0x1;
        self.0 |= value;
    }
    /// Advertised abilities from link partner as described in IEEE 802.3, Clause 37
    #[inline]
    pub fn lp_adv_ability(&self) -> u32 {
        (self.0 & 0xffff0000) >> 16
    }
    #[inline]
    pub fn set_lp_adv_ability(&mut self, value: u32) {
        assert!(value <= 0xffff);
        let value = value << 16;
        self.0 &= !0xffff0000;
        self.0 |= value;
    }
    /// Status indicating whether a new page has been received.
    ///
    /// 0: No new page received 1: New page received Bit is cleared by writing a 1 to this position.
    #[inline]
    pub fn page_rx_sticky(&self) -> u32 {
        (self.0 & 0x8) >> 3
    }
    #[inline]
    pub fn set_page_rx_sticky(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 3;
        self.0 &= !0x8;
        self.0 |= value;
    }
    /// Resolve priority
    ///
    /// 0: ANEG is in progress 1: ANEG nearly finished - priority can be resolved (via software)
    #[inline]
    pub fn pr(&self) -> u32 {
        (self.0 & 0x10) >> 4
    }
    #[inline]
    pub fn set_pr(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 4;
        self.0 &= !0x10;
        self.0 |= value;
    }
}
/// PCS1G comma detection Configuration
///
/// PCS1G comma detection configuration
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct PCS1G_CDET_CFG(u32);
impl PCS1G_CDET_CFG {
    /// Enable comma detection and code-group alignment
    ///
    /// 0: Comma detection disabled 1: Comma detection enabled
    #[inline]
    pub fn cdet_ena(&self) -> u32 {
        self.0 & 0x1
    }
    #[inline]
    pub fn set_cdet_ena(&mut self, value: u32) {
        assert!(value <= 0x1);
        self.0 &= !0x1;
        self.0 |= value;
    }
}
/// PCS1G Configuration
///
/// PCS1G main configuration register
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct PCS1G_CFG(u32);
impl PCS1G_CFG {
    /// Enable Link control via Backplane Ethernet ANEG
    ///
    /// 0: Disable link control 1: Enable link control
    #[inline]
    pub fn an_link_ctrl_ena(&self) -> u32 {
        (self.0 & 0x2) >> 1
    }
    #[inline]
    pub fn set_an_link_ctrl_ena(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 1;
        self.0 &= !0x2;
        self.0 |= value;
    }
    /// Set type of link_status indication at CPU-System
    ///
    /// 0: Sync_status (from PCS synchronization state machine) 1: Bit 15 of PCS1G_ANEG_STATUS.lp_adv_ability (Link up/down)
    #[inline]
    pub fn link_status_type(&self) -> u32 {
        (self.0 & 0x10) >> 4
    }
    #[inline]
    pub fn set_link_status_type(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 4;
        self.0 &= !0x10;
        self.0 |= value;
    }
    /// PCS enable
    ///
    /// 0: Disable PCS 1: Enable PCS
    #[inline]
    pub fn pcs_ena(&self) -> u32 {
        self.0 & 0x1
    }
    #[inline]
    pub fn set_pcs_ena(&mut self, value: u32) {
        assert!(value <= 0x1);
        self.0 &= !0x1;
        self.0 |= value;
    }
}
/// PCS1G Debug Configuration
///
/// PCS1G Debug configuration register
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct PCS1G_DBG_CFG(u32);
impl PCS1G_DBG_CFG {
    /// Use Debug Link Timer
    ///
    /// 0: Normal 10 ms (1.6 ms in sgmii mode) timer is selected 1: Reduced 9.77 us (1.56 us in sgmii mode) timer is selected
    #[inline]
    pub fn udlt(&self) -> u32 {
        self.0 & 0x1
    }
    #[inline]
    pub fn set_udlt(&mut self, value: u32) {
        assert!(value <= 0x1);
        self.0 &= !0x1;
        self.0 |= value;
    }
}
/// PCS1G debug status
///
/// PCS1G debug status register
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct PCS1G_DEBUG_STATUS(u32);
impl PCS1G_DEBUG_STATUS {
    /// Indicates the mode of the TBI
    ///
    /// 00: Idle mode 01: Configuration mode 10: Reserved 11: Data mode
    #[inline]
    pub fn xmit_mode(&self) -> u32 {
        (self.0 & 0x3000) >> 12
    }
    #[inline]
    pub fn set_xmit_mode(&mut self, value: u32) {
        assert!(value <= 0x3);
        let value = value << 12;
        self.0 &= !0x3000;
        self.0 |= value;
    }
}
/// PCS1G Loopback Configuration
///
/// PCS1G Loop-Back configuration register
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct PCS1G_LB_CFG(u32);
impl PCS1G_LB_CFG {
    /// Loops data in PCS (GMII side) from ingress direction to egress direction. Rate adaption is automatically performed in a FIFO within the PCS
    ///
    /// 0: GMII Loopback Disabled 1:GMII Loopback Enabled
    #[inline]
    pub fn gmii_phy_lb_ena(&self) -> u32 {
        (self.0 & 0x2) >> 1
    }
    #[inline]
    pub fn set_gmii_phy_lb_ena(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 1;
        self.0 &= !0x2;
        self.0 |= value;
    }
    /// Enable rate adaption capability in PCS receive direction explicitely (required when PHY data looped back within MAC)
    ///
    /// 0: Disable 1: Enable
    #[inline]
    pub fn ra_ena(&self) -> u32 {
        (self.0 & 0x10) >> 4
    }
    #[inline]
    pub fn set_ra_ena(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 4;
        self.0 &= !0x10;
        self.0 |= value;
    }
    /// Loops data in PCS (TBI side) from egress direction to ingress direction. The Rx clock is automatically set equal to the Tx clock
    ///
    /// 0: TBI Loopback Disabled 1:TBI Loopback Enabled
    #[inline]
    pub fn tbi_host_lb_ena(&self) -> u32 {
        self.0 & 0x1
    }
    #[inline]
    pub fn set_tbi_host_lb_ena(&mut self, value: u32) {
        assert!(value <= 0x1);
        self.0 &= !0x1;
        self.0 |= value;
    }
}
/// PCS1G link down counter
///
/// PCS1G link down counter register
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct PCS1G_LINK_DOWN_CNT(u32);
impl PCS1G_LINK_DOWN_CNT {
    /// Link Down Counter. A counter that counts the number of times a link has been down. The counter does not saturate at 255 and is only cleared when writing 0 to the register
    #[inline]
    pub fn link_down_cnt(&self) -> u32 {
        self.0 & 0xff
    }
    #[inline]
    pub fn set_link_down_cnt(&mut self, value: u32) {
        assert!(value <= 0xff);
        self.0 &= !0xff;
        self.0 |= value;
    }
}
/// PCS1G link status
///
/// PCS1G link status register
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct PCS1G_LINK_STATUS(u32);
impl PCS1G_LINK_STATUS {
    /// Additional delay in rx-path; multiply the value of this field by the line-rate bit-period (800ps for 10/100/1000, 320ps for 2G5 mode.) This field is valid when the link is up, it remains constant for as long as the link is up, value may cange on link-down event. This field shows the number of data bits that is stored in the rx comma-alignment block, values of 0-9 is possible.
    #[inline]
    pub fn delay_var(&self) -> u32 {
        (self.0 & 0xf000) >> 12
    }
    #[inline]
    pub fn set_delay_var(&mut self, value: u32) {
        assert!(value <= 0xf);
        let value = value << 12;
        self.0 &= !0xf000;
        self.0 |= value;
    }
    /// Indicates whether the link is up or down. A link is up when ANEG state machine is in state LINK_OK or AN_DISABLE_LINK_OK
    ///
    /// 0: Link down 1: Link up
    #[inline]
    pub fn link_status(&self) -> u32 {
        (self.0 & 0x10) >> 4
    }
    #[inline]
    pub fn set_link_status(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 4;
        self.0 &= !0x10;
        self.0 |= value;
    }
    /// Indicates whether or not the selected Signal Detect input line is asserted
    ///
    /// 0: No signal detected 1: Signal detected
    #[inline]
    pub fn signal_detect(&self) -> u32 {
        (self.0 & 0x100) >> 8
    }
    #[inline]
    pub fn set_signal_detect(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 8;
        self.0 &= !0x100;
        self.0 |= value;
    }
    /// Indicates if PCS has successfully synchronized
    ///
    /// 0: PCS is out of sync 1: PCS has synchronized
    #[inline]
    pub fn sync_status(&self) -> u32 {
        self.0 & 0x1
    }
    #[inline]
    pub fn set_sync_status(&mut self, value: u32) {
        assert!(value <= 0x1);
        self.0 &= !0x1;
        self.0 |= value;
    }
}
/// PCS1G Low Power Idle Configuration
///
/// Configuration register for Low Power Idle (Energy Efficient Ethernet)
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct PCS1G_LPI_CFG(u32);
impl PCS1G_LPI_CFG {
    /// LPI-Timer test mode.
    ///
    /// 0: Normal timing constants are used 1: Shortened timing constants are used
    #[inline]
    pub fn lpi_testmode(&self) -> u32 {
        (self.0 & 0x10000) >> 16
    }
    #[inline]
    pub fn set_lpi_testmode(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 16;
        self.0 &= !0x10000;
        self.0 |= value;
    }
    /// QSGMII master/slave selection (only one master allowed per QSGMII). The master drives LPI timing on serdes
    ///
    /// 0: Slave 1: Master
    #[inline]
    pub fn qsgmii_ms_sel(&self) -> u32 {
        (self.0 & 0x100000) >> 20
    }
    #[inline]
    pub fn set_qsgmii_ms_sel(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 20;
        self.0 &= !0x100000;
        self.0 |= value;
    }
    /// Disable output of Low-Power Idle in receive direction (to core)
    ///
    /// 0: Enable 1: Disable
    #[inline]
    pub fn rx_lpi_out_dis(&self) -> u32 {
        (self.0 & 0x20000) >> 17
    }
    #[inline]
    pub fn set_rx_lpi_out_dis(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 17;
        self.0 &= !0x20000;
        self.0 |= value;
    }
    /// Assert Low-Power Idle (LPI) in transmit mode
    ///
    /// 0: Disable LPI transmission 1: Enable LPI transmission
    #[inline]
    pub fn tx_assert_lpidle(&self) -> u32 {
        self.0 & 0x1
    }
    #[inline]
    pub fn set_tx_assert_lpidle(&mut self, value: u32) {
        assert!(value <= 0x1);
        self.0 &= !0x1;
        self.0 |= value;
    }
}
/// PCS1G Low Power Idle Status
///
/// Status register for Low Power Idle (Energy Efficient Ethernet)
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct PCS1G_LPI_STATUS(u32);
impl PCS1G_LPI_STATUS {
    /// Receiver Low-Power idle occurrence
    ///
    /// 0: No LPI symbols received 1: Receiver has received LPI symbols Bit is cleared by writing a 1 to this position.
    #[inline]
    pub fn rx_lpi_event_sticky(&self) -> u32 {
        (self.0 & 0x1000) >> 12
    }
    #[inline]
    pub fn set_rx_lpi_event_sticky(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 12;
        self.0 &= !0x1000;
        self.0 |= value;
    }
    /// Receiver Low-Power Idle mode
    ///
    /// 0: Receiver not in low power idle mode 1: Receiver is in low power idle mode
    #[inline]
    pub fn rx_lpi_mode(&self) -> u32 {
        (self.0 & 0x100) >> 8
    }
    #[inline]
    pub fn set_rx_lpi_mode(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 8;
        self.0 &= !0x100;
        self.0 |= value;
    }
    /// Receiver Low-Power Quiet mode
    ///
    /// 0: Receiver not in quiet mode 1: Receiver is in quiet mode
    #[inline]
    pub fn rx_quiet(&self) -> u32 {
        (self.0 & 0x200) >> 9
    }
    #[inline]
    pub fn set_rx_quiet(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 9;
        self.0 &= !0x200;
        self.0 |= value;
    }
    /// Transmitter Low-Power idle occurrence
    ///
    /// 0: No LPI symbols transmitted 1: Transmitter has transmitted LPI symbols Bit is cleared by writing a 1 to this position.
    #[inline]
    pub fn tx_lpi_event_sticky(&self) -> u32 {
        (self.0 & 0x10) >> 4
    }
    #[inline]
    pub fn set_tx_lpi_event_sticky(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 4;
        self.0 &= !0x10;
        self.0 |= value;
    }
    /// Transmitter Low-Power Idle mode
    ///
    /// 0: Transmitter not in low power idle mode 1: Transmitter is in low power idle mode
    #[inline]
    pub fn tx_lpi_mode(&self) -> u32 {
        self.0 & 0x1
    }
    #[inline]
    pub fn set_tx_lpi_mode(&mut self, value: u32) {
        assert!(value <= 0x1);
        self.0 &= !0x1;
        self.0 |= value;
    }
    /// Transmitter Low-Power Quiet mode
    ///
    /// 0: Transmitter not in quiet mode 1: Transmitter is in quiet mode
    #[inline]
    pub fn tx_quiet(&self) -> u32 {
        (self.0 & 0x2) >> 1
    }
    #[inline]
    pub fn set_tx_quiet(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 1;
        self.0 &= !0x2;
        self.0 |= value;
    }
}
/// PCS1G wake error counter
///
/// PCS1G Low Power Idle wake error counter (Energy Efficient Ethernet)
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct PCS1G_LPI_WAKE_ERROR_CNT(u32);
impl PCS1G_LPI_WAKE_ERROR_CNT {
    /// Wake Error Counter. A counter that is incremented when the link partner does not send wake-up burst in due time. The counter saturates at 65535 and is cleared when writing 0 to the register
    #[inline]
    pub fn wake_error_cnt(&self) -> u32 {
        self.0 & 0xffff
    }
    #[inline]
    pub fn set_wake_error_cnt(&mut self, value: u32) {
        assert!(value <= 0xffff);
        self.0 &= !0xffff;
        self.0 |= value;
    }
}
/// PCS1G Mode Configuration
///
/// PCS1G mode configuration
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct PCS1G_MODE_CFG(u32);
impl PCS1G_MODE_CFG {
    /// Selection of PCS operation
    ///
    /// 0: PCS is used in SERDES mode 1: PCS is used in SGMII mode
    #[inline]
    pub fn sgmii_mode_ena(&self) -> u32 {
        self.0 & 0x1
    }
    #[inline]
    pub fn set_sgmii_mode_ena(&mut self, value: u32) {
        assert!(value <= 0x1);
        self.0 &= !0x1;
        self.0 |= value;
    }
    /// Unidirectional mode enable. Implementation of 802.3, Clause 66. When asserted, this enables MAC to transmit data independent of the state of the receive link.
    ///
    /// 0: Unidirectional mode disabled 1: Unidirectional mode enabled
    #[inline]
    pub fn unidir_mode_ena(&self) -> u32 {
        (self.0 & 0x10) >> 4
    }
    #[inline]
    pub fn set_unidir_mode_ena(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 4;
        self.0 &= !0x10;
        self.0 |= value;
    }
}
/// PCS1G Signal Detect Configuration
///
/// PCS1G signal_detect configuration
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct PCS1G_SD_CFG(u32);
impl PCS1G_SD_CFG {
    /// Signal Detect Enable
    ///
    /// 0: The Signal Detect input pin is ignored. The PCS assumes an active Signal Detect at all times 1: The Signal Detect input pin is used to determine if a signal is detected
    #[inline]
    pub fn sd_ena(&self) -> u32 {
        self.0 & 0x1
    }
    #[inline]
    pub fn set_sd_ena(&mut self, value: u32) {
        assert!(value <= 0x1);
        self.0 &= !0x1;
        self.0 |= value;
    }
    /// Signal detect polarity: The signal level on signal_detect input pin must be equal to SD_POL to indicate signal detection (SD_ENA must be set)
    ///
    /// 0: Signal Detect input pin must be '0' to indicate a signal detection 1: Signal Detect input pin must be '1' to indicate a signal detection
    #[inline]
    pub fn sd_pol(&self) -> u32 {
        (self.0 & 0x10) >> 4
    }
    #[inline]
    pub fn set_sd_pol(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 4;
        self.0 &= !0x10;
        self.0 |= value;
    }
    /// Signal detect selection (select input for internal signal_detect line)
    ///
    /// 0: Select signal_detect line from hardmacro 1: Select external signal_detect line
    #[inline]
    pub fn sd_sel(&self) -> u32 {
        (self.0 & 0x100) >> 8
    }
    #[inline]
    pub fn set_sd_sel(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 8;
        self.0 &= !0x100;
        self.0 |= value;
    }
}
/// PCS1G sticky register
///
/// PCS1G status register for sticky bits
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct PCS1G_STICKY(u32);
impl PCS1G_STICKY {
    /// The sticky bit is set when the link has been down - i.e. if the ANEG state machine has not been in the AN_DISABLE_LINK_OK or LINK_OK state for one or more clock cycles. This occurs if e.g. ANEG is restarted or for example if signal-detect or synchronization has been lost for more than 10 ms (1.6 ms in SGMII mode). By setting the UDLT bit, the required down time can be reduced to 9,77 us (1.56 us)
    ///
    /// 0: Link is up 1: Link has been down Bit is cleared by writing a 1 to this position.
    #[inline]
    pub fn link_down_sticky(&self) -> u32 {
        (self.0 & 0x10) >> 4
    }
    #[inline]
    pub fn set_link_down_sticky(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 4;
        self.0 &= !0x10;
        self.0 |= value;
    }
    /// Sticky bit indicating if PCS synchronization has been lost
    ///
    /// 0: Synchronization has not been lost at any time 1: Synchronization has been lost for one or more clock cycles Bit is cleared by writing a 1 to this position.
    #[inline]
    pub fn out_of_sync_sticky(&self) -> u32 {
        self.0 & 0x1
    }
    #[inline]
    pub fn set_out_of_sync_sticky(&mut self, value: u32) {
        assert!(value <= 0x1);
        self.0 &= !0x1;
        self.0 |= value;
    }
}
