// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Based on mesa-v2021.09 (https://github.com/microchip-ung/mesa/) which has
// the following copyright and license:
//
// Copyright (c) 2004-2021 Microchip Technology Inc. and its subsidiaries.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// This is an autogenerated file; do not edit by hand!

use crate::types::RegisterAddress;

// Register groups are stored in the tree as submodules

pub mod aggr;
pub mod coremem;
pub mod glag;
pub mod mirror_probe;
pub mod pgid;
pub mod ps_common;
pub mod ps_sticky;
pub mod ps_sticky_mask;
pub mod ram_ctrl;
pub mod sflow;
pub mod src;
pub mod stat_cnt_cfg_acl;
pub mod stat_cnt_cfg_bdlb;
pub mod stat_cnt_cfg_bum;
pub mod stat_cnt_cfg_erleg;
pub mod stat_cnt_cfg_irleg;
pub mod stat_cnt_cfg_isdx;
pub mod stat_cnt_cfg_port;
pub mod stat_cnt_cfg_queue;
pub mod stat_global_cfg_acl;
pub mod stat_global_cfg_bdlb;
pub mod stat_global_cfg_bum;
pub mod stat_global_cfg_erleg;
pub mod stat_global_cfg_irleg;
pub mod stat_global_cfg_isdx;
pub mod stat_global_cfg_port;
pub mod stat_global_cfg_queue;
pub mod upsid;

/// Aggregation port masks
pub struct AGGR(pub(super) u32);
impl AGGR {
    #[inline(always)]
    pub fn AGGR_CFG(&self) -> RegisterAddress<aggr::AGGR_CFG> {
        RegisterAddress::new(self.0 + 0x0)
    }
    #[inline(always)]
    pub fn AGGR_CFG1(&self) -> RegisterAddress<aggr::AGGR_CFG1> {
        RegisterAddress::new(self.0 + 0x4)
    }
}

/// Access core memory
pub struct COREMEM(pub(super) u32);
impl COREMEM {
    #[inline(always)]
    pub fn CM_ADDR(&self) -> RegisterAddress<coremem::CM_ADDR> {
        RegisterAddress::new(self.0 + 0x0)
    }
    #[inline(always)]
    pub fn CM_DATA(&self) -> RegisterAddress<coremem::CM_DATA> {
        RegisterAddress::new(self.0 + 0x4)
    }
}

/// Configuration for Global Link Aggregation Groups
pub struct GLAG(pub(super) u32);
impl GLAG {
    #[inline(always)]
    pub fn MBR_CNT_CFG(&self) -> RegisterAddress<glag::MBR_CNT_CFG> {
        RegisterAddress::new(self.0 + 0x0)
    }
}

/// Mirror probe configuration
pub struct MIRROR_PROBE(pub(super) u32);
impl MIRROR_PROBE {
    #[inline(always)]
    pub fn PROBE_CFG(&self) -> RegisterAddress<mirror_probe::PROBE_CFG> {
        RegisterAddress::new(self.0 + 0x0)
    }
    #[inline(always)]
    pub fn PROBE_PORT_CFG(&self) -> RegisterAddress<mirror_probe::PROBE_PORT_CFG> {
        RegisterAddress::new(self.0 + 0x4)
    }
    #[inline(always)]
    pub fn PROBE_PORT_CFG1(&self) -> RegisterAddress<mirror_probe::PROBE_PORT_CFG1> {
        RegisterAddress::new(self.0 + 0x8)
    }
}

/// Port group ID table configurations
pub struct PGID(pub(super) u32);
impl PGID {
    #[inline(always)]
    pub fn PGID_CFG(&self) -> RegisterAddress<pgid::PGID_CFG> {
        RegisterAddress::new(self.0 + 0x0)
    }
    #[inline(always)]
    pub fn PGID_CFG1(&self) -> RegisterAddress<pgid::PGID_CFG1> {
        RegisterAddress::new(self.0 + 0x4)
    }
    #[inline(always)]
    pub fn PGID_MISC_CFG(&self) -> RegisterAddress<pgid::PGID_MISC_CFG> {
        RegisterAddress::new(self.0 + 0x8)
    }
}

/// Common configurations for all ports
pub struct PS_COMMON(pub(super) u32);
impl PS_COMMON {
    #[inline(always)]
    pub fn COMMON_EQUAL_STACK_LINK_TTL_CFG(
        &self,
    ) -> RegisterAddress<ps_common::COMMON_EQUAL_STACK_LINK_TTL_CFG> {
        RegisterAddress::new(self.0 + 0x2c)
    }
    #[inline(always)]
    pub fn COMMON_VSTAX_CFG(&self) -> RegisterAddress<ps_common::COMMON_VSTAX_CFG> {
        RegisterAddress::new(self.0 + 0x28)
    }
    #[inline(always)]
    pub fn CPU_CFG(&self) -> RegisterAddress<ps_common::CPU_CFG> {
        RegisterAddress::new(self.0 + 0x10c)
    }
    #[inline(always)]
    pub fn MISC_CTRL(&self) -> RegisterAddress<ps_common::MISC_CTRL> {
        RegisterAddress::new(self.0 + 0x0)
    }
    #[inline(always)]
    pub fn PHYS_SRC_AGGR_CFG(&self) -> RegisterAddress<ps_common::PHYS_SRC_AGGR_CFG> {
        RegisterAddress::new(self.0 + 0x10)
    }
    #[inline(always)]
    pub fn PHYS_SRC_AGGR_CFG1(&self) -> RegisterAddress<ps_common::PHYS_SRC_AGGR_CFG1> {
        RegisterAddress::new(self.0 + 0x14)
    }
    #[inline(always)]
    pub fn PS_COMMON_CFG(&self) -> RegisterAddress<ps_common::PS_COMMON_CFG> {
        RegisterAddress::new(self.0 + 0x4)
    }
    #[inline(always)]
    pub fn PS_DBG_CTRL(&self) -> RegisterAddress<ps_common::PS_DBG_CTRL> {
        RegisterAddress::new(self.0 + 0x110)
    }
    #[inline(always)]
    pub fn SFLOW_CFG(&self) -> RegisterAddress<ps_common::SFLOW_CFG> {
        RegisterAddress::new(self.0 + 0x8)
    }
    #[inline(always)]
    pub fn SFLOW_RESET_CTRL(&self) -> RegisterAddress<ps_common::SFLOW_RESET_CTRL> {
        RegisterAddress::new(self.0 + 0xc)
    }
    #[inline(always)]
    pub fn STACK_A_CFG(&self) -> RegisterAddress<ps_common::STACK_A_CFG> {
        RegisterAddress::new(self.0 + 0x20)
    }
    #[inline(always)]
    pub fn STACK_A_CFG1(&self) -> RegisterAddress<ps_common::STACK_A_CFG1> {
        RegisterAddress::new(self.0 + 0x24)
    }
    #[inline(always)]
    pub fn STACK_CFG(&self) -> RegisterAddress<ps_common::STACK_CFG> {
        RegisterAddress::new(self.0 + 0x18)
    }
    #[inline(always)]
    pub fn STACK_CFG1(&self) -> RegisterAddress<ps_common::STACK_CFG1> {
        RegisterAddress::new(self.0 + 0x1c)
    }
    #[inline(always)]
    pub fn VSTAX_CTRL(&self, index: u8) -> RegisterAddress<ps_common::VSTAX_CTRL> {
        debug_assert!(index < 53);
        RegisterAddress::new(self.0 + 0x30 + u32::from(index) * 0x4)
    }
    #[inline(always)]
    pub fn VSTAX_GMIRROR_CFG(&self) -> RegisterAddress<ps_common::VSTAX_GMIRROR_CFG> {
        RegisterAddress::new(self.0 + 0x104)
    }
    #[inline(always)]
    pub fn VSTAX_GMIRROR_CFG1(&self) -> RegisterAddress<ps_common::VSTAX_GMIRROR_CFG1> {
        RegisterAddress::new(self.0 + 0x108)
    }
}

/// Diagnostic information
pub struct PS_STICKY(pub(super) u32);
impl PS_STICKY {
    #[inline(always)]
    pub fn STICKY(&self) -> RegisterAddress<ps_sticky::STICKY> {
        RegisterAddress::new(self.0 + 0x0)
    }
}

/// Counter configuration for diagnostic information
pub struct PS_STICKY_MASK(pub(super) u32);
impl PS_STICKY_MASK {
    #[inline(always)]
    pub fn STICKY_MASK(&self) -> RegisterAddress<ps_sticky_mask::STICKY_MASK> {
        RegisterAddress::new(self.0 + 0x0)
    }
}

/// Access core memory
pub struct RAM_CTRL(pub(super) u32);
impl RAM_CTRL {
    #[inline(always)]
    pub fn RAM_INIT(&self) -> RegisterAddress<ram_ctrl::RAM_INIT> {
        RegisterAddress::new(self.0 + 0x0)
    }
}

/// sFlow sampler configuration & status per port
pub struct SFLOW(pub(super) u32);
impl SFLOW {
    #[inline(always)]
    pub fn SFLOW_CNT(&self) -> RegisterAddress<sflow::SFLOW_CNT> {
        RegisterAddress::new(self.0 + 0x4)
    }
    #[inline(always)]
    pub fn SFLOW_CTRL(&self) -> RegisterAddress<sflow::SFLOW_CTRL> {
        RegisterAddress::new(self.0 + 0x0)
    }
}

/// Source port masks
pub struct SRC(pub(super) u32);
impl SRC {
    #[inline(always)]
    pub fn SRC_CFG(&self) -> RegisterAddress<src::SRC_CFG> {
        RegisterAddress::new(self.0 + 0x0)
    }
    #[inline(always)]
    pub fn SRC_CFG1(&self) -> RegisterAddress<src::SRC_CFG1> {
        RegisterAddress::new(self.0 + 0x4)
    }
}

/// Individual configuration.
pub struct STAT_CNT_CFG_ACL(pub(super) u32);
impl STAT_CNT_CFG_ACL {
    #[inline(always)]
    pub fn STAT_LSB_CNT(&self, index: u8) -> RegisterAddress<stat_cnt_cfg_acl::STAT_LSB_CNT> {
        debug_assert!(index < 2);
        RegisterAddress::new(self.0 + 0x0 + u32::from(index) * 0x4)
    }
    #[inline(always)]
    pub fn STAT_MSB_CNT(&self, index: u8) -> RegisterAddress<stat_cnt_cfg_acl::STAT_MSB_CNT> {
        debug_assert!(index < 2);
        RegisterAddress::new(self.0 + 0x8 + u32::from(index) * 0x4)
    }
}

/// Individual configuration.
pub struct STAT_CNT_CFG_BDLB(pub(super) u32);
impl STAT_CNT_CFG_BDLB {
    #[inline(always)]
    pub fn STAT_LSB_CNT(&self, index: u8) -> RegisterAddress<stat_cnt_cfg_bdlb::STAT_LSB_CNT> {
        debug_assert!(index < 2);
        RegisterAddress::new(self.0 + 0x0 + u32::from(index) * 0x4)
    }
    #[inline(always)]
    pub fn STAT_MSB_CNT(&self, index: u8) -> RegisterAddress<stat_cnt_cfg_bdlb::STAT_MSB_CNT> {
        debug_assert!(index < 2);
        RegisterAddress::new(self.0 + 0x8 + u32::from(index) * 0x4)
    }
}

/// Individual configuration.
pub struct STAT_CNT_CFG_BUM(pub(super) u32);
impl STAT_CNT_CFG_BUM {
    #[inline(always)]
    pub fn STAT_LSB_CNT(&self, index: u8) -> RegisterAddress<stat_cnt_cfg_bum::STAT_LSB_CNT> {
        debug_assert!(index < 6);
        RegisterAddress::new(self.0 + 0x0 + u32::from(index) * 0x4)
    }
    #[inline(always)]
    pub fn STAT_MSB_CNT(&self, index: u8) -> RegisterAddress<stat_cnt_cfg_bum::STAT_MSB_CNT> {
        debug_assert!(index < 6);
        RegisterAddress::new(self.0 + 0x18 + u32::from(index) * 0x4)
    }
}

/// Individual configuration.
pub struct STAT_CNT_CFG_ERLEG(pub(super) u32);
impl STAT_CNT_CFG_ERLEG {
    #[inline(always)]
    pub fn STAT_LSB_CNT(&self, index: u8) -> RegisterAddress<stat_cnt_cfg_erleg::STAT_LSB_CNT> {
        debug_assert!(index < 8);
        RegisterAddress::new(self.0 + 0x0 + u32::from(index) * 0x4)
    }
    #[inline(always)]
    pub fn STAT_MSB_CNT(&self, index: u8) -> RegisterAddress<stat_cnt_cfg_erleg::STAT_MSB_CNT> {
        debug_assert!(index < 8);
        RegisterAddress::new(self.0 + 0x20 + u32::from(index) * 0x4)
    }
}

/// Individual configuration.
pub struct STAT_CNT_CFG_IRLEG(pub(super) u32);
impl STAT_CNT_CFG_IRLEG {
    #[inline(always)]
    pub fn STAT_LSB_CNT(&self, index: u8) -> RegisterAddress<stat_cnt_cfg_irleg::STAT_LSB_CNT> {
        debug_assert!(index < 8);
        RegisterAddress::new(self.0 + 0x0 + u32::from(index) * 0x4)
    }
    #[inline(always)]
    pub fn STAT_MSB_CNT(&self, index: u8) -> RegisterAddress<stat_cnt_cfg_irleg::STAT_MSB_CNT> {
        debug_assert!(index < 8);
        RegisterAddress::new(self.0 + 0x20 + u32::from(index) * 0x4)
    }
}

/// Individual configuration.
pub struct STAT_CNT_CFG_ISDX(pub(super) u32);
impl STAT_CNT_CFG_ISDX {
    #[inline(always)]
    pub fn STAT_LSB_CNT(&self, index: u8) -> RegisterAddress<stat_cnt_cfg_isdx::STAT_LSB_CNT> {
        debug_assert!(index < 6);
        RegisterAddress::new(self.0 + 0x0 + u32::from(index) * 0x4)
    }
    #[inline(always)]
    pub fn STAT_MSB_CNT(&self, index: u8) -> RegisterAddress<stat_cnt_cfg_isdx::STAT_MSB_CNT> {
        debug_assert!(index < 3);
        RegisterAddress::new(self.0 + 0x18 + u32::from(index) * 0x4)
    }
}

/// Individual configuration.
pub struct STAT_CNT_CFG_PORT(pub(super) u32);
impl STAT_CNT_CFG_PORT {
    #[inline(always)]
    pub fn STAT_CFG(&self, index: u8) -> RegisterAddress<stat_cnt_cfg_port::STAT_CFG> {
        debug_assert!(index < 4);
        RegisterAddress::new(self.0 + 0x4 + u32::from(index) * 0x4)
    }
    #[inline(always)]
    pub fn STAT_EVENTS_STICKY(&self) -> RegisterAddress<stat_cnt_cfg_port::STAT_EVENTS_STICKY> {
        RegisterAddress::new(self.0 + 0x0)
    }
    #[inline(always)]
    pub fn STAT_LSB_CNT(&self, index: u8) -> RegisterAddress<stat_cnt_cfg_port::STAT_LSB_CNT> {
        debug_assert!(index < 4);
        RegisterAddress::new(self.0 + 0x14 + u32::from(index) * 0x4)
    }
    #[inline(always)]
    pub fn STAT_MSB_CNT(&self, index: u8) -> RegisterAddress<stat_cnt_cfg_port::STAT_MSB_CNT> {
        debug_assert!(index < 4);
        RegisterAddress::new(self.0 + 0x24 + u32::from(index) * 0x4)
    }
}

/// Individual configuration.
pub struct STAT_CNT_CFG_QUEUE(pub(super) u32);
impl STAT_CNT_CFG_QUEUE {
    #[inline(always)]
    pub fn STAT_LSB_CNT(&self, index: u8) -> RegisterAddress<stat_cnt_cfg_queue::STAT_LSB_CNT> {
        debug_assert!(index < 2);
        RegisterAddress::new(self.0 + 0x0 + u32::from(index) * 0x4)
    }
    #[inline(always)]
    pub fn STAT_MSB_CNT(&self, index: u8) -> RegisterAddress<stat_cnt_cfg_queue::STAT_MSB_CNT> {
        debug_assert!(index < 2);
        RegisterAddress::new(self.0 + 0x8 + u32::from(index) * 0x4)
    }
}

/// Common counter configuration.
pub struct STAT_GLOBAL_CFG_ACL(pub(super) u32);
impl STAT_GLOBAL_CFG_ACL {
    #[inline(always)]
    pub fn GLOBAL_CNT_FRM_TYPE_CFG(
        &self,
        index: u8,
    ) -> RegisterAddress<stat_global_cfg_acl::GLOBAL_CNT_FRM_TYPE_CFG> {
        debug_assert!(index < 2);
        RegisterAddress::new(self.0 + 0x0 + u32::from(index) * 0x4)
    }
    #[inline(always)]
    pub fn STAT_GLOBAL_CFG(
        &self,
        index: u8,
    ) -> RegisterAddress<stat_global_cfg_acl::STAT_GLOBAL_CFG> {
        debug_assert!(index < 2);
        RegisterAddress::new(self.0 + 0x8 + u32::from(index) * 0x4)
    }
    #[inline(always)]
    pub fn STAT_GLOBAL_EVENT_MASK(
        &self,
        index: u8,
    ) -> RegisterAddress<stat_global_cfg_acl::STAT_GLOBAL_EVENT_MASK> {
        debug_assert!(index < 2);
        RegisterAddress::new(self.0 + 0x10 + u32::from(index) * 0x4)
    }
}

/// Common counter configuration.
pub struct STAT_GLOBAL_CFG_BDLB(pub(super) u32);
impl STAT_GLOBAL_CFG_BDLB {
    #[inline(always)]
    pub fn GLOBAL_CNT_FRM_TYPE_CFG(
        &self,
        index: u8,
    ) -> RegisterAddress<stat_global_cfg_bdlb::GLOBAL_CNT_FRM_TYPE_CFG> {
        debug_assert!(index < 2);
        RegisterAddress::new(self.0 + 0x0 + u32::from(index) * 0x4)
    }
    #[inline(always)]
    pub fn STAT_GLOBAL_CFG(
        &self,
        index: u8,
    ) -> RegisterAddress<stat_global_cfg_bdlb::STAT_GLOBAL_CFG> {
        debug_assert!(index < 2);
        RegisterAddress::new(self.0 + 0x8 + u32::from(index) * 0x4)
    }
    #[inline(always)]
    pub fn STAT_GLOBAL_EVENT_MASK(
        &self,
        index: u8,
    ) -> RegisterAddress<stat_global_cfg_bdlb::STAT_GLOBAL_EVENT_MASK> {
        debug_assert!(index < 2);
        RegisterAddress::new(self.0 + 0x10 + u32::from(index) * 0x4)
    }
}

/// Common counter configuration.
pub struct STAT_GLOBAL_CFG_BUM(pub(super) u32);
impl STAT_GLOBAL_CFG_BUM {
    #[inline(always)]
    pub fn GLOBAL_CNT_FRM_TYPE_CFG(
        &self,
        index: u8,
    ) -> RegisterAddress<stat_global_cfg_bum::GLOBAL_CNT_FRM_TYPE_CFG> {
        debug_assert!(index < 6);
        RegisterAddress::new(self.0 + 0x0 + u32::from(index) * 0x4)
    }
    #[inline(always)]
    pub fn STAT_GLOBAL_CFG(
        &self,
        index: u8,
    ) -> RegisterAddress<stat_global_cfg_bum::STAT_GLOBAL_CFG> {
        debug_assert!(index < 6);
        RegisterAddress::new(self.0 + 0x18 + u32::from(index) * 0x4)
    }
    #[inline(always)]
    pub fn STAT_GLOBAL_EVENT_MASK(
        &self,
        index: u8,
    ) -> RegisterAddress<stat_global_cfg_bum::STAT_GLOBAL_EVENT_MASK> {
        debug_assert!(index < 6);
        RegisterAddress::new(self.0 + 0x30 + u32::from(index) * 0x4)
    }
}

/// Common counter configuration.
pub struct STAT_GLOBAL_CFG_ERLEG(pub(super) u32);
impl STAT_GLOBAL_CFG_ERLEG {
    #[inline(always)]
    pub fn GLOBAL_CNT_FRM_TYPE_CFG(
        &self,
        index: u8,
    ) -> RegisterAddress<stat_global_cfg_erleg::GLOBAL_CNT_FRM_TYPE_CFG> {
        debug_assert!(index < 8);
        RegisterAddress::new(self.0 + 0x0 + u32::from(index) * 0x4)
    }
    #[inline(always)]
    pub fn STAT_GLOBAL_CFG(
        &self,
        index: u8,
    ) -> RegisterAddress<stat_global_cfg_erleg::STAT_GLOBAL_CFG> {
        debug_assert!(index < 8);
        RegisterAddress::new(self.0 + 0x20 + u32::from(index) * 0x4)
    }
    #[inline(always)]
    pub fn STAT_GLOBAL_EVENT_MASK(
        &self,
        index: u8,
    ) -> RegisterAddress<stat_global_cfg_erleg::STAT_GLOBAL_EVENT_MASK> {
        debug_assert!(index < 8);
        RegisterAddress::new(self.0 + 0x40 + u32::from(index) * 0x4)
    }
}

/// Common counter configuration.
pub struct STAT_GLOBAL_CFG_IRLEG(pub(super) u32);
impl STAT_GLOBAL_CFG_IRLEG {
    #[inline(always)]
    pub fn GLOBAL_CNT_FRM_TYPE_CFG(
        &self,
        index: u8,
    ) -> RegisterAddress<stat_global_cfg_irleg::GLOBAL_CNT_FRM_TYPE_CFG> {
        debug_assert!(index < 8);
        RegisterAddress::new(self.0 + 0x0 + u32::from(index) * 0x4)
    }
    #[inline(always)]
    pub fn STAT_GLOBAL_CFG(
        &self,
        index: u8,
    ) -> RegisterAddress<stat_global_cfg_irleg::STAT_GLOBAL_CFG> {
        debug_assert!(index < 8);
        RegisterAddress::new(self.0 + 0x20 + u32::from(index) * 0x4)
    }
    #[inline(always)]
    pub fn STAT_GLOBAL_EVENT_MASK(
        &self,
        index: u8,
    ) -> RegisterAddress<stat_global_cfg_irleg::STAT_GLOBAL_EVENT_MASK> {
        debug_assert!(index < 8);
        RegisterAddress::new(self.0 + 0x40 + u32::from(index) * 0x4)
    }
}

/// Common counter configuration.
pub struct STAT_GLOBAL_CFG_ISDX(pub(super) u32);
impl STAT_GLOBAL_CFG_ISDX {
    #[inline(always)]
    pub fn GLOBAL_CNT_FRM_TYPE_CFG(
        &self,
        index: u8,
    ) -> RegisterAddress<stat_global_cfg_isdx::GLOBAL_CNT_FRM_TYPE_CFG> {
        debug_assert!(index < 6);
        RegisterAddress::new(self.0 + 0x0 + u32::from(index) * 0x4)
    }
    #[inline(always)]
    pub fn STAT_GLOBAL_CFG(
        &self,
        index: u8,
    ) -> RegisterAddress<stat_global_cfg_isdx::STAT_GLOBAL_CFG> {
        debug_assert!(index < 6);
        RegisterAddress::new(self.0 + 0x18 + u32::from(index) * 0x4)
    }
    #[inline(always)]
    pub fn STAT_GLOBAL_EVENT_MASK(
        &self,
        index: u8,
    ) -> RegisterAddress<stat_global_cfg_isdx::STAT_GLOBAL_EVENT_MASK> {
        debug_assert!(index < 6);
        RegisterAddress::new(self.0 + 0x30 + u32::from(index) * 0x4)
    }
}

/// Common counter configuration.
pub struct STAT_GLOBAL_CFG_PORT(pub(super) u32);
impl STAT_GLOBAL_CFG_PORT {
    #[inline(always)]
    pub fn STAT_GLOBAL_EVENT_MASK(
        &self,
        index: u8,
    ) -> RegisterAddress<stat_global_cfg_port::STAT_GLOBAL_EVENT_MASK> {
        debug_assert!(index < 4);
        RegisterAddress::new(self.0 + 0x0 + u32::from(index) * 0x4)
    }
    #[inline(always)]
    pub fn STAT_RESET(&self) -> RegisterAddress<stat_global_cfg_port::STAT_RESET> {
        RegisterAddress::new(self.0 + 0x10)
    }
}

/// Common counter configuration.
pub struct STAT_GLOBAL_CFG_QUEUE(pub(super) u32);
impl STAT_GLOBAL_CFG_QUEUE {
    #[inline(always)]
    pub fn GLOBAL_CNT_FRM_TYPE_CFG(
        &self,
        index: u8,
    ) -> RegisterAddress<stat_global_cfg_queue::GLOBAL_CNT_FRM_TYPE_CFG> {
        debug_assert!(index < 2);
        RegisterAddress::new(self.0 + 0x0 + u32::from(index) * 0x4)
    }
    #[inline(always)]
    pub fn STAT_GLOBAL_CFG(
        &self,
        index: u8,
    ) -> RegisterAddress<stat_global_cfg_queue::STAT_GLOBAL_CFG> {
        debug_assert!(index < 2);
        RegisterAddress::new(self.0 + 0x8 + u32::from(index) * 0x4)
    }
    #[inline(always)]
    pub fn STAT_GLOBAL_EVENT_MASK(
        &self,
        index: u8,
    ) -> RegisterAddress<stat_global_cfg_queue::STAT_GLOBAL_EVENT_MASK> {
        debug_assert!(index < 2);
        RegisterAddress::new(self.0 + 0x10 + u32::from(index) * 0x4)
    }
}

/// UPSID table (one entry per UPS)
pub struct UPSID(pub(super) u32);
impl UPSID {
    #[inline(always)]
    pub fn STACK_LINK_EQUAL_COST_CFG(&self) -> RegisterAddress<upsid::STACK_LINK_EQUAL_COST_CFG> {
        RegisterAddress::new(self.0 + 0x0)
    }
    #[inline(always)]
    pub fn UPSID_CFG(&self) -> RegisterAddress<upsid::UPSID_CFG> {
        RegisterAddress::new(self.0 + 0x4)
    }
    #[inline(always)]
    pub fn UPSID_CFG1(&self) -> RegisterAddress<upsid::UPSID_CFG1> {
        RegisterAddress::new(self.0 + 0x8)
    }
}
