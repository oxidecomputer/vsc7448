// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Based on mesa-v2021.09 (https://github.com/microchip-ung/mesa/) which has
// the following copyright and license:
//
// Copyright (c) 2004-2021 Microchip Technology Inc. and its subsidiaries.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// This is an autogenerated file; do not edit by hand!

use crate::types::RegisterAddress;

// Register groups are stored in the tree as submodules

pub mod ptp_cfg;
pub mod ptp_pins;
pub mod ptp_status;

/// PTP controller configuration and status
pub struct PTP_CFG(pub(super) u32);
impl PTP_CFG {
    pub fn CLK_ADJ_CFG(&self, index: u32) -> RegisterAddress<ptp_cfg::CLK_ADJ_CFG> {
        assert!(index < 3);
        RegisterAddress::new(self.0 + 0x4 + index * 0x4)
    }
    pub fn CLK_ADJ_FRQ(&self, index: u32) -> RegisterAddress<ptp_cfg::CLK_ADJ_FRQ> {
        assert!(index < 3);
        RegisterAddress::new(self.0 + 0x10 + index * 0x4)
    }
    pub fn PTP_INTR_IDENT(&self) -> RegisterAddress<ptp_cfg::PTP_INTR_IDENT> {
        RegisterAddress::new(self.0 + 0x24)
    }
    pub fn PTP_MISC_CFG(&self) -> RegisterAddress<ptp_cfg::PTP_MISC_CFG> {
        RegisterAddress::new(self.0 + 0x0)
    }
    pub fn PTP_PIN_INTR(&self) -> RegisterAddress<ptp_cfg::PTP_PIN_INTR> {
        RegisterAddress::new(self.0 + 0x1c)
    }
    pub fn PTP_PIN_INTR_ENA(&self) -> RegisterAddress<ptp_cfg::PTP_PIN_INTR_ENA> {
        RegisterAddress::new(self.0 + 0x20)
    }
}

/// Timing synchronization
pub struct PTP_PINS(pub(super) u32);
impl PTP_PINS {
    pub fn PIN_WF_HIGH_PERIOD(&self) -> RegisterAddress<ptp_pins::PIN_WF_HIGH_PERIOD> {
        RegisterAddress::new(self.0 + 0x14)
    }
    pub fn PIN_WF_LOW_PERIOD(&self) -> RegisterAddress<ptp_pins::PIN_WF_LOW_PERIOD> {
        RegisterAddress::new(self.0 + 0x18)
    }
    pub fn PTP_CUR_SEC_MSB(&self) -> RegisterAddress<ptp_pins::PTP_CUR_SEC_MSB> {
        RegisterAddress::new(self.0 + 0xc)
    }
    pub fn PTP_NSF(&self) -> RegisterAddress<ptp_pins::PTP_NSF> {
        RegisterAddress::new(self.0 + 0x10)
    }
    pub fn PTP_PIN_CFG(&self) -> RegisterAddress<ptp_pins::PTP_PIN_CFG> {
        RegisterAddress::new(self.0 + 0x0)
    }
    pub fn PTP_TOD_NSEC(&self) -> RegisterAddress<ptp_pins::PTP_TOD_NSEC> {
        RegisterAddress::new(self.0 + 0xc)
    }
    pub fn PTP_TOD_SEC_LSB(&self) -> RegisterAddress<ptp_pins::PTP_TOD_SEC_LSB> {
        RegisterAddress::new(self.0 + 0x8)
    }
    pub fn PTP_TOD_SEC_MSB(&self) -> RegisterAddress<ptp_pins::PTP_TOD_SEC_MSB> {
        RegisterAddress::new(self.0 + 0x4)
    }
}

/// Status of PTP timers
pub struct PTP_STATUS(pub(super) u32);
impl PTP_STATUS {
    pub fn PTP_CUR_NSEC(&self) -> RegisterAddress<ptp_status::PTP_CUR_NSEC> {
        RegisterAddress::new(self.0 + 0x4)
    }
    pub fn PTP_CUR_NSF(&self) -> RegisterAddress<ptp_status::PTP_CUR_NSF> {
        RegisterAddress::new(self.0 + 0x0)
    }
    pub fn PTP_CUR_SEC_LSB(&self) -> RegisterAddress<ptp_status::PTP_CUR_SEC_LSB> {
        RegisterAddress::new(self.0 + 0x8)
    }
    pub fn PTP_SYS_CLK_CFG(&self) -> RegisterAddress<ptp_status::PTP_SYS_CLK_CFG> {
        RegisterAddress::new(self.0 + 0x28)
    }
}
