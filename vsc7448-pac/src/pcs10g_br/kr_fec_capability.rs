// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Based on mesa-v2021.09 (https://github.com/microchip-ung/mesa/) which has
// the following copyright and license:
//
// Copyright (c) 2004-2021 Microchip Technology Inc. and its subsidiaries.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// This is an autogenerated file; do not edit by hand!
use derive_more::{From, Into};
/// KR FEC status register
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct KR_FEC_STATUS(u32);
impl KR_FEC_STATUS {
    /// Result of comparing KR FEC's corrected block count (1x00AC/1x00AD) to the threshold setting in 3x8E0A/3x8E0B.
    ///
    /// 0: count did not exceed threshold setting 1: count exceeded threshold setting
    pub fn fec_fixed_error_count_error_status(&self) -> u32 {
        (self.0 & 0x2) >> 1
    }
    pub fn set_fec_fixed_error_count_error_status(&mut self, value: u32) {
        let value = value << 1;
        assert!(value <= 0x2);
        self.0 &= !0x2;
        self.0 |= value;
    }
    /// Result of comparing KR FEC's uncorrectable block count (1x00AE/1x00AF) to the threshold setting in 3x8E0C/3x8E0D.
    ///
    /// 0: count did not exceed threshold setting 1: count exceeded threshold setting
    pub fn fec_unfixable_error_count_error_status(&self) -> u32 {
        self.0 & 0x1
    }
    pub fn set_fec_unfixable_error_count_error_status(&mut self, value: u32) {
        assert!(value <= 0x1);
        self.0 &= !0x1;
        self.0 |= value;
    }
}
