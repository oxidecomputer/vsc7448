// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Based on mesa-v2021.09 (https://github.com/microchip-ung/mesa/) which has
// the following copyright and license:
//
// Copyright (c) 2004-2021 Microchip Technology Inc. and its subsidiaries.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// This is an autogenerated file; do not edit by hand!
use derive_more::{From, Into};
/// Sticky bit register
#[derive(From, Into)]
pub struct KR_FEC_STICKY(u32);
impl KR_FEC_STICKY {
    /// This sticky bit is set whenever fixed error count crosses configured FIXED_ERROR_COUNT_THRESHOLD. Note: write '1' to clear this bit.
    ///
    /// 0: Error counter has not exceeded threshold since the last time this bit was cleared. 1: Error count exceeded threshold since the last time this bit was cleared.
    pub fn fec_fixed_error_count_sticky(&self) -> u32 {
        (self.0 & 0x100) >> 8
    }
    pub fn set_fec_fixed_error_count_sticky(&mut self, value: u32) {
        let value = value << 8;
        assert!(value <= 0x100);
        self.0 &= !0x100;
        self.0 |= value;
    }
    /// FEC in frame lock indication This is a sticky bit that latches the low state.
    ///
    /// 0: FEC decoder has not achieved lock 1: FEC decoder has achieved lock
    pub fn fec_frame_lock_sticky(&self) -> u32 {
        self.0 & 0x1
    }
    pub fn set_fec_frame_lock_sticky(&mut self, value: u32) {
        assert!(value <= 0x1);
        self.0 &= !0x1;
        self.0 |= value;
    }
    /// This sticky bit is set whenever fixed error count crosses configured UNFIXABLE_ERROR_COUNT_THRESHOLD. Note: write '1' to clear this bit.
    ///
    /// 0: Error counter has not exceeded threshold since the last time this bit was cleared. 1: Error count exceeded threshold since the last time this bit was cleared.
    pub fn fec_unfixable_error_count_sticky(&self) -> u32 {
        (self.0 & 0x10) >> 4
    }
    pub fn set_fec_unfixable_error_count_sticky(&mut self, value: u32) {
        let value = value << 4;
        assert!(value <= 0x10);
        self.0 &= !0x10;
        self.0 |= value;
    }
}
/// Sticky bit mask register
#[derive(From, Into)]
pub struct KR_FEC_STICKY_MASK(u32);
impl KR_FEC_STICKY_MASK {
    /// Enable interruput generation when FEC_FIXED_ERROR_COUNT_STICKY is set
    ///
    /// 0: Disable interrupt generation 1: Enable interrupt generation
    pub fn fec_fixed_error_count_sticky_mask(&self) -> u32 {
        (self.0 & 0x100) >> 8
    }
    pub fn set_fec_fixed_error_count_sticky_mask(&mut self, value: u32) {
        let value = value << 8;
        assert!(value <= 0x100);
        self.0 &= !0x100;
        self.0 |= value;
    }
    /// Enable interruput generation when FEC_FRAME_LOCK_STICKY is set
    ///
    /// 0: Disable interrupt generation 1: Enable interrupt generation
    pub fn fec_frame_lock_sticky_mask(&self) -> u32 {
        self.0 & 0x1
    }
    pub fn set_fec_frame_lock_sticky_mask(&mut self, value: u32) {
        assert!(value <= 0x1);
        self.0 &= !0x1;
        self.0 |= value;
    }
    /// Enable interruput generation when FEC_UNFIXABLE_ERROR_COUNT_STICKY is set
    ///
    /// 0: Disable interrupt generation 1: Enable interrupt generation
    pub fn fec_unfixable_error_count_sticky_mask(&self) -> u32 {
        (self.0 & 0x10) >> 4
    }
    pub fn set_fec_unfixable_error_count_sticky_mask(&mut self, value: u32) {
        let value = value << 4;
        assert!(value <= 0x10);
        self.0 &= !0x10;
        self.0 |= value;
    }
}
/// KR FEC uncorrected block count
#[derive(From, Into)]
pub struct KR_FEC_UNCORRECTED(u32);
impl KR_FEC_UNCORRECTED {
    /// FEC uncorrectable block count.
    pub fn fec_uncorrected_blocks(&self) -> u32 {
        self.0
    }
    pub fn set_fec_uncorrected_blocks(&mut self, value: u32) {
        self.0 = value;
    }
}
