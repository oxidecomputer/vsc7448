// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Based on mesa-v2021.09 (https://github.com/microchip-ung/mesa/) which has
// the following copyright and license:
//
// Copyright (c) 2004-2021 Microchip Technology Inc. and its subsidiaries.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// This is an autogenerated file; do not edit by hand!
use derive_more::{From, Into};
/// ber_count
///
/// ber_count from IEEE802.3 section 49.2.14.2.
#[derive(Copy, Clone, Debug, Eq, PartialEq, From, Into)]
pub struct RX_BER_CNT(u32);
impl RX_BER_CNT {
    /// ber_count from the BER state machine
    #[inline(always)]
    pub fn rx_ber_cnt(&self) -> u32 {
        self.0 & 0x1f
    }
    #[inline(always)]
    pub fn set_rx_ber_cnt(&mut self, value: u32) {
        assert!(value <= 0x1f);
        self.0 &= !0x1f;
        self.0 |= value;
    }
}
/// Invalid character counter
///
/// Counts the number of invalid control characters
#[derive(Copy, Clone, Debug, Eq, PartialEq, From, Into)]
pub struct RX_CHARERR_CNT(u32);
impl RX_CHARERR_CNT {
    /// Count of the number of invalid control characters
    #[inline(always)]
    pub fn rx_charerr_cnt(&self) -> u32 {
        self.0
    }
    #[inline(always)]
    pub fn set_rx_charerr_cnt(&mut self, value: u32) {
        self.0 = value;
    }
}
/// Rx errored block counter
///
/// Count of the Rx errored blocks
#[derive(Copy, Clone, Debug, Eq, PartialEq, From, Into)]
pub struct RX_ERRBLK_CNT(u32);
impl RX_ERRBLK_CNT {
    /// Count of the errored Rx blocks
    #[inline(always)]
    pub fn rx_errblk_cnt(&self) -> u32 {
        self.0
    }
    #[inline(always)]
    pub fn set_rx_errblk_cnt(&mut self, value: u32) {
        self.0 = value;
    }
}
/// Rx ordered set FIFO data
///
/// The register interface to the ordered set data
#[derive(Copy, Clone, Debug, Eq, PartialEq, From, Into)]
pub struct RX_FSET_FIFO_DATA(u32);
impl RX_FSET_FIFO_DATA {
    /// Register interface to the FIFO containing captured ordered sets. Each read of this register pops a 24-bit ordered set off the FIFO and increments the FIFO pointer.
    #[inline(always)]
    pub fn rx_fset_fifo_data(&self) -> u32 {
        (self.0 & 0xffffff00) >> 8
    }
    #[inline(always)]
    pub fn set_rx_fset_fifo_data(&mut self, value: u32) {
        assert!(value <= 0xffffff);
        let value = value << 8;
        self.0 &= !0xffffff00;
        self.0 |= value;
    }
}
/// Status of Rx signal ordered set FIFO
///
/// Contains status information for the FIFO containing captured Rx ordered sets
#[derive(Copy, Clone, Debug, Eq, PartialEq, From, Into)]
pub struct RX_FSET_FIFO_STAT(u32);
impl RX_FSET_FIFO_STAT {
    /// Indicates if the FIFO is full
    ///
    /// 0: FIFO not full 1: FIFO full
    #[inline(always)]
    pub fn rx_fset_fifo_full(&self) -> u32 {
        (self.0 & 0x10) >> 4
    }
    #[inline(always)]
    pub fn set_rx_fset_fifo_full(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 4;
        self.0 &= !0x10;
        self.0 |= value;
    }
    /// Number of valid ordered sets in the FIFO that can be read
    ///
    /// Binary number
    #[inline(always)]
    pub fn rx_fset_fifo_num(&self) -> u32 {
        self.0 & 0x7
    }
    #[inline(always)]
    pub fn set_rx_fset_fifo_num(&mut self, value: u32) {
        assert!(value <= 0x7);
        self.0 &= !0x7;
        self.0 |= value;
    }
}
/// Rx ordered set FIFO data
///
/// The register interface to the ordered set data
#[derive(Copy, Clone, Debug, Eq, PartialEq, From, Into)]
pub struct RX_OSET_FIFO_DATA(u32);
impl RX_OSET_FIFO_DATA {
    /// Register interface to the FIFO containing captured ordered sets. Each read of this register pops a 24-bit ordered set off the FIFO and increments the FIFO pointer.
    #[inline(always)]
    pub fn rx_oset_fifo_data(&self) -> u32 {
        (self.0 & 0xffffff00) >> 8
    }
    #[inline(always)]
    pub fn set_rx_oset_fifo_data(&mut self, value: u32) {
        assert!(value <= 0xffffff);
        let value = value << 8;
        self.0 &= !0xffffff00;
        self.0 |= value;
    }
}
/// Status of Rx sequence ordered set FIFO
///
/// Contains status information for the FIFO containing captured Rx ordered sets
#[derive(Copy, Clone, Debug, Eq, PartialEq, From, Into)]
pub struct RX_OSET_FIFO_STAT(u32);
impl RX_OSET_FIFO_STAT {
    /// Indicates if the FIFO is full
    ///
    /// 0: FIFO not full 1: FIFO full
    #[inline(always)]
    pub fn rx_oset_fifo_full(&self) -> u32 {
        (self.0 & 0x10) >> 4
    }
    #[inline(always)]
    pub fn set_rx_oset_fifo_full(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 4;
        self.0 &= !0x10;
        self.0 |= value;
    }
    /// Number of valid ordered sets in the FIFO that can be read
    ///
    /// Binary number
    #[inline(always)]
    pub fn rx_oset_fifo_num(&self) -> u32 {
        self.0 & 0x7
    }
    #[inline(always)]
    pub fn set_rx_oset_fifo_num(&mut self, value: u32) {
        assert!(value <= 0x7);
        self.0 &= !0x7;
        self.0 |= value;
    }
}
/// Test pattern mode error counts
///
/// Count of the errors detected in test pattern mode
#[derive(Copy, Clone, Debug, Eq, PartialEq, From, Into)]
pub struct TEST_ERR_CNT(u32);
impl TEST_ERR_CNT {
    /// Count of detected test pattern errors in Rx test pattern checker. Write 0 to clear.
    #[inline(always)]
    pub fn test_err_cnt(&self) -> u32 {
        self.0
    }
    #[inline(always)]
    pub fn set_test_err_cnt(&mut self, value: u32) {
        self.0 = value;
    }
}
/// Invalid character counter
///
/// Counts the number of invalid control characters
#[derive(Copy, Clone, Debug, Eq, PartialEq, From, Into)]
pub struct TX_CHARERR_CNT(u32);
impl TX_CHARERR_CNT {
    /// Count of the number of invalid control characters
    #[inline(always)]
    pub fn tx_charerr_cnt(&self) -> u32 {
        self.0
    }
    #[inline(always)]
    pub fn set_tx_charerr_cnt(&mut self, value: u32) {
        self.0 = value;
    }
}
/// Tx errored block counter
///
/// Count of the Tx errored blocks
#[derive(Copy, Clone, Debug, Eq, PartialEq, From, Into)]
pub struct TX_ERRBLK_CNT(u32);
impl TX_ERRBLK_CNT {
    /// Count of the errored Tx blocks
    #[inline(always)]
    pub fn tx_errblk_cnt(&self) -> u32 {
        self.0
    }
    #[inline(always)]
    pub fn set_tx_errblk_cnt(&mut self, value: u32) {
        self.0 = value;
    }
}
