// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Based on mesa-v2021.09 (https://github.com/microchip-ung/mesa/) which has
// the following copyright and license:
//
// Copyright (c) 2004-2021 Microchip Technology Inc. and its subsidiaries.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// This is an autogenerated file; do not edit by hand!

use crate::types::RegisterAddress;

// Register groups are stored in the tree as submodules

pub mod calcfg;
pub mod coremem;
pub mod misc;
pub mod mmgt;
pub mod mmgt_port;
pub mod pause_cfg;
pub mod ram_ctrl;
pub mod system;

/// Not documented
pub struct CALCFG(pub(super) u32);
impl CALCFG {
    #[inline(always)]
    pub fn CAL_AUTO(&self, index: u32) -> RegisterAddress<calcfg::CAL_AUTO> {
        assert!(index < 4);
        RegisterAddress::new(self.0 + 0x0 + index * 0x4)
    }
    #[inline(always)]
    pub fn CAL_CTRL(&self) -> RegisterAddress<calcfg::CAL_CTRL> {
        RegisterAddress::new(self.0 + 0x14)
    }
    #[inline(always)]
    pub fn CAL_SEQ(&self) -> RegisterAddress<calcfg::CAL_SEQ> {
        RegisterAddress::new(self.0 + 0x10)
    }
}

/// Access core memory
pub struct COREMEM(pub(super) u32);
impl COREMEM {
    #[inline(always)]
    pub fn CM_ADDR(&self) -> RegisterAddress<coremem::CM_ADDR> {
        RegisterAddress::new(self.0 + 0x0)
    }
    #[inline(always)]
    pub fn CM_DATA(&self) -> RegisterAddress<coremem::CM_DATA> {
        RegisterAddress::new(self.0 + 0x4)
    }
}

/// Miscellaneous
pub struct MISC(pub(super) u32);
impl MISC {
    #[inline(always)]
    pub fn EVENTS_CORE(&self) -> RegisterAddress<misc::EVENTS_CORE> {
        RegisterAddress::new(self.0 + 0x0)
    }
}

/// Memory manager status
pub struct MMGT(pub(super) u32);
impl MMGT {
    #[inline(always)]
    pub fn MMGT(&self) -> RegisterAddress<mmgt::MMGT> {
        RegisterAddress::new(self.0 + 0x0)
    }
    #[inline(always)]
    pub fn MMGT_FAST(&self) -> RegisterAddress<mmgt::MMGT_FAST> {
        RegisterAddress::new(self.0 + 0x4)
    }
}

/// Memory manager status
pub struct MMGT_PORT(pub(super) u32);
impl MMGT_PORT {
    #[inline(always)]
    pub fn MMGT_IQ_STAT(&self) -> RegisterAddress<mmgt_port::MMGT_IQ_STAT> {
        RegisterAddress::new(self.0 + 0x8)
    }
    #[inline(always)]
    pub fn MMGT_PORT_USE(&self) -> RegisterAddress<mmgt_port::MMGT_PORT_USE> {
        RegisterAddress::new(self.0 + 0x4)
    }
    #[inline(always)]
    pub fn MMGT_PORT_VIEW(&self) -> RegisterAddress<mmgt_port::MMGT_PORT_VIEW> {
        RegisterAddress::new(self.0 + 0x0)
    }
    #[inline(always)]
    pub fn MMGT_TAILDROP_CNT(&self) -> RegisterAddress<mmgt_port::MMGT_TAILDROP_CNT> {
        RegisterAddress::new(self.0 + 0xc)
    }
}

/// Watermarks for egress queue system
pub struct PAUSE_CFG(pub(super) u32);
impl PAUSE_CFG {
    #[inline(always)]
    pub fn ATOP(&self, index: u32) -> RegisterAddress<pause_cfg::ATOP> {
        assert!(index < 57);
        RegisterAddress::new(self.0 + 0xe8 + index * 0x4)
    }
    #[inline(always)]
    pub fn ATOP_TOT_CFG(&self) -> RegisterAddress<pause_cfg::ATOP_TOT_CFG> {
        RegisterAddress::new(self.0 + 0x2b0)
    }
    #[inline(always)]
    pub fn FWD_PRESSURE(&self, index: u32) -> RegisterAddress<pause_cfg::FWD_PRESSURE> {
        assert!(index < 57);
        RegisterAddress::new(self.0 + 0x1cc + index * 0x4)
    }
    #[inline(always)]
    pub fn PAUSE_CFG(&self, index: u32) -> RegisterAddress<pause_cfg::PAUSE_CFG> {
        assert!(index < 57);
        RegisterAddress::new(self.0 + 0x0 + index * 0x4)
    }
    #[inline(always)]
    pub fn PAUSE_TOT_CFG(&self) -> RegisterAddress<pause_cfg::PAUSE_TOT_CFG> {
        RegisterAddress::new(self.0 + 0xe4)
    }
}

/// Access core memory
pub struct RAM_CTRL(pub(super) u32);
impl RAM_CTRL {
    #[inline(always)]
    pub fn RAM_INIT(&self) -> RegisterAddress<ram_ctrl::RAM_INIT> {
        RegisterAddress::new(self.0 + 0x0)
    }
}

/// Switch configuration
pub struct SYSTEM(pub(super) u32);
impl SYSTEM {
    #[inline(always)]
    pub fn DP_MAP(&self) -> RegisterAddress<system::DP_MAP> {
        RegisterAddress::new(self.0 + 0xf8)
    }
    #[inline(always)]
    pub fn EEE_CFG(&self, index: u32) -> RegisterAddress<system::EEE_CFG> {
        assert!(index < 57);
        RegisterAddress::new(self.0 + 0x0 + index * 0x4)
    }
    #[inline(always)]
    pub fn EEE_THRES(&self) -> RegisterAddress<system::EEE_THRES> {
        RegisterAddress::new(self.0 + 0xe4)
    }
    #[inline(always)]
    pub fn FRM_AGING(&self) -> RegisterAddress<system::FRM_AGING> {
        RegisterAddress::new(self.0 + 0xf0)
    }
    #[inline(always)]
    pub fn PMEM_SIZE(&self) -> RegisterAddress<system::PMEM_SIZE> {
        RegisterAddress::new(self.0 + 0xec)
    }
    #[inline(always)]
    pub fn RESET_CFG(&self) -> RegisterAddress<system::RESET_CFG> {
        RegisterAddress::new(self.0 + 0xe8)
    }
    #[inline(always)]
    pub fn STAT_CFG(&self) -> RegisterAddress<system::STAT_CFG> {
        RegisterAddress::new(self.0 + 0xf4)
    }
}
