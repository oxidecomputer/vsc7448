// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Based on mesa-v2021.09 (https://github.com/microchip-ung/mesa/) which has
// the following copyright and license:
//
// Copyright (c) 2004-2021 Microchip Technology Inc. and its subsidiaries.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// This is an autogenerated file; do not edit by hand!
use derive_more::{From, Into};

/// Register `RX_SYNC_CTRL_STAT`
///
/// RX_SYNC_CTRL status register
///
/// RX Sync control status register
#[derive(From, Into)]
pub struct RX_SYNC_CTRL_STAT(u32);
impl RX_SYNC_CTRL_STAT {
    /// RX Lane synchronization fifo overflow
    pub fn rx_lane_sync_fifo_of_sticky(&self) -> u32 {
        self.0 & 0x1
    }
    pub fn set_rx_lane_sync_fifo_of_sticky(&mut self, value: u32) {
        assert!(value <= 0x1);
        self.0 &= !0x1;
        self.0 |= value;
    }
}

/// Register `SD10G65_RCPLL_BIST_CFG0`
///
/// SD10G65 RX RCPLL BIST Configuration register 0
///
/// Configuration register 0 for SD10G65 RX RCPLL BIST.
#[derive(From, Into)]
pub struct SD10G65_RCPLL_BIST_CFG0(u32);
impl SD10G65_RCPLL_BIST_CFG0 {
    /// BIST compare uncertainty
    pub fn pllb_comp_uncert(&self) -> u32 {
        (self.0 & 0xff0) >> 4
    }
    pub fn set_pllb_comp_uncert(&mut self, value: u32) {
        let value = value << 4;
        assert!(value <= 0xff0);
        self.0 &= !0xff0;
        self.0 |= value;
    }
    /// BIST frequency deviation limit, correlates to compare dividers
    pub fn pllb_freq_devi(&self) -> u32 {
        (self.0 & 0xffff0000) >> 16
    }
    pub fn set_pllb_freq_devi(&mut self, value: u32) {
        let value = value << 16;
        assert!(value <= 0xffff0000);
        self.0 &= !0xffff0000;
        self.0 |= value;
    }
    /// BIST ramp-up/down mode, 0: ramp up and down, 1: ramp-up only, 2: ramp-down only, 3: reserved
    pub fn pllb_inc_dec_mode(&self) -> u32 {
        (self.0 & 0xc) >> 2
    }
    pub fn set_pllb_inc_dec_mode(&mut self, value: u32) {
        let value = value << 2;
        assert!(value <= 0xc);
        self.0 &= !0xc;
        self.0 |= value;
    }
    /// BIST start, 0: reset BIST, 1: start/enable BIST
    pub fn pllb_start_bist(&self) -> u32 {
        self.0 & 0x1
    }
    pub fn set_pllb_start_bist(&mut self, value: u32) {
        assert!(value <= 0x1);
        self.0 &= !0x1;
        self.0 |= value;
    }
}

/// Register `SD10G65_RCPLL_BIST_CFG1`
///
/// SD10G65 RX RCPLL BIST Configuration register 1
///
/// Configuration register 1 for SD10G65 RX RCPLL BIST.
#[derive(From, Into)]
pub struct SD10G65_RCPLL_BIST_CFG1(u32);
impl SD10G65_RCPLL_BIST_CFG1 {
    /// BIST compare pre divider M
    pub fn pllb_div_factor_pre(&self) -> u32 {
        self.0 & 0xffff
    }
    pub fn set_pllb_div_factor_pre(&mut self, value: u32) {
        assert!(value <= 0xffff);
        self.0 &= !0xffff;
        self.0 |= value;
    }
    /// BIST compare divider repeat count
    pub fn pllb_lock_repeat(&self) -> u32 {
        (self.0 & 0xf00000) >> 20
    }
    pub fn set_pllb_lock_repeat(&mut self, value: u32) {
        let value = value << 20;
        assert!(value <= 0xf00000);
        self.0 &= !0xf00000;
        self.0 |= value;
    }
    /// BIST compare divider phase uncertainty
    pub fn pllb_lock_uncert(&self) -> u32 {
        (self.0 & 0xf0000) >> 16
    }
    pub fn set_pllb_lock_uncert(&mut self, value: u32) {
        let value = value << 16;
        assert!(value <= 0xf0000);
        self.0 &= !0xf0000;
        self.0 |= value;
    }
}

/// Register `SD10G65_RCPLL_BIST_CFG2`
///
/// SD10G65 RX RCPLL BIST Configuration register 2
///
/// Configuration register 2 for SD10G65 RX RCPLL BIST.
#[derive(From, Into)]
pub struct SD10G65_RCPLL_BIST_CFG2(u32);
impl SD10G65_RCPLL_BIST_CFG2 {
    /// BIST compare divider M
    pub fn pllb_div_factor_m(&self) -> u32 {
        self.0 & 0xffff
    }
    pub fn set_pllb_div_factor_m(&mut self, value: u32) {
        assert!(value <= 0xffff);
        self.0 &= !0xffff;
        self.0 |= value;
    }
}

/// Register `SD10G65_RCPLL_BIST_CFG3`
///
/// SD10G65 RX RCPLL BIST Configuration register 3
///
/// Configuration register 3 for SD10G65 RX RCPLL BIST.
#[derive(From, Into)]
pub struct SD10G65_RCPLL_BIST_CFG3(u32);
impl SD10G65_RCPLL_BIST_CFG3 {
    /// BIST compare divider N
    pub fn pllb_div_factor_n(&self) -> u32 {
        self.0 & 0xffff
    }
    pub fn set_pllb_div_factor_n(&mut self, value: u32) {
        assert!(value <= 0xffff);
        self.0 &= !0xffff;
        self.0 |= value;
    }
}

/// Register `SD10G65_RCPLL_BIST_STAT0`
///
/// SD10G65 RX RCPLL BIST Status register 0
///
/// Status register 0 for SD10G65 RX RCPLL BIST.
#[derive(From, Into)]
pub struct SD10G65_RCPLL_BIST_STAT0(u32);
impl SD10G65_RCPLL_BIST_STAT0 {
    /// BIST busy, 0: not busy, 1: busy
    pub fn pllb_busy(&self) -> u32 {
        (self.0 & 0x4) >> 2
    }
    pub fn set_pllb_busy(&mut self, value: u32) {
        let value = value << 2;
        assert!(value <= 0x4);
        self.0 &= !0x4;
        self.0 |= value;
    }
    /// BIST done (inverted), 0: done, 1: not done
    pub fn pllb_done_n(&self) -> u32 {
        (self.0 & 0x2) >> 1
    }
    pub fn set_pllb_done_n(&mut self, value: u32) {
        let value = value << 1;
        assert!(value <= 0x2);
        self.0 &= !0x2;
        self.0 |= value;
    }
    /// BIST pass/fail, 0: passed, 1: failed
    pub fn pllb_fail(&self) -> u32 {
        self.0 & 0x1
    }
    pub fn set_pllb_fail(&mut self, value: u32) {
        assert!(value <= 0x1);
        self.0 &= !0x1;
        self.0 |= value;
    }
    /// BIST compare divider phase lock
    pub fn pllb_phase_lock(&self) -> u32 {
        (self.0 & 0x8) >> 3
    }
    pub fn set_pllb_phase_lock(&mut self, value: u32) {
        let value = value << 3;
        assert!(value <= 0x8);
        self.0 &= !0x8;
        self.0 |= value;
    }
    /// BIST pll_cnt upper limit at max. frequency
    pub fn pllb_pll_cnt_high(&self) -> u32 {
        (self.0 & 0x7ff0000) >> 16
    }
    pub fn set_pllb_pll_cnt_high(&mut self, value: u32) {
        let value = value << 16;
        assert!(value <= 0x7ff0000);
        self.0 &= !0x7ff0000;
        self.0 |= value;
    }
    /// BIST pll_cnt lower limit at min. frequency
    pub fn pllb_pll_cnt_low(&self) -> u32 {
        (self.0 & 0xffe0) >> 5
    }
    pub fn set_pllb_pll_cnt_low(&mut self, value: u32) {
        let value = value << 5;
        assert!(value <= 0xffe0);
        self.0 &= !0xffe0;
        self.0 |= value;
    }
}

/// Register `SD10G65_RCPLL_BIST_STAT1`
///
/// SD10G65 RX RCPLL BIST Status register 1
///
/// Status register 1 for SD10G65 RX RCPLL BIST.
#[derive(From, Into)]
pub struct SD10G65_RCPLL_BIST_STAT1(u32);
impl SD10G65_RCPLL_BIST_STAT1 {
    /// BIST compare divider phase difference
    pub fn pllb_phase_diff(&self) -> u32 {
        self.0 & 0xffff
    }
    pub fn set_pllb_phase_diff(&mut self, value: u32) {
        assert!(value <= 0xffff);
        self.0 &= !0xffff;
        self.0 |= value;
    }
}

/// Register `SD10G65_RX_RCPLL_BIST_CFG4`
///
/// SD10G65 RX RCPLL BIST Configuration register 4
///
/// Configuration register 4 for SD10G65 RX RCPLL BIST.
#[derive(From, Into)]
pub struct SD10G65_RX_RCPLL_BIST_CFG4(u32);
impl SD10G65_RX_RCPLL_BIST_CFG4 {
    /// BIST macro clock (parallel) clock selection, 0: RX, 1: TX
    pub fn pllb_clock_sel(&self) -> u32 {
        self.0 & 0x1
    }
    pub fn set_pllb_clock_sel(&mut self, value: u32) {
        assert!(value <= 0x1);
        self.0 &= !0x1;
        self.0 |= value;
    }
    /// BIST measure mode, 0: frequency, 1: phase
    pub fn pllb_meas_mode(&self) -> u32 {
        (self.0 & 0x2) >> 1
    }
    pub fn set_pllb_meas_mode(&mut self, value: u32) {
        let value = value << 1;
        assert!(value <= 0x2);
        self.0 &= !0x2;
        self.0 |= value;
    }
    /// BIST select 125MHz feedback clock from synthesizer
    pub fn pllb_sel125clk(&self) -> u32 {
        (self.0 & 0x8) >> 3
    }
    pub fn set_pllb_sel125clk(&mut self, value: u32) {
        let value = value << 3;
        assert!(value <= 0x8);
        self.0 &= !0x8;
        self.0 |= value;
    }
    /// BIST SPI base address for rcpll10g FSM inside the macro (e.g. RX or TX)
    pub fn pllb_spi_base_addr(&self) -> u32 {
        (self.0 & 0xff00) >> 8
    }
    pub fn set_pllb_spi_base_addr(&mut self, value: u32) {
        let value = value << 8;
        assert!(value <= 0xff00);
        self.0 &= !0xff00;
        self.0 |= value;
    }
    /// BIST start measure, 1: start
    pub fn pllb_start_meas(&self) -> u32 {
        (self.0 & 0x4) >> 2
    }
    pub fn set_pllb_start_meas(&mut self, value: u32) {
        let value = value << 2;
        assert!(value <= 0x4);
        self.0 &= !0x4;
        self.0 |= value;
    }
}
