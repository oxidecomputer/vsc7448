// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Based on mesa-v2021.09 (https://github.com/microchip-ung/mesa/) which has
// the following copyright and license:
//
// Copyright (c) 2004-2021 Microchip Technology Inc. and its subsidiaries.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// This is an autogenerated file; do not edit by hand!
use derive_more::{From, Into};

/// Register `CIR_STATE`
///
/// CIR status
#[derive(From, Into)]
pub struct CIR_STATE(u32);
impl CIR_STATE {
    /// Current fill level. Unit is 1 bit.
    pub fn cir_lvl(&self) -> u32 {
        (self.0 & 0xffffff) >> 0
    }
    pub fn set_cir_lvl(&mut self, value: u32) {
        let value = value << 0;
        assert!(value <= 0xffffff);
        self.0 &= !0xffffff;
        self.0 |= value;
    }
}

/// Register `EIR_STATE`
///
/// EIR status
#[derive(From, Into)]
pub struct EIR_STATE(u32);
impl EIR_STATE {
    /// Current fill level. Unit is 1 bit.
    pub fn eir_lvl(&self) -> u32 {
        (self.0 & 0xffffff) >> 0
    }
    pub fn set_eir_lvl(&mut self, value: u32) {
        let value = value << 0;
        assert!(value <= 0xffffff);
        self.0 &= !0xffffff;
        self.0 |= value;
    }
}

/// Register `SE_DLB_SENSE`
///
/// Configuration of which fill levels in the queue system that the DLB shapers use to trigger excess information rate
#[derive(From, Into)]
pub struct SE_DLB_SENSE(u32);
impl SE_DLB_SENSE {
    /// Destination port used when SE_DLB_DPORT_ENA is set.
    pub fn se_dlb_dport(&self) -> u32 {
        (self.0 & 0x3f00) >> 8
    }
    pub fn set_se_dlb_dport(&mut self, value: u32) {
        let value = value << 8;
        assert!(value <= 0x3f00);
        self.0 &= !0x3f00;
        self.0 |= value;
    }
    /// Enable destination port awareness by the DLB shaper. If set, the DLB shaper allows excess information rate when the egress buffer use for destination port SE_DLB_SPORT has reached threshold BUF_P_RSRV_E[SE_DLB_DPORT] minus 3000 bytes. If multiple awareness functions (SE_DLB_PRIO_ENA, SE_DLB_SPORT_ENA, SE_DLB_DPORT_ENA) are enabled, all relevant thresholds must be exceeded before excess information rate is allowed.
    pub fn se_dlb_dport_ena(&self) -> u32 {
        (self.0 & 0x1) >> 0
    }
    pub fn set_se_dlb_dport_ena(&mut self, value: u32) {
        let value = value << 0;
        assert!(value <= 0x1);
        self.0 &= !0x1;
        self.0 |= value;
    }
    /// QoS class used when SE_DLB_PRIO_ENA is set.
    pub fn se_dlb_prio(&self) -> u32 {
        (self.0 & 0x1c000) >> 14
    }
    pub fn set_se_dlb_prio(&mut self, value: u32) {
        let value = value << 14;
        assert!(value <= 0x1c000);
        self.0 &= !0x1c000;
        self.0 |= value;
    }
    /// Enable priority awareness by the DLB shaper. If set, the DLB shaper allows excess information rate when the egress buffer use for QoS class SE_DLB_PRIO has reached threshold BUF_PRIO_SHR_E[SE_DLB_PRIO] minus 3000 bytes. If both SE_DLB_PRIO_ENA and SE_DLB_SPORT_ENA are set, the excess information rate is alllowed when the ingress buffer use for QoS class per source port has reached threshold BUF_Q_RSRV_I[SE_DLB_PRIO, SE_DLB_SPORT] minus 3000 bytes. If both SE_DLB_PRIO_ENA and SE_DLB_DPORT_ENA are set, the excess information rate is alllowed when the egress buffer use for QoS class per destination port has reached threshold BUF_Q_RSRV_E[SE_DLB_PRIO, SE_DLB_DPORT] minus 3000 bytes. If multiple awareness functions (SE_DLB_PRIO_ENA, SE_DLB_SPORT_ENA, SE_DLB_DPORT_ENA) are enabled, all relevant thresholds must be exceeded before excess information rate is allowed.
    pub fn se_dlb_prio_ena(&self) -> u32 {
        (self.0 & 0x2) >> 1
    }
    pub fn set_se_dlb_prio_ena(&mut self, value: u32) {
        let value = value << 1;
        assert!(value <= 0x2);
        self.0 &= !0x2;
        self.0 |= value;
    }
    /// Not connected.
    pub fn se_dlb_sport_obsolete(&self) -> u32 {
        (self.0 & 0xfc) >> 2
    }
    pub fn set_se_dlb_sport_obsolete(&mut self, value: u32) {
        let value = value << 2;
        assert!(value <= 0xfc);
        self.0 &= !0xfc;
        self.0 |= value;
    }
}
