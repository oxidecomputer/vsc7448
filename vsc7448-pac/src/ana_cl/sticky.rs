// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Based on mesa-v2021.09 (https://github.com/microchip-ung/mesa/) which has
// the following copyright and license:
//
// Copyright (c) 2004-2021 Microchip Technology Inc. and its subsidiaries.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// This is an autogenerated file; do not edit by hand!
use derive_more::{From, Into};

/// Register `ADV_CL_MPLS_STICKY`
///
/// Sticky bits register for events generated by advanced VCAP classification when handling MPLS TP
#[derive(From, Into)]
pub struct ADV_CL_MPLS_STICKY(u32);
impl ADV_CL_MPLS_STICKY {    ///
    /// This sticky bit signals frame for Default OAM qu seen.
    pub fn adv_cl_mpls_def_oam_sticky(&self) -> u32 {
        (self.0 & 0x200000) >> 21
    }
    pub fn set_adv_cl_mpls_def_oam_sticky(&mut self, value: u32) {
        let value = value << 21;
        assert!(value <= 0x200000);
        self.0 &= !0x200000;
        self.0 |= value;
    }    ///
    /// This sticky bit signals frame for MPLS err qu seen.
    pub fn adv_cl_mpls_err_sticky(&self) -> u32 {
        (self.0 & 0x800000) >> 23
    }
    pub fn set_adv_cl_mpls_err_sticky(&mut self, value: u32) {
        let value = value << 23;
        assert!(value <= 0x800000);
        self.0 &= !0x800000;
        self.0 |= value;
    }    ///
    /// This sticky bit signals MPLS G8113_1 NON OAM frames.
    pub fn adv_cl_mpls_g8113_1_non_oam_sticky(&self) -> u32 {
        (self.0 & 0x400000) >> 22
    }
    pub fn set_adv_cl_mpls_g8113_1_non_oam_sticky(&mut self, value: u32) {
        let value = value << 22;
        assert!(value <= 0x400000);
        self.0 &= !0x400000;
        self.0 |= value;
    }    ///
    /// This sticky bit signals IP frame received and handled via IP Control Profile LSR POP (FWD_TYPE=3) with (nxt_type_after_offset = CW) seen.
    pub fn adv_cl_mpls_ip_profile_sticky(&self) -> u32 {
        (self.0 & 0x2000000) >> 25
    }
    pub fn set_adv_cl_mpls_ip_profile_sticky(&mut self, value: u32) {
        let value = value << 25;
        assert!(value <= 0x2000000);
        self.0 &= !0x2000000;
        self.0 |= value;
    }    ///
    /// This sticky bit signals IP frame received as LSR POP (FWD_TYPE=3) with (nxt_type_after_offset = CW) seen.
    pub fn adv_cl_mpls_ip_traffic_sticky(&self) -> u32 {
        (self.0 & 0x1000000) >> 24
    }
    pub fn set_adv_cl_mpls_ip_traffic_sticky(&mut self, value: u32) {
        let value = value << 24;
        assert!(value <= 0x1000000);
        self.0 &= !0x1000000;
        self.0 |= value;
    }    ///
    /// This sticky bit signals frame for PATH OAM MEP seen.
    pub fn adv_cl_mpls_mep_oam_sticky(&self) -> u32 {
        (self.0 & 0x100000) >> 20
    }
    pub fn set_adv_cl_mpls_mep_oam_sticky(&mut self, value: u32) {
        let value = value << 20;
        assert!(value <= 0x100000);
        self.0 &= !0x100000;
        self.0 |= value;
    }    ///
    /// This sticky bit signals MPLS POP err when fwd_mode=3.
    pub fn adv_cl_mpls_pop_err_sticky(&self) -> u32 {
        (self.0 & 0x80000) >> 19
    }
    pub fn set_adv_cl_mpls_pop_err_sticky(&mut self, value: u32) {
        let value = value << 19;
        assert!(value <= 0x80000);
        self.0 &= !0x80000;
        self.0 |= value;
    }    ///
    /// This sticky bit signals frame received and handled via Reserved Profile.
    pub fn adv_cl_mpls_rsvd_profile_sticky(&self) -> u32 {
        (self.0 & 0x4000000) >> 26
    }
    pub fn set_adv_cl_mpls_rsvd_profile_sticky(&mut self, value: u32) {
        let value = value << 26;
        assert!(value <= 0x4000000);
        self.0 &= !0x4000000;
        self.0 |= value;
    }    ///
    /// This sticky bit indicate frame redirected to CPU due to reserved label seen with valid labels.
    pub fn adv_cl_mpls_rsv_xtr_sticky(&self) -> u32 {
        (self.0 & 0x20000) >> 17
    }
    pub fn set_adv_cl_mpls_rsv_xtr_sticky(&mut self, value: u32) {
        let value = value << 17;
        assert!(value <= 0x20000);
        self.0 &= !0x20000;
        self.0 |= value;
    }    ///
    /// This sticky bit signals frame for Segment OAM seen.
    pub fn adv_cl_mpls_segment_oam_sticky(&self) -> u32 {
        (self.0 & 0x8000000) >> 27
    }
    pub fn set_adv_cl_mpls_segment_oam_sticky(&mut self, value: u32) {
        let value = value << 27;
        assert!(value <= 0x8000000);
        self.0 &= !0x8000000;
        self.0 |= value;
    }    ///
    /// This sticky bit signals MPLS SWAP err.
    pub fn adv_cl_mpls_swap_err_sticky(&self) -> u32 {
        (self.0 & 0x40000) >> 18
    }
    pub fn set_adv_cl_mpls_swap_err_sticky(&mut self, value: u32) {
        let value = value << 18;
        assert!(value <= 0x40000);
        self.0 &= !0x40000;
        self.0 |= value;
    }    ///
    /// This sticky bit signals MPLS CPU redir of MIP LSP OAM.
    pub fn adv_cl_mpls_term_mip_lsp_sticky(&self) -> u32 {
        (self.0 & 0x200) >> 9
    }
    pub fn set_adv_cl_mpls_term_mip_lsp_sticky(&mut self, value: u32) {
        let value = value << 9;
        assert!(value <= 0x200);
        self.0 &= !0x200;
        self.0 |= value;
    }    ///
    /// This sticky bit signals MPLS CPU redir of MIP VCCv2 and VCCv3 no CW.
    pub fn adv_cl_mpls_term_mip_no_hw_sticky(&self) -> u32 {
        (self.0 & 0x4000) >> 14
    }
    pub fn set_adv_cl_mpls_term_mip_no_hw_sticky(&mut self, value: u32) {
        let value = value << 14;
        assert!(value <= 0x4000);
        self.0 &= !0x4000;
        self.0 |= value;
    }    ///
    /// This sticky bit signals MPLS CPU redir of MIP Segment OAM.
    pub fn adv_cl_mpls_term_mip_segment_sticky(&self) -> u32 {
        (self.0 & 0x100) >> 8
    }
    pub fn set_adv_cl_mpls_term_mip_segment_sticky(&mut self, value: u32) {
        let value = value << 8;
        assert!(value <= 0x100);
        self.0 &= !0x100;
        self.0 |= value;
    }    ///
    /// This sticky bit signals MPLS CPU redir of MIP VCCv1 OAM.
    pub fn adv_cl_mpls_term_mip_vcc1_sticky(&self) -> u32 {
        (self.0 & 0x2000) >> 13
    }
    pub fn set_adv_cl_mpls_term_mip_vcc1_sticky(&mut self, value: u32) {
        let value = value << 13;
        assert!(value <= 0x2000);
        self.0 &= !0x2000;
        self.0 |= value;
    }    ///
    /// This sticky bit signals MPLS CPU redir of MIP VCCv2 OAM.
    pub fn adv_cl_mpls_term_mip_vcc2_sticky(&self) -> u32 {
        (self.0 & 0x1000) >> 12
    }
    pub fn set_adv_cl_mpls_term_mip_vcc2_sticky(&mut self, value: u32) {
        let value = value << 12;
        assert!(value <= 0x1000);
        self.0 &= !0x1000;
        self.0 |= value;
    }    ///
    /// This sticky bit signals MPLS CPU redir of MIP VCCv3 OAM.
    pub fn adv_cl_mpls_term_mip_vcc3_sticky(&self) -> u32 {
        (self.0 & 0x800) >> 11
    }
    pub fn set_adv_cl_mpls_term_mip_vcc3_sticky(&mut self, value: u32) {
        let value = value << 11;
        assert!(value <= 0x800);
        self.0 &= !0x800;
        self.0 |= value;
    }    ///
    /// This sticky bit signals MPLS CPU redir of MIP VCCv4 OAM.
    pub fn adv_cl_mpls_term_mip_vcc4_sticky(&self) -> u32 {
        (self.0 & 0x400) >> 10
    }
    pub fn set_adv_cl_mpls_term_mip_vcc4_sticky(&mut self, value: u32) {
        let value = value << 10;
        assert!(value <= 0x400);
        self.0 &= !0x400;
        self.0 |= value;
    }    ///
    /// This sticky bit signals MPLS PW termination of data with Control Word.
    pub fn adv_cl_mpls_term_pw_cw_sticky(&self) -> u32 {
        (self.0 & 0x10000) >> 16
    }
    pub fn set_adv_cl_mpls_term_pw_cw_sticky(&mut self, value: u32) {
        let value = value << 16;
        assert!(value <= 0x10000);
        self.0 &= !0x10000;
        self.0 |= value;
    }    ///
    /// This sticky bit signals MPLS PW termination err (frame is discarded).
    pub fn adv_cl_mpls_term_pw_err_sticky(&self) -> u32 {
        (self.0 & 0x8) >> 3
    }
    pub fn set_adv_cl_mpls_term_pw_err_sticky(&mut self, value: u32) {
        let value = value << 3;
        assert!(value <= 0x8);
        self.0 &= !0x8;
        self.0 |= value;
    }    ///
    /// This sticky bit signals MPLS PW termination of data.
    pub fn adv_cl_mpls_term_pw_sticky(&self) -> u32 {
        (self.0 & 0x8000) >> 15
    }
    pub fn set_adv_cl_mpls_term_pw_sticky(&mut self, value: u32) {
        let value = value << 15;
        assert!(value <= 0x8000);
        self.0 &= !0x8000;
        self.0 |= value;
    }    ///
    /// This sticky bit signals MPLS PW termination of OAM VCCv1.
    pub fn adv_cl_mpls_term_pw_vcc1_sticky(&self) -> u32 {
        (self.0 & 0x80) >> 7
    }
    pub fn set_adv_cl_mpls_term_pw_vcc1_sticky(&mut self, value: u32) {
        let value = value << 7;
        assert!(value <= 0x80);
        self.0 &= !0x80;
        self.0 |= value;
    }    ///
    /// This sticky bit signals MPLS PW termination of OAM VCCv2.
    pub fn adv_cl_mpls_term_pw_vcc2_sticky(&self) -> u32 {
        (self.0 & 0x40) >> 6
    }
    pub fn set_adv_cl_mpls_term_pw_vcc2_sticky(&mut self, value: u32) {
        let value = value << 6;
        assert!(value <= 0x40);
        self.0 &= !0x40;
        self.0 |= value;
    }    ///
    /// This sticky bit signals MPLS PW termination of OAM VCCv3.
    pub fn adv_cl_mpls_term_pw_vcc3_sticky(&self) -> u32 {
        (self.0 & 0x20) >> 5
    }
    pub fn set_adv_cl_mpls_term_pw_vcc3_sticky(&mut self, value: u32) {
        let value = value << 5;
        assert!(value <= 0x20);
        self.0 &= !0x20;
        self.0 |= value;
    }    ///
    /// This sticky bit signals MPLS PW termination of OAM VCCv4.
    pub fn adv_cl_mpls_term_pw_vcc4_sticky(&self) -> u32 {
        (self.0 & 0x10) >> 4
    }
    pub fn set_adv_cl_mpls_term_pw_vcc4_sticky(&mut self, value: u32) {
        let value = value << 4;
        assert!(value <= 0x10);
        self.0 &= !0x10;
        self.0 |= value;
    }    ///
    /// This sticky bit signals vld lables set to less than available.
    pub fn adv_cl_mpls_too_few_vld_labels_sticky(&self) -> u32 {
        (self.0 & 0x4) >> 2
    }
    pub fn set_adv_cl_mpls_too_few_vld_labels_sticky(&mut self, value: u32) {
        let value = value << 2;
        assert!(value <= 0x4);
        self.0 &= !0x4;
        self.0 |= value;
    }    ///
    /// This sticky bit signals TC value extracted from Label stack.
    pub fn adv_cl_mpls_use_tc_sticky(&self) -> u32 {
        (self.0 & 0x1) >> 0
    }
    pub fn set_adv_cl_mpls_use_tc_sticky(&mut self, value: u32) {
        let value = value << 0;
        assert!(value <= 0x1);
        self.0 &= !0x1;
        self.0 |= value;
    }    ///
    /// This sticky bit signals TTL value extracted from Label stack.
    pub fn adv_cl_mpls_use_ttl_sticky(&self) -> u32 {
        (self.0 & 0x2) >> 1
    }
    pub fn set_adv_cl_mpls_use_ttl_sticky(&mut self, value: u32) {
        let value = value << 1;
        assert!(value <= 0x2);
        self.0 &= !0x2;
        self.0 |= value;
    }
}

/// Register `ADV_CL_STICKY`
///
/// Sticky bits register for events generated by advanced VCAP classification
#[derive(From, Into)]
pub struct ADV_CL_STICKY(u32);
impl ADV_CL_STICKY {    ///
    /// This sticky bit signals COS ID from the VCAP was used.
    pub fn adv_cl_cosid_sticky(&self) -> u32 {
        (self.0 & 0x40000) >> 18
    }
    pub fn set_adv_cl_cosid_sticky(&mut self, value: u32) {
        let value = value << 18;
        assert!(value <= 0x40000);
        self.0 &= !0x40000;
        self.0 |= value;
    }    ///
    /// This sticky bit signals DEI from the VCAP was used.
    pub fn adv_cl_dei_sticky(&self) -> u32 {
        (self.0 & 0x4000) >> 14
    }
    pub fn set_adv_cl_dei_sticky(&mut self, value: u32) {
        let value = value << 14;
        assert!(value <= 0x4000);
        self.0 &= !0x4000;
        self.0 |= value;
    }    ///
    /// This sticky bit signals DP from the VCAP was used.
    pub fn adv_cl_dp_sticky(&self) -> u32 {
        (self.0 & 0x8000) >> 15
    }
    pub fn set_adv_cl_dp_sticky(&mut self, value: u32) {
        let value = value << 15;
        assert!(value <= 0x8000);
        self.0 &= !0x8000;
        self.0 |= value;
    }    ///
    /// This sticky bit signals DSCP value from the VCAPs was used.
    pub fn adv_cl_dscp_sticky(&self) -> u32 {
        (self.0 & 0x20000) >> 17
    }
    pub fn set_adv_cl_dscp_sticky(&mut self, value: u32) {
        let value = value << 17;
        assert!(value <= 0x20000);
        self.0 &= !0x20000;
        self.0 |= value;
    }    ///
    /// This sticky bit signals generic index was changed from the VCAP.
    pub fn adv_cl_generic_idx_sticky(&self) -> u32 {
        (self.0 & 0x40) >> 6
    }
    pub fn set_adv_cl_generic_idx_sticky(&mut self, value: u32) {
        let value = value << 6;
        assert!(value <= 0x40);
        self.0 &= !0x40;
        self.0 |= value;
    }    ///
    /// This sticky bit signals that a HIH force mode use of map index was used.
    pub fn adv_cl_hih_force_mode_used_sticky(&self) -> u32 {
        (self.0 & 0x400000) >> 22
    }
    pub fn set_adv_cl_hih_force_mode_used_sticky(&mut self, value: u32) {
        let value = value << 22;
        assert!(value <= 0x400000);
        self.0 &= !0x400000;
        self.0 |= value;
    }    ///
    /// This sticky bit signals that a HIH lookup key was used.
    pub fn adv_cl_hih_key_used_sticky(&self) -> u32 {
        (self.0 & 0x200000) >> 21
    }
    pub fn set_adv_cl_hih_key_used_sticky(&mut self, value: u32) {
        let value = value << 21;
        assert!(value <= 0x200000);
        self.0 &= !0x200000;
        self.0 |= value;
    }    ///
    /// This sticky bit signals ISDX from the VCAP was used.
    pub fn adv_cl_isdx_sticky(&self) -> u32 {
        (self.0 & 0x100) >> 8
    }
    pub fn set_adv_cl_isdx_sticky(&mut self, value: u32) {
        let value = value << 8;
        assert!(value <= 0x100);
        self.0 &= !0x100;
        self.0 |= value;
    }    ///
    /// This sticky bit signals MAP table usage from the VCAP was used.
    pub fn adv_cl_map_tbl_idx0_updated_sticky(&self) -> u32 {
        (self.0 & 0x400) >> 10
    }
    pub fn set_adv_cl_map_tbl_idx0_updated_sticky(&mut self, value: u32) {
        let value = value << 10;
        assert!(value <= 0x400);
        self.0 &= !0x400;
        self.0 |= value;
    }    ///
    /// This sticky bit signals MAP table usage from the VCAP was used.
    pub fn adv_cl_map_tbl_idx1_updated_sticky(&self) -> u32 {
        (self.0 & 0x200) >> 9
    }
    pub fn set_adv_cl_map_tbl_idx1_updated_sticky(&mut self, value: u32) {
        let value = value << 9;
        assert!(value <= 0x200);
        self.0 &= !0x200;
        self.0 |= value;
    }    ///
    /// This sticky bit signals MASQ_INJ was triggered from the VCAP was used.
    pub fn adv_cl_masq_inj_sticky(&self) -> u32 {
        (self.0 & 0x80) >> 7
    }
    pub fn set_adv_cl_masq_inj_sticky(&mut self, value: u32) {
        let value = value << 7;
        assert!(value <= 0x80);
        self.0 &= !0x80;
        self.0 |= value;
    }    ///
    /// This sticky bit signals that a frame ways attempted to normalized beyond what is supported.
    pub fn adv_cl_max_w16_offset_fail_sticky(&self) -> u32 {
        (self.0 & 0x100000) >> 20
    }
    pub fn set_adv_cl_max_w16_offset_fail_sticky(&mut self, value: u32) {
        let value = value << 20;
        assert!(value <= 0x100000);
        self.0 &= !0x100000;
        self.0 |= value;
    }    ///
    /// This sticky bit signals NXT_KEY_TYPE from the VCAP was used.
    pub fn adv_cl_nxt_key_type_sticky(&self) -> u32 {
        (self.0 & 0x20) >> 5
    }
    pub fn set_adv_cl_nxt_key_type_sticky(&mut self, value: u32) {
        let value = value << 5;
        assert!(value <= 0x20);
        self.0 &= !0x20;
        self.0 |= value;
    }    ///
    /// This sticky bit signals NXT_NORMALIZE from the VCAP was used.
    pub fn adv_cl_nxt_normalize_sticky(&self) -> u32 {
        (self.0 & 0x2) >> 1
    }
    pub fn set_adv_cl_nxt_normalize_sticky(&mut self, value: u32) {
        let value = value << 1;
        assert!(value <= 0x2);
        self.0 &= !0x2;
        self.0 |= value;
    }    ///
    /// This sticky bit signals NXT_OFFSET_FROM_TYPE > 63 from the VCAP was attempted.
    pub fn adv_cl_nxt_offset_too_big_sticky(&self) -> u32 {
        (self.0 & 0x1) >> 0
    }
    pub fn set_adv_cl_nxt_offset_too_big_sticky(&mut self, value: u32) {
        let value = value << 0;
        assert!(value <= 0x1);
        self.0 &= !0x1;
        self.0 |= value;
    }    ///
    /// This sticky bit signals NXT_TYPE_AFTER_OFFSET = CW from the VCAP was used.
    pub fn adv_cl_nxt_type_cw_sticky(&self) -> u32 {
        (self.0 & 0x4) >> 2
    }
    pub fn set_adv_cl_nxt_type_cw_sticky(&mut self, value: u32) {
        let value = value << 2;
        assert!(value <= 0x4);
        self.0 &= !0x4;
        self.0 |= value;
    }    ///
    /// This sticky bit signals NXT_TYPE_AFTER_OFFSET = ETH from the VCAP was used.
    pub fn adv_cl_nxt_type_eth_sticky(&self) -> u32 {
        (self.0 & 0x10) >> 4
    }
    pub fn set_adv_cl_nxt_type_eth_sticky(&mut self, value: u32) {
        let value = value << 4;
        assert!(value <= 0x10);
        self.0 &= !0x10;
        self.0 |= value;
    }    ///
    /// This sticky bit signals NXT_TYPE_AFTER_OFFSET = MPLS from the VCAP was used.
    pub fn adv_cl_nxt_type_mpls_sticky(&self) -> u32 {
        (self.0 & 0x8) >> 3
    }
    pub fn set_adv_cl_nxt_type_mpls_sticky(&mut self, value: u32) {
        let value = value << 3;
        assert!(value <= 0x8);
        self.0 &= !0x8;
        self.0 |= value;
    }    ///
    /// This sticky bit signals PCP from the VCAP was used.
    pub fn adv_cl_pcp_sticky(&self) -> u32 {
        (self.0 & 0x2000) >> 13
    }
    pub fn set_adv_cl_pcp_sticky(&mut self, value: u32) {
        let value = value << 13;
        assert!(value <= 0x2000);
        self.0 &= !0x2000;
        self.0 |= value;
    }    ///
    /// This sticky bit signals QoS class from the VCAP was used.
    pub fn adv_cl_qos_sticky(&self) -> u32 {
        (self.0 & 0x10000) >> 16
    }
    pub fn set_adv_cl_qos_sticky(&mut self, value: u32) {
        let value = value << 16;
        assert!(value <= 0x10000);
        self.0 &= !0x10000;
        self.0 |= value;
    }    ///
    /// This sticky bit signals VID from the VCAP was used.
    pub fn adv_cl_vid_sticky(&self) -> u32 {
        (self.0 & 0x1000) >> 12
    }
    pub fn set_adv_cl_vid_sticky(&mut self, value: u32) {
        let value = value << 12;
        assert!(value <= 0x1000);
        self.0 &= !0x1000;
        self.0 |= value;
    }    ///
    /// This sticky bit signals VLAN pop count from the VCAP was used.
    pub fn adv_cl_vlan_popcnt_sticky(&self) -> u32 {
        (self.0 & 0x800) >> 11
    }
    pub fn set_adv_cl_vlan_popcnt_sticky(&mut self, value: u32) {
        let value = value << 11;
        assert!(value <= 0x800);
        self.0 &= !0x800;
        self.0 |= value;
    }    ///
    /// This sticky bit signals was_tagged from the VCAP was used.
    pub fn adv_cl_vlan_was_tagged_sticky(&self) -> u32 {
        (self.0 & 0x80000) >> 19
    }
    pub fn set_adv_cl_vlan_was_tagged_sticky(&mut self, value: u32) {
        let value = value << 19;
        assert!(value <= 0x80000);
        self.0 &= !0x80000;
        self.0 |= value;
    }
}

/// Register `CAT_STICKY`
///
/// Sticky bits register
#[derive(From, Into)]
pub struct CAT_STICKY(u32);
impl CAT_STICKY {    ///
    /// This bit is set if a 802.1ag control frame  (DMAC in the range 01-80-C2-00-00-30 to 01-80-C2-00-00-3F) has been detected.
    ///
    /// 0: No event 1: Event Bit is cleared by writing a 1 to this position.
    pub fn ag_sticky(&self) -> u32 {
        (self.0 & 0x100) >> 8
    }
    pub fn set_ag_sticky(&mut self, value: u32) {
        let value = value << 8;
        assert!(value <= 0x100);
        self.0 &= !0x100;
        self.0 |= value;
    }    ///
    /// This bit is set if a BPDU control frame  (DMAC in the range 01-80-C2-00-00-00 to 01-80-C2-00-00-0F) has been detected.
    ///
    /// 0: No event 1: Event Bit is cleared by writing a 1 to this position.
    pub fn bpdu_sticky(&self) -> u32 {
        (self.0 & 0x80) >> 7
    }
    pub fn set_bpdu_sticky(&mut self, value: u32) {
        let value = value << 7;
        assert!(value <= 0x80);
        self.0 &= !0x80;
        self.0 |= value;
    }    ///
    /// Set if a frame has been received with a TPID disabled for CPU forwarding.
    ///
    /// 0: The event has not occured 1: The event did occour Bit is cleared by writing a 1 to this position.
    pub fn capture_tpid_dis_sticky(&self) -> u32 {
        (self.0 & 0x100000) >> 20
    }
    pub fn set_capture_tpid_dis_sticky(&mut self, value: u32) {
        let value = value << 20;
        assert!(value <= 0x100000);
        self.0 &= !0x100000;
        self.0 |= value;
    }    ///
    /// This bit is set if a GxRP frame ( DMAC in the range 01-80-C2-00-00-20 to 01-80-C2-00-00-2F) has been detected.
    ///
    /// 0: No event 1: Event Bit is cleared by writing a 1 to this position.
    pub fn gxrp_sticky(&self) -> u32 {
        (self.0 & 0x40) >> 6
    }
    pub fn set_gxrp_sticky(&mut self, value: u32) {
        let value = value << 6;
        assert!(value <= 0x40);
        self.0 &= !0x40;
        self.0 |= value;
    }    ///
    /// Set if an IGMP frame has been detected.
    ///
    /// 0: No event 1: Event Bit is cleared by writing a 1 to this position.
    pub fn igmp_sticky(&self) -> u32 {
        (self.0 & 0x200) >> 9
    }
    pub fn set_igmp_sticky(&mut self, value: u32) {
        let value = value << 9;
        assert!(value <= 0x200);
        self.0 &= !0x200;
        self.0 |= value;
    }    ///
    /// Set if an IP Multicast control frame has been detected. - DMAC = 0x01005Exxxxxx , Ethernet Type = IP, IP Protocol != IGMP, DIP = 224.0.0.x
    ///
    /// 0: No event 1: Event Bit is cleared by writing a 1 to this position.
    pub fn ip4_mc_ctrl_sticky(&self) -> u32 {
        (self.0 & 0x10) >> 4
    }
    pub fn set_ip4_mc_ctrl_sticky(&mut self, value: u32) {
        let value = value << 4;
        assert!(value <= 0x10);
        self.0 &= !0x10;
        self.0 |= value;
    }    ///
    /// Is set if an IPv6 frame with a hop by hop header and ICMPv6 was seen.
    ///
    /// 0: No event 1: Event Bit is cleared by writing a 1 to this position.
    pub fn ip6_hop_by_hop_sticky(&self) -> u32 {
        (self.0 & 0x2) >> 1
    }
    pub fn set_ip6_hop_by_hop_sticky(&mut self, value: u32) {
        let value = value << 1;
        assert!(value <= 0x2);
        self.0 &= !0x2;
        self.0 |= value;
    }    ///
    /// Indicates that a IPv6 frame with hop by hop options and ICMPv6 was seen.
    ///
    /// 0: No event 1: Event Bit is cleared by writing a 1 to this position.
    pub fn ip6_icmp_hop_by_hop_sticky(&self) -> u32 {
        (self.0 & 0x4) >> 2
    }
    pub fn set_ip6_icmp_hop_by_hop_sticky(&mut self, value: u32) {
        let value = value << 2;
        assert!(value <= 0x4);
        self.0 &= !0x4;
        self.0 |= value;
    }    ///
    /// Set if an IPv6 Multicast control frame has been detected. - DMAC = 0x3333xxxxxxxx , Ethernet Type = IPv6, DIP = FF02::/16
    ///
    /// 0: No event 1: Event Bit is cleared by writing a 1 to this position.
    pub fn ip6_mc_ctrl_sticky(&self) -> u32 {
        (self.0 & 0x20) >> 5
    }
    pub fn set_ip6_mc_ctrl_sticky(&mut self, value: u32) {
        let value = value << 5;
        assert!(value <= 0x20);
        self.0 &= !0x20;
        self.0 |= value;
    }    ///
    /// Set if an MLD frame has been detected.
    ///
    /// 0: No event 1: Event Bit is cleared by writing a 1 to this position.
    pub fn mld_sticky(&self) -> u32 {
        (self.0 & 0x8) >> 3
    }
    pub fn set_mld_sticky(&mut self, value: u32) {
        let value = value << 3;
        assert!(value <= 0x8);
        self.0 &= !0x8;
        self.0 |= value;
    }    ///
    /// Set if a VRAP frame has been detected.
    ///
    /// 0: No event 1: Event Bit is cleared by writing a 1 to this position.
    pub fn vrap_sticky(&self) -> u32 {
        (self.0 & 0x400) >> 10
    }
    pub fn set_vrap_sticky(&mut self, value: u32) {
        let value = value << 10;
        assert!(value <= 0x400);
        self.0 &= !0x400;
        self.0 |= value;
    }    ///
    /// Indicates that a frame with a VStax2 TTL value of 0 was dropped.
    ///
    /// 0: No event 1: Event Bit is cleared by writing a 1 to this position.
    pub fn vstax2_ttl_zero_sticky(&self) -> u32 {
        (self.0 & 0x800) >> 11
    }
    pub fn set_vstax2_ttl_zero_sticky(&mut self, value: u32) {
        let value = value << 11;
        assert!(value <= 0x800);
        self.0 &= !0x800;
        self.0 |= value;
    }
}

/// Register `CLASS_STICKY`
///
/// Sticky bits register
#[derive(From, Into)]
pub struct CLASS_STICKY(u32);
impl CLASS_STICKY {    ///
    /// This sticky bit indicates that the QoS class was used as index into the DSCP_REWR_VAL table to determine the DSCP value.
    ///
    /// 0: No event 1: QoS class has been used to determine the DSCP Bit is cleared by writing a 1 to this position.
    pub fn dscp_qos_rewr_sticky(&self) -> u32 {
        (self.0 & 0x200) >> 9
    }
    pub fn set_dscp_qos_rewr_sticky(&mut self, value: u32) {
        let value = value << 9;
        assert!(value <= 0x200);
        self.0 &= !0x200;
        self.0 |= value;
    }    ///
    /// Set when the  DSCP value is based on the DSCP_TRANSLATE_VAL.
    ///
    /// 0: No event 1: DSCP_TRANSLATE_VAL has been used. Bit is cleared by writing a 1 to this position.
    pub fn dscp_translate_sticky(&self) -> u32 {
        (self.0 & 0x100) >> 8
    }
    pub fn set_dscp_translate_sticky(&mut self, value: u32) {
        let value = value << 8;
        assert!(value <= 0x100);
        self.0 &= !0x100;
        self.0 |= value;
    }    ///
    /// Set when the default port QoS has been used.
    ///
    /// 0: No event 1: Port default has been used for QoS classification Bit is cleared by writing a 1 to this position.
    pub fn qos_default_sticky(&self) -> u32 {
        (self.0 & 0x8) >> 3
    }
    pub fn set_qos_default_sticky(&mut self, value: u32) {
        let value = value << 3;
        assert!(value <= 0x8);
        self.0 &= !0x8;
        self.0 |= value;
    }    ///
    /// Set when the DSCP QoS has been used.
    ///
    /// 0: No event 1: DSCP QoS class has been used for QoS classification Bit is cleared by writing a 1 to this position.
    pub fn qos_dscp_sticky(&self) -> u32 {
        (self.0 & 0x2) >> 1
    }
    pub fn set_qos_dscp_sticky(&mut self, value: u32) {
        let value = value << 1;
        assert!(value <= 0x2);
        self.0 &= !0x2;
        self.0 |= value;
    }    ///
    /// Set when the classified PCP and DEI value is used to to determeine the QoS class.
    ///
    /// 0: No event 1: PCP value has been used for QoS classification Bit is cleared by writing a 1 to this position.
    pub fn qos_pcp_dei_sticky(&self) -> u32 {
        (self.0 & 0x10) >> 4
    }
    pub fn set_qos_pcp_dei_sticky(&mut self, value: u32) {
        let value = value << 4;
        assert!(value <= 0x10);
        self.0 &= !0x10;
        self.0 |= value;
    }    ///
    /// Set when the stacking QoS has been used.
    ///
    /// 0: No event 1: Stacking header QoS class has been used for QoS classification Bit is cleared by writing a 1 to this position.
    pub fn qos_stack_tag_sticky(&self) -> u32 {
        (self.0 & 0x1) >> 0
    }
    pub fn set_qos_stack_tag_sticky(&mut self, value: u32) {
        let value = value << 0;
        assert!(value <= 0x1);
        self.0 &= !0x1;
        self.0 |= value;
    }    ///
    /// Set when the port VLAN has been used.
    ///
    /// 0: The event has not occured 1: Port default value has been used for VLAN classification Bit is cleared by writing a 1 to this position.
    pub fn vid_port_sticky(&self) -> u32 {
        (self.0 & 0x80) >> 7
    }
    pub fn set_vid_port_sticky(&mut self, value: u32) {
        let value = value << 7;
        assert!(value <= 0x80);
        self.0 &= !0x80;
        self.0 |= value;
    }    ///
    /// Set when the VID information from Stacking TAG has been used.
    ///
    /// 0: The event has not occured 1: Stacking Header VID has been used for VLAN classification Bit is cleared by writing a 1 to this position.
    pub fn vid_stack_sticky(&self) -> u32 {
        (self.0 & 0x40) >> 6
    }
    pub fn set_vid_stack_sticky(&mut self, value: u32) {
        let value = value << 6;
        assert!(value <= 0x40);
        self.0 &= !0x40;
        self.0 |= value;
    }    ///
    /// Set when vid from the TAG has been used.
    ///
    /// 0: The event has not occured 1: TCI VID value has been used for VLAN classification Bit is cleared by writing a 1 to this position.
    pub fn vid_tag_sticky(&self) -> u32 {
        (self.0 & 0x20) >> 5
    }
    pub fn set_vid_tag_sticky(&mut self, value: u32) {
        let value = value << 5;
        assert!(value <= 0x20);
        self.0 &= !0x20;
        self.0 |= value;
    }
}

/// Register `FILTER_STICKY`
///
/// Sticky bits register
#[derive(From, Into)]
pub struct FILTER_STICKY(u32);
impl FILTER_STICKY {    ///
    /// Set if a frame is dropped due to zero MAC addresses filtering or multicast source MAC address filtering.
    ///
    /// 0: No event 1: Event Bit is cleared by writing a 1 to this position.
    pub fn bad_macs_sticky(&self) -> u32 {
        (self.0 & 0x1) >> 0
    }
    pub fn set_bad_macs_sticky(&mut self, value: u32) {
        let value = value << 0;
        assert!(value <= 0x1);
        self.0 &= !0x1;
        self.0 |= value;
    }    ///
    /// Set if a frame has been filtered due to wrong stacking information (e.g. not expected stacking tag etc.).
    ///
    /// 0: No event 1: Event Bit is cleared by writing a 1 to this position.
    pub fn stacking_filter_sticky(&self) -> u32 {
        (self.0 & 0x2) >> 1
    }
    pub fn set_stacking_filter_sticky(&mut self, value: u32) {
        let value = value << 1;
        assert!(value <= 0x2);
        self.0 &= !0x2;
        self.0 |= value;
    }
}

/// Register `MIP_STICKY`
///
/// Sticky bits register for events generated by MIP operation
#[derive(From, Into)]
pub struct MIP_STICKY(u32);
impl MIP_STICKY {    ///
    /// This sticky bit signals CCM copy MIP operation.
    pub fn mip_ccm_copy_sticky(&self) -> u32 {
        (self.0 & 0x1) >> 0
    }
    pub fn set_mip_ccm_copy_sticky(&mut self, value: u32) {
        let value = value << 0;
        assert!(value <= 0x1);
        self.0 &= !0x1;
        self.0 |= value;
    }    ///
    /// This sticky bit signals Generic MIP operation.
    pub fn mip_generic_sticky(&self) -> u32 {
        (self.0 & 0x10) >> 4
    }
    pub fn set_mip_generic_sticky(&mut self, value: u32) {
        let value = value << 4;
        assert!(value <= 0x10);
        self.0 &= !0x10;
        self.0 |= value;
    }    ///
    /// This sticky bit signals MIP LBM operation failed due to faild MAC address check.
    pub fn mip_lbm_da_chk_fail_sticky(&self) -> u32 {
        (self.0 & 0x20) >> 5
    }
    pub fn set_mip_lbm_da_chk_fail_sticky(&mut self, value: u32) {
        let value = value << 5;
        assert!(value <= 0x20);
        self.0 &= !0x20;
        self.0 |= value;
    }    ///
    /// This sticky bit signals LBM redir MIP operation.
    pub fn mip_lbm_redir_sticky(&self) -> u32 {
        (self.0 & 0x2) >> 1
    }
    pub fn set_mip_lbm_redir_sticky(&mut self, value: u32) {
        let value = value << 1;
        assert!(value <= 0x2);
        self.0 &= !0x2;
        self.0 |= value;
    }    ///
    /// This sticky bit signals LTM redir MIP operation.
    pub fn mip_ltm_redir_sticky(&self) -> u32 {
        (self.0 & 0x4) >> 2
    }
    pub fn set_mip_ltm_redir_sticky(&mut self, value: u32) {
        let value = value << 2;
        assert!(value <= 0x4);
        self.0 &= !0x4;
        self.0 |= value;
    }    ///
    /// This sticky bit signals MIP operation failed due to MEL check.
    pub fn mip_mel_chk_fail_sticky(&self) -> u32 {
        (self.0 & 0x40) >> 6
    }
    pub fn set_mip_mel_chk_fail_sticky(&mut self, value: u32) {
        let value = value << 6;
        assert!(value <= 0x40);
        self.0 &= !0x40;
        self.0 |= value;
    }    ///
    /// This sticky bit signals  RAPS MIP operation.
    pub fn mip_raps_sticky(&self) -> u32 {
        (self.0 & 0x8) >> 3
    }
    pub fn set_mip_raps_sticky(&mut self, value: u32) {
        let value = value << 3;
        assert!(value <= 0x8);
        self.0 &= !0x8;
        self.0 |= value;
    }
}

/// Register `PP_CFG`
///
/// Protection state configuration
#[derive(From, Into)]
pub struct PP_CFG(u32);
impl PP_CFG {    ///
    /// Protection state vector with one bit per protection group. The protection group, used by a given service, is configured in ANA_CL:IPT:IPT.PPT_IDX. For protection group n, the protection status bit is derived the following way: ANA_CL:PPT:PP_CFG[n DIV 32].STATE[n MOD 32].
    ///
    /// 0: Protection group uses working entity. 1: Protection group uses protection entity.
    pub fn state(&self) -> u32 {
        (self.0 & 0x0) >> 0
    }
    pub fn set_state(&mut self, value: u32) {
        let value = value << 0;
        assert!(value <= 0x0);
        self.0 &= !0x0;
        self.0 |= value;
    }
}

/// Register `VLAN_FILTER_STICKY`
///
/// Sticky bits register
///
/// Replicated three times, once for each tag. Replication 0 is outer-most tag, 2 is inner-most tag.
#[derive(From, Into)]
pub struct VLAN_FILTER_STICKY(u32);
impl VLAN_FILTER_STICKY {    ///
    /// Set if a frame is dropped due to C-TAG filtering at the given tag position.
    ///
    /// 0: No event 1: Event Bit is cleared by writing a 1 to this position.
    pub fn filter_ctag_sticky(&self) -> u32 {
        (self.0 & 0x4) >> 2
    }
    pub fn set_filter_ctag_sticky(&mut self, value: u32) {
        let value = value << 2;
        assert!(value <= 0x4);
        self.0 &= !0x4;
        self.0 |= value;
    }    ///
    /// Set if a frame is dropped due to priority C-TAG filtering at the given tag position.
    ///
    /// 0: No event 1: Event Bit is cleared by writing a 1 to this position.
    pub fn filter_prio_ctag_sticky(&self) -> u32 {
        (self.0 & 0x8) >> 3
    }
    pub fn set_filter_prio_ctag_sticky(&mut self, value: u32) {
        let value = value << 3;
        assert!(value <= 0x8);
        self.0 &= !0x8;
        self.0 |= value;
    }    ///
    /// Set if a frame is dropped due priority S-TAG filtering at the given tag position.
    ///
    /// 0: No event 1: Event Bit is cleared by writing a 1 to this position.
    pub fn filter_prio_stag_sticky(&self) -> u32 {
        (self.0 & 0x2) >> 1
    }
    pub fn set_filter_prio_stag_sticky(&mut self, value: u32) {
        let value = value << 1;
        assert!(value <= 0x2);
        self.0 &= !0x2;
        self.0 |= value;
    }    ///
    /// Set if a frame is dropped due required tag was not found.
    ///
    /// 0: No Event 1: Event Bit is cleared by writing a 1 to this position.
    pub fn filter_required_tag_sticky(&self) -> u32 {
        (self.0 & 0x10) >> 4
    }
    pub fn set_filter_required_tag_sticky(&mut self, value: u32) {
        let value = value << 4;
        assert!(value <= 0x10);
        self.0 &= !0x10;
        self.0 |= value;
    }    ///
    /// Set if a frame is dropped due to S-TAG filtering at the given tag position.
    ///
    /// 0: No event 1: Event Bit is cleared by writing a 1 to this position.
    pub fn filter_stag_sticky(&self) -> u32 {
        (self.0 & 0x1) >> 0
    }
    pub fn set_filter_stag_sticky(&mut self, value: u32) {
        let value = value << 0;
        assert!(value <= 0x1);
        self.0 &= !0x1;
        self.0 |= value;
    }
}
