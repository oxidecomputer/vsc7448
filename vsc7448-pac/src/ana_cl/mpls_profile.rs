// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Based on mesa-v2021.09 (https://github.com/microchip-ung/mesa/) which has
// the following copyright and license:
//
// Copyright (c) 2004-2021 Microchip Technology Inc. and its subsidiaries.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// This is an autogenerated file; do not edit by hand!
use derive_more::{From, Into};
/// Generalized MPLS exception handling
///
/// This register allows exception handling of reserved MPLS labels and IP control protocols.
#[derive(Copy, Clone, Debug, Eq, PartialEq, From, Into)]
pub struct PROFILE_CFG(u32);
impl PROFILE_CFG {
    /// If the frame is forwarded to the CPU (via PROFILE_CFG.FWD_SEL), it will be forwarded to the CPU queue configured in this field.
    #[inline(always)]
    pub fn cpu_qu(&self) -> u32 {
        self.0 & 0x7
    }
    #[inline(always)]
    pub fn set_cpu_qu(&mut self, value: u32) {
        debug_assert!(value <= 0x7);
        self.0 &= !0x7;
        self.0 |= value;
    }
    /// Controls S2 custom rule selection.
    ///
    /// Bit 0: Selects custom key to use (0: CUSTOM_1, 1: CUSTOM_2) Bit 1: Enables custom key for first lookup Bit 2: Enables custom key for second lookup
    #[inline(always)]
    pub fn custom_ace_ena(&self) -> u32 {
        (self.0 & 0x38000) >> 15
    }
    #[inline(always)]
    pub fn set_custom_ace_ena(&mut self, value: u32) {
        debug_assert!(value <= 0x7);
        let value = value << 15;
        self.0 &= !0x38000;
        self.0 |= value;
    }
    /// CPU forward configuration per profile.
    ///
    /// 0: Normal forward 1: Enable redirection to CPU queue: PROFILE_CFG.CPU_QU 2: Enable copy to CPU queue: PROFILE_CFG.CPU_QU 3: Discard the frame
    #[inline(always)]
    pub fn fwd_sel(&self) -> u32 {
        (self.0 & 0x18) >> 3
    }
    #[inline(always)]
    pub fn set_fwd_sel(&mut self, value: u32) {
        debug_assert!(value <= 0x3);
        let value = value << 3;
        self.0 &= !0x18;
        self.0 |= value;
    }
    /// Controls if profile traffic should be part of OAM LM count.
    #[inline(always)]
    pub fn lm_cnt_dis(&self) -> u32 {
        (self.0 & 0x80000) >> 19
    }
    #[inline(always)]
    pub fn set_lm_cnt_dis(&mut self, value: u32) {
        debug_assert!(value <= 0x1);
        let value = value << 19;
        self.0 &= !0x80000;
        self.0 |= value;
    }
    /// Controls if profile traffic should be normalized according to normal action handling: nxt_normalize.
    #[inline(always)]
    pub fn normalize_dis(&self) -> u32 {
        (self.0 & 0x40000) >> 18
    }
    #[inline(always)]
    pub fn set_normalize_dis(&mut self, value: u32) {
        debug_assert!(value <= 0x1);
        let value = value << 18;
        self.0 &= !0x40000;
        self.0 |= value;
    }
    /// Determines the next CLM lookup. Could also specify no further CLM lookups
    ///
    /// 0: no overrule 2: SGL_MLBS 3: DBL_MLBS 4: TRI_MLBS 12: CUSTOM1 13: CUSTOM2 14: CUSTOM4 15: No Lookup other: reserved
    #[inline(always)]
    pub fn nxt_key_type(&self) -> u32 {
        (self.0 & 0x1e0) >> 5
    }
    #[inline(always)]
    pub fn set_nxt_key_type(&mut self, value: u32) {
        debug_assert!(value <= 0xf);
        let value = value << 5;
        self.0 &= !0x1e0;
        self.0 |= value;
    }
    /// Determines frame pointer movement.
    #[inline(always)]
    pub fn nxt_norm_w16_offset(&self) -> u32 {
        (self.0 & 0x1e00) >> 9
    }
    #[inline(always)]
    pub fn set_nxt_norm_w16_offset(&mut self, value: u32) {
        debug_assert!(value <= 0xf);
        let value = value << 9;
        self.0 &= !0x1e00;
        self.0 |= value;
    }
    /// Controls Protocol layer (frame_type) at frame pointer position after update PROFILE_CFG.NXT_NORM_W16_OFFSET.
    ///
    /// 0: ETH  - Frame pointer points to start of DMAC. 1: CW (IP / MPLS PW CW / MPLS ACH) - Frame pointer points to MPLS CW/ACH or IP version. 2: MPLS - Frame pointer points to MPLS label. 3: DATA -"Raw" data, i.e. unknown protocol type.
    #[inline(always)]
    pub fn nxt_type_after_offset(&self) -> u32 {
        (self.0 & 0x6000) >> 13
    }
    #[inline(always)]
    pub fn set_nxt_type_after_offset(&mut self, value: u32) {
        debug_assert!(value <= 0x3);
        let value = value << 13;
        self.0 &= !0x6000;
        self.0 |= value;
    }
}
