// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Based on mesa-v2021.09 (https://github.com/microchip-ung/mesa/) which has
// the following copyright and license:
//
// Copyright (c) 2004-2021 Microchip Technology Inc. and its subsidiaries.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// This is an autogenerated file; do not edit by hand!
use derive_more::{From, Into};

/// Register `IPT`
///
/// Ingress Protection Configuration
#[derive(From, Into)]
pub struct IPT(u32);
impl IPT {    ///
    /// ISDX protection configuration.
    ///
    /// 0: No protection Value applicable for forwarding from UNI to a protected NNI: 1: Set PROT_ACTIVE=1 to REW if the ISDX's protection group uses the protection entity. Values applicable for forwarding from a protected NNI to UNI: 2: Working entity. Discard received frame if the ISDX's protection group uses the protection entity, i.e. ANA_CL:PPT:PP_CFG.STATE=1 3: Protection entity: Discard received frame if the ISDX's protection group uses the working entity, i.e. ANA_CL:PPT:PP_CFG.STATE=0
    pub fn ipt_cfg(&self) -> u32 {
        (self.0 & 0x1800) >> 11
    }
    pub fn set_ipt_cfg(&mut self, value: u32) {
        let value = value << 11;
        assert!(value <= 0x1800);
        self.0 &= !0x1800;
        self.0 |= value;
    }    ///
    /// Pointer to protection state in ANA_CL:PPT for the protection group, which this ISDX is a member of.
    pub fn ppt_idx(&self) -> u32 {
        (self.0 & 0x1ff) >> 0
    }
    pub fn set_ppt_idx(&mut self, value: u32) {
        let value = value << 0;
        assert!(value <= 0x1ff);
        self.0 &= !0x1ff;
        self.0 |= value;
    }    ///
    /// Configures the protection pipeline point where ISDX protection operates at.
    ///
    /// 0: ANA_IPT_PROT 1: ANA_OU_PROT 2: ANA_MID_PROT 3: ANA_IN_PROT
    pub fn prot_pipeline_pt(&self) -> u32 {
        (self.0 & 0x600) >> 9
    }
    pub fn set_prot_pipeline_pt(&mut self, value: u32) {
        let value = value << 9;
        assert!(value <= 0x600);
        self.0 &= !0x600;
        self.0 |= value;
    }
}
