// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Based on mesa-v2021.09 (https://github.com/microchip-ung/mesa/) which has
// the following copyright and license:
//
// Copyright (c) 2004-2021 Microchip Technology Inc. and its subsidiaries.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// This is an autogenerated file; do not edit by hand!
use derive_more::{From, Into};
/// Entry in mapping table
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct MAP_ENTRY(u32);
impl MAP_ENTRY {
    /// COS ID. The classified COS ID is set to COSID_VAL if SET_CTRL.COSID_ENA is set.
    pub fn cosid_val(&self) -> u32 {
        (self.0 & 0xe000) >> 13
    }
    pub fn set_cosid_val(&mut self, value: u32) {
        assert!(value <= 0x7);
        let value = value << 13;
        self.0 &= !0xe000;
        self.0 |= value;
    }
    /// DEI value. The classified DEI is set to DEI_VAL if SET_CTRL.DEI_ENA is set.
    pub fn dei_val(&self) -> u32 {
        (self.0 & 0x200) >> 9
    }
    pub fn set_dei_val(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 9;
        self.0 &= !0x200;
        self.0 |= value;
    }
    /// Drop precedence level. The classified DP level is set to DP_VAL if SET_CTRL.DP_ENA is set.
    pub fn dp_val(&self) -> u32 {
        (self.0 & 0x30000) >> 16
    }
    pub fn set_dp_val(&mut self, value: u32) {
        assert!(value <= 0x3);
        let value = value << 16;
        self.0 &= !0x30000;
        self.0 |= value;
    }
    /// DSCP value. The classified DSCP is set to DSCP_VAL if SET_CTRL.DSCP_ENA is set.
    pub fn dscp_val(&self) -> u32 {
        self.0 & 0x3f
    }
    pub fn set_dscp_val(&mut self, value: u32) {
        assert!(value <= 0x3f);
        self.0 &= !0x3f;
        self.0 |= value;
    }
    /// Disable forwarding for frames hitting this entry.
    pub fn fwd_dis(&self) -> u32 {
        (self.0 & 0x2000000) >> 25
    }
    pub fn set_fwd_dis(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 25;
        self.0 &= !0x2000000;
        self.0 |= value;
    }
    /// Path color value used by OAM MEP.
    pub fn path_color_val(&self) -> u32 {
        (self.0 & 0x1000000) >> 24
    }
    pub fn set_path_color_val(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 24;
        self.0 &= !0x1000000;
        self.0 |= value;
    }
    /// Path COS ID used by OAM MEP.
    pub fn path_cosid_val(&self) -> u32 {
        (self.0 & 0xe00000) >> 21
    }
    pub fn set_path_cosid_val(&mut self, value: u32) {
        assert!(value <= 0x7);
        let value = value << 21;
        self.0 &= !0xe00000;
        self.0 |= value;
    }
    /// PCP value. The classified PCP is set to PCP_VAL if SET_CTRL.PCP_ENA is set.
    pub fn pcp_val(&self) -> u32 {
        (self.0 & 0x1c0) >> 6
    }
    pub fn set_pcp_val(&mut self, value: u32) {
        assert!(value <= 0x7);
        let value = value << 6;
        self.0 &= !0x1c0;
        self.0 |= value;
    }
    /// QoS class. The classified QoS class is set to QOS_VAL if SET_CTRL.QOS_ENA is set.
    pub fn qos_val(&self) -> u32 {
        (self.0 & 0x1c00) >> 10
    }
    pub fn set_qos_val(&mut self, value: u32) {
        assert!(value <= 0x7);
        let value = value << 10;
        self.0 &= !0x1c00;
        self.0 |= value;
    }
    /// TC bits. The classified TC bits are set to TC_VAL if SET_CTRL.TC_ENA is set.
    pub fn tc_val(&self) -> u32 {
        (self.0 & 0x1c0000) >> 18
    }
    pub fn set_tc_val(&mut self, value: u32) {
        assert!(value <= 0x7);
        let value = value << 18;
        self.0 &= !0x1c0000;
        self.0 |= value;
    }
}
/// Configures which entry fields to use if row is matched
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct SET_CTRL(u32);
impl SET_CTRL {
    /// If set, COSID_VAL replaces the classified COS ID if the entry is matched.
    pub fn cosid_ena(&self) -> u32 {
        (self.0 & 0x10) >> 4
    }
    pub fn set_cosid_ena(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 4;
        self.0 &= !0x10;
        self.0 |= value;
    }
    /// If set, DEI_VAL replaces the classified DEI value if the entry is matched.
    pub fn dei_ena(&self) -> u32 {
        (self.0 & 0x4) >> 2
    }
    pub fn set_dei_ena(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 2;
        self.0 &= !0x4;
        self.0 |= value;
    }
    /// If set, DP_VAL replaces the classified DP level if the entry is matched.
    pub fn dp_ena(&self) -> u32 {
        (self.0 & 0x20) >> 5
    }
    pub fn set_dp_ena(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 5;
        self.0 &= !0x20;
        self.0 |= value;
    }
    /// If set, DSCP_VAL replaces the classified DSCP value if the entry is matched.
    pub fn dscp_ena(&self) -> u32 {
        self.0 & 0x1
    }
    pub fn set_dscp_ena(&mut self, value: u32) {
        assert!(value <= 0x1);
        self.0 &= !0x1;
        self.0 |= value;
    }
    /// If set, PATH_COSID_VAL and PATH_COLOR_VAL are used if the entry is matched.
    pub fn path_ena(&self) -> u32 {
        (self.0 & 0x80) >> 7
    }
    pub fn set_path_ena(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 7;
        self.0 &= !0x80;
        self.0 |= value;
    }
    /// If set, PCP_VAL replaces the classified PCP value if the entry is matched.
    pub fn pcp_ena(&self) -> u32 {
        (self.0 & 0x2) >> 1
    }
    pub fn set_pcp_ena(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 1;
        self.0 &= !0x2;
        self.0 |= value;
    }
    /// If set, QOS_VAL replaces the classified QoS class if the entry is matched.
    pub fn qos_ena(&self) -> u32 {
        (self.0 & 0x8) >> 3
    }
    pub fn set_qos_ena(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 3;
        self.0 &= !0x8;
        self.0 |= value;
    }
    /// If set, TC_VAL replaces the classified TC bits if the entry is matched.
    pub fn tc_ena(&self) -> u32 {
        (self.0 & 0x40) >> 6
    }
    pub fn set_tc_ena(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 6;
        self.0 &= !0x40;
        self.0 |= value;
    }
}
