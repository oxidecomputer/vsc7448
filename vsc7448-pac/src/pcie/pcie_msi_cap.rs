// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Based on mesa-v2021.09 (https://github.com/microchip-ung/mesa/) which has
// the following copyright and license:
//
// Copyright (c) 2004-2021 Microchip Technology Inc. and its subsidiaries.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// This is an autogenerated file; do not edit by hand!
use derive_more::{From, Into};
/// Word offset 1
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct MSI_LOWER_32(u32);
impl MSI_LOWER_32 {
    #[inline(always)]
    pub fn pci_msi_lower_32(&self) -> u32 {
        (self.0 & 0xfffffffc) >> 2
    }
    #[inline(always)]
    pub fn set_pci_msi_lower_32(&mut self, value: u32) {
        assert!(value <= 0x3fffffff);
        let value = value << 2;
        self.0 &= !0xfffffffc;
        self.0 |= value;
    }
}
/// Word offset 5
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct MSI_PENDING_BIT(u32);
impl MSI_PENDING_BIT {
    #[inline(always)]
    pub fn pci_msi_pending_bit(&self) -> u32 {
        self.0
    }
    #[inline(always)]
    pub fn set_pci_msi_pending_bit(&mut self, value: u32) {
        self.0 = value;
    }
}
/// Word offset 2
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct MSI_UPPER_32(u32);
impl MSI_UPPER_32 {
    #[inline(always)]
    pub fn pci_msi_upper_32(&self) -> u32 {
        self.0
    }
    #[inline(always)]
    pub fn set_pci_msi_upper_32(&mut self, value: u32) {
        self.0 = value;
    }
}
/// Word offset 0
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct PCI_MSI_CAP_ID_NEXT_CTRL(u32);
impl PCI_MSI_CAP_ID_NEXT_CTRL {
    #[inline(always)]
    pub fn pci_msi_64_bit_addr_cap(&self) -> u32 {
        (self.0 & 0x800000) >> 23
    }
    #[inline(always)]
    pub fn set_pci_msi_64_bit_addr_cap(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 23;
        self.0 &= !0x800000;
        self.0 |= value;
    }
    #[inline(always)]
    pub fn pci_msi_cap_id(&self) -> u32 {
        self.0 & 0xff
    }
    #[inline(always)]
    pub fn set_pci_msi_cap_id(&mut self, value: u32) {
        assert!(value <= 0xff);
        self.0 &= !0xff;
        self.0 |= value;
    }
    #[inline(always)]
    pub fn pci_msi_cap_next_offset(&self) -> u32 {
        (self.0 & 0xff00) >> 8
    }
    #[inline(always)]
    pub fn set_pci_msi_cap_next_offset(&mut self, value: u32) {
        assert!(value <= 0xff);
        let value = value << 8;
        self.0 &= !0xff00;
        self.0 |= value;
    }
    #[inline(always)]
    pub fn pci_msi_enable(&self) -> u32 {
        (self.0 & 0x10000) >> 16
    }
    #[inline(always)]
    pub fn set_pci_msi_enable(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 16;
        self.0 &= !0x10000;
        self.0 |= value;
    }
    #[inline(always)]
    pub fn pci_msi_multiple_msg_cap(&self) -> u32 {
        (self.0 & 0xe0000) >> 17
    }
    #[inline(always)]
    pub fn set_pci_msi_multiple_msg_cap(&mut self, value: u32) {
        assert!(value <= 0x7);
        let value = value << 17;
        self.0 &= !0xe0000;
        self.0 |= value;
    }
    #[inline(always)]
    pub fn pci_msi_multiple_msg_en(&self) -> u32 {
        (self.0 & 0x700000) >> 20
    }
    #[inline(always)]
    pub fn set_pci_msi_multiple_msg_en(&mut self, value: u32) {
        assert!(value <= 0x7);
        let value = value << 20;
        self.0 &= !0x700000;
        self.0 |= value;
    }
    #[inline(always)]
    pub fn pci_pvm_support(&self) -> u32 {
        (self.0 & 0x1000000) >> 24
    }
    #[inline(always)]
    pub fn set_pci_pvm_support(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 24;
        self.0 &= !0x1000000;
        self.0 |= value;
    }
}
