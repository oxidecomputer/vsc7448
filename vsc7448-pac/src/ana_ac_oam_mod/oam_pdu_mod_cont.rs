// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Based on mesa-v2021.09 (https://github.com/microchip-ung/mesa/) which has
// the following copyright and license:
//
// Copyright (c) 2004-2021 Microchip Technology Inc. and its subsidiaries.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// This is an autogenerated file; do not edit by hand!
use derive_more::{From, Into};
/// Temp CCM-LM info
#[derive(Copy, Clone, Debug, Eq, PartialEq, From, Into)]
pub struct CCM_LM_INFO_REG(u32);
impl CCM_LM_INFO_REG {
    /// Indicates whether this entry in the RAM contains valid CCM-LM sample values.
    #[inline(always)]
    pub fn ccm_lm_info_vld(&self) -> u32 {
        (self.0 & 0x800) >> 11
    }
    #[inline(always)]
    pub fn set_ccm_lm_info_vld(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 11;
        self.0 &= !0x800;
        self.0 |= value;
    }
    /// The number of the VOE for which the LM information was received.
    #[inline(always)]
    pub fn ccm_lm_voe_idx(&self) -> u32 {
        self.0 & 0x7ff
    }
    #[inline(always)]
    pub fn set_ccm_lm_voe_idx(&mut self, value: u32) {
        assert!(value <= 0x7ff);
        self.0 &= !0x7ff;
        self.0 |= value;
    }
}
/// CCM-LM sample
///
/// Contains the sampled value of CCM_LM.rx_fc_b from the last valid CCM_LM frame.
#[derive(Copy, Clone, Debug, Eq, PartialEq, From, Into)]
pub struct CCM_LM_RX_B_REG(u32);
impl CCM_LM_RX_B_REG {
    /// Contains the sampled value of CCM_LM.rx_fc_b from the last valid CCM_LM frame.
    #[inline(always)]
    pub fn ccm_lm_rx_b(&self) -> u32 {
        self.0
    }
    #[inline(always)]
    pub fn set_ccm_lm_rx_b(&mut self, value: u32) {
        self.0 = value;
    }
}
/// CCM-LM sample
///
/// Contains the sampled value of CCM_LM.tx_fc_b from the last valid CCM_LM frame.
#[derive(Copy, Clone, Debug, Eq, PartialEq, From, Into)]
pub struct CCM_LM_TX_B_REG(u32);
impl CCM_LM_TX_B_REG {
    /// Contains the sampled value of CCM_LM.tx_fc_b from the last valid CCM_LM frame.
    #[inline(always)]
    pub fn ccm_lm_tx_b(&self) -> u32 {
        self.0
    }
    #[inline(always)]
    pub fn set_ccm_lm_tx_b(&mut self, value: u32) {
        self.0 = value;
    }
}
/// Temp LM cnt
#[derive(Copy, Clone, Debug, Eq, PartialEq, From, Into)]
pub struct LM_CNT_FRAME(u32);
impl LM_CNT_FRAME {
    /// Determines if the current frame should be counted by the Path LM counter, based on the color / mapping and possibly being killed in the ingress DLB.
    #[inline(always)]
    pub fn path_cnt_frm(&self) -> u32 {
        self.0 & 0x1
    }
    #[inline(always)]
    pub fn set_path_cnt_frm(&mut self, value: u32) {
        assert!(value <= 0x1);
        self.0 &= !0x1;
        self.0 |= value;
    }
    /// Determines if the current frame should be counted by the Service LM counter, based on the color / mapping and possibly being killed in the ingress DLB.
    #[inline(always)]
    pub fn srv_cnt_frm(&self) -> u32 {
        (self.0 & 0x2) >> 1
    }
    #[inline(always)]
    pub fn set_srv_cnt_frm(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 1;
        self.0 &= !0x2;
        self.0 |= value;
    }
}
/// LM temp count
#[derive(Copy, Clone, Debug, Eq, PartialEq, From, Into)]
pub struct TEMP_CNT_REG(u32);
impl TEMP_CNT_REG {
    #[inline(always)]
    pub fn temp_cnt_val(&self) -> u32 {
        self.0 & 0xffff
    }
    #[inline(always)]
    pub fn set_temp_cnt_val(&mut self, value: u32) {
        assert!(value <= 0xffff);
        self.0 &= !0xffff;
        self.0 |= value;
    }
}
