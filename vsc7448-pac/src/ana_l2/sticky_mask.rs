// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Based on mesa-v2021.09 (https://github.com/microchip-ung/mesa/) which has
// the following copyright and license:
//
// Copyright (c) 2004-2021 Microchip Technology Inc. and its subsidiaries.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// This is an autogenerated file; do not edit by hand!
use derive_more::{From, Into};
/// Sticky diagnostic counter mask
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct STICKY_MASK(u32);
impl STICKY_MASK {
    /// Mask count of sticky event.
    ///
    /// 0: Disable event count 1: Enable event count
    #[inline(always)]
    pub fn auto_lrn_rate_exceed_sticky_mask(&self) -> u32 {
        (self.0 & 0x8000) >> 15
    }
    #[inline(always)]
    pub fn set_auto_lrn_rate_exceed_sticky_mask(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 15;
        self.0 &= !0x8000;
        self.0 |= value;
    }
    /// Mask count of sticky event.
    ///
    /// 0: Disable event count 1: Enable event count
    #[inline(always)]
    pub fn drop_unknown_src_sticky_mask(&self) -> u32 {
        (self.0 & 0x4) >> 2
    }
    #[inline(always)]
    pub fn set_drop_unknown_src_sticky_mask(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 2;
        self.0 &= !0x4;
        self.0 |= value;
    }
    /// Mask count of sticky event.
    ///
    /// 0: Disable event count 1: Enable event count
    #[inline(always)]
    pub fn fwd_entry_found_sticky_mask(&self) -> u32 {
        (self.0 & 0x8) >> 3
    }
    #[inline(always)]
    pub fn set_fwd_entry_found_sticky_mask(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 3;
        self.0 &= !0x8;
        self.0 |= value;
    }
    /// Mask count of sticky event.
    ///
    /// 0: Disable event count 1: Enable event count
    #[inline(always)]
    pub fn fwd_flood_kill_sticky_mask(&self) -> u32 {
        (self.0 & 0x4000) >> 14
    }
    #[inline(always)]
    pub fn set_fwd_flood_kill_sticky_mask(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 14;
        self.0 &= !0x4000;
        self.0 |= value;
    }
    /// Mask count of sticky event.
    ///
    /// 0: Disable event count 1: Enable event count
    #[inline(always)]
    pub fn fwd_flood_sticky_mask(&self) -> u32 {
        (self.0 & 0x10) >> 4
    }
    #[inline(always)]
    pub fn set_fwd_flood_sticky_mask(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 4;
        self.0 &= !0x10;
        self.0 |= value;
    }
    /// Mask count of sticky event.
    ///
    /// 0: Disable event count 1: Enable event count
    #[inline(always)]
    pub fn global_to_global_portmove_sticky_mask(&self) -> u32 {
        (self.0 & 0x100) >> 8
    }
    #[inline(always)]
    pub fn set_global_to_global_portmove_sticky_mask(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 8;
        self.0 &= !0x100;
        self.0 |= value;
    }
    /// Mask count of sticky event.
    ///
    /// 0: Disable event count 1: Enable event count
    #[inline(always)]
    pub fn global_to_local_portmove_sticky_mask(&self) -> u32 {
        (self.0 & 0x80) >> 7
    }
    #[inline(always)]
    pub fn set_global_to_local_portmove_sticky_mask(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 7;
        self.0 &= !0x80;
        self.0 |= value;
    }
    /// Mask count of sticky event.
    ///
    /// 0: Disable event count 1: Enable event count
    #[inline(always)]
    pub fn learn_known_sticky_mask(&self) -> u32 {
        (self.0 & 0x2) >> 1
    }
    #[inline(always)]
    pub fn set_learn_known_sticky_mask(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 1;
        self.0 &= !0x2;
        self.0 |= value;
    }
    /// Mask count of sticky event.
    ///
    /// 0: Disable event count 1: Enable event count
    #[inline(always)]
    pub fn learn_unknown_sticky_mask(&self) -> u32 {
        self.0 & 0x1
    }
    #[inline(always)]
    pub fn set_learn_unknown_sticky_mask(&mut self, value: u32) {
        assert!(value <= 0x1);
        self.0 &= !0x1;
        self.0 |= value;
    }
    /// Mask count of sticky event.
    ///
    /// 0: Disable event count 1: Enable event count
    #[inline(always)]
    pub fn local_to_global_portmove_sticky_mask(&self) -> u32 {
        (self.0 & 0x40) >> 6
    }
    #[inline(always)]
    pub fn set_local_to_global_portmove_sticky_mask(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 6;
        self.0 &= !0x40;
        self.0 |= value;
    }
    /// Mask count of sticky event.
    ///
    /// 0: Disable event count 1: Enable event count
    #[inline(always)]
    pub fn local_to_local_portmove_sticky_mask(&self) -> u32 {
        (self.0 & 0x20) >> 5
    }
    #[inline(always)]
    pub fn set_local_to_local_portmove_sticky_mask(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 5;
        self.0 &= !0x20;
        self.0 |= value;
    }
    /// Mask count of sticky event.
    ///
    /// 0: Disable event count 1: Enable event count
    #[inline(always)]
    pub fn local_to_remote_portmove_sticky_mask(&self) -> u32 {
        (self.0 & 0x800) >> 11
    }
    #[inline(always)]
    pub fn set_local_to_remote_portmove_sticky_mask(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 11;
        self.0 &= !0x800;
        self.0 |= value;
    }
    /// Mask count of sticky event.
    ///
    /// 0: Disable event count 1: Enable event count
    #[inline(always)]
    pub fn remote_to_local_portmove_sticky_mask(&self) -> u32 {
        (self.0 & 0x400) >> 10
    }
    #[inline(always)]
    pub fn set_remote_to_local_portmove_sticky_mask(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 10;
        self.0 &= !0x400;
        self.0 |= value;
    }
    /// Mask count of sticky event.
    ///
    /// 0: Disable event count 1: Enable event count
    #[inline(always)]
    pub fn remote_to_remote_portmove_sticky_mask(&self) -> u32 {
        (self.0 & 0x200) >> 9
    }
    #[inline(always)]
    pub fn set_remote_to_remote_portmove_sticky_mask(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 9;
        self.0 &= !0x200;
        self.0 |= value;
    }
    /// Mask count of sticky event.
    ///
    /// 0: Disable event count 1: Enable event count
    #[inline(always)]
    pub fn src_ignore_sticky_mask(&self) -> u32 {
        (self.0 & 0x1000) >> 12
    }
    #[inline(always)]
    pub fn set_src_ignore_sticky_mask(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 12;
        self.0 &= !0x1000;
        self.0 |= value;
    }
    /// Mask count of sticky event.
    ///
    /// 0: Disable event count 1: Enable event count
    #[inline(always)]
    pub fn vlan_ignore_sticky_mask(&self) -> u32 {
        (self.0 & 0x2000) >> 13
    }
    #[inline(always)]
    pub fn set_vlan_ignore_sticky_mask(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 13;
        self.0 &= !0x2000;
        self.0 |= value;
    }
}
