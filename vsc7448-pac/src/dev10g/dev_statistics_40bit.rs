// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Based on mesa-v2021.09 (https://github.com/microchip-ung/mesa/) which has
// the following copyright and license:
//
// Copyright (c) 2004-2021 Microchip Technology Inc. and its subsidiaries.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// This is an autogenerated file; do not edit by hand!
use derive_more::{From, Into};
/// Rx Bad Byte Counter
#[derive(Copy, Clone, Debug, Eq, PartialEq, From, Into)]
pub struct RX_BAD_BYTES_CNT(u32);
impl RX_BAD_BYTES_CNT {
    /// The number of received bytes in bad frames.
    ///
    /// Counter can be written by SW.
    #[inline(always)]
    pub fn rx_bad_bytes_cnt(&self) -> u32 {
        self.0
    }
    #[inline(always)]
    pub fn set_rx_bad_bytes_cnt(&mut self, value: u32) {
        self.0 = value;
    }
}
/// Rx Bad Bytes Counter - MSB part
///
/// The number of received bytes in bad frames -  MSBs only.
#[derive(Copy, Clone, Debug, Eq, PartialEq, From, Into)]
pub struct RX_BAD_BYTES_MSB_CNT(u32);
impl RX_BAD_BYTES_MSB_CNT {
    /// The number of received bytes in bad frames - MSBs only.
    ///
    /// Counter can be written by SW.
    #[inline(always)]
    pub fn rx_bad_bytes_msb_cnt(&self) -> u32 {
        self.0 & 0xff
    }
    #[inline(always)]
    pub fn set_rx_bad_bytes_msb_cnt(&mut self, value: u32) {
        debug_assert!(value <= 0xff);
        self.0 &= !0xff;
        self.0 |= value;
    }
}
/// Rx Byte Counter
#[derive(Copy, Clone, Debug, Eq, PartialEq, From, Into)]
pub struct RX_IN_BYTES_CNT(u32);
impl RX_IN_BYTES_CNT {
    /// The number of bytes received (good, bad, and framing).
    ///
    /// Counter can be written by SW.
    #[inline(always)]
    pub fn rx_in_bytes_cnt(&self) -> u32 {
        self.0
    }
    #[inline(always)]
    pub fn set_rx_in_bytes_cnt(&mut self, value: u32) {
        self.0 = value;
    }
}
/// Rx In Bytes Counter - MSB part
///
/// The number of bytes received (good, bad. Framing). MSB s only)
#[derive(Copy, Clone, Debug, Eq, PartialEq, From, Into)]
pub struct RX_IN_BYTES_MSB_CNT(u32);
impl RX_IN_BYTES_MSB_CNT {
    /// The number of bytes received (good, bad, and framing) - MSBs only
    ///
    /// Counter can be written by SW.
    #[inline(always)]
    pub fn rx_in_bytes_msb_cnt(&self) -> u32 {
        self.0 & 0xff
    }
    #[inline(always)]
    pub fn set_rx_in_bytes_msb_cnt(&mut self, value: u32) {
        debug_assert!(value <= 0xff);
        self.0 &= !0xff;
        self.0 |= value;
    }
}
/// Rx OK Byte Counter
#[derive(Copy, Clone, Debug, Eq, PartialEq, From, Into)]
pub struct RX_OK_BYTES_CNT(u32);
impl RX_OK_BYTES_CNT {
    /// The number of received bytes in good frames.
    ///
    /// Counter can be written by SW.
    #[inline(always)]
    pub fn rx_ok_bytes_cnt(&self) -> u32 {
        self.0
    }
    #[inline(always)]
    pub fn set_rx_ok_bytes_cnt(&mut self, value: u32) {
        self.0 = value;
    }
}
/// Rx Ok Bytes Counter - MSB part
///
/// The number of received bytes in good frames - MSBs only
#[derive(Copy, Clone, Debug, Eq, PartialEq, From, Into)]
pub struct RX_OK_BYTES_MSB_CNT(u32);
impl RX_OK_BYTES_MSB_CNT {
    /// The numberof received bytes in good frames - MSBs only.
    ///
    /// Counter can be written by SW.
    #[inline(always)]
    pub fn rx_ok_bytes_msb_cnt(&self) -> u32 {
        self.0 & 0xff
    }
    #[inline(always)]
    pub fn set_rx_ok_bytes_msb_cnt(&mut self, value: u32) {
        debug_assert!(value <= 0xff);
        self.0 &= !0xff;
        self.0 |= value;
    }
}
/// Tx OK Byte Counter
#[derive(Copy, Clone, Debug, Eq, PartialEq, From, Into)]
pub struct TX_OK_BYTES_CNT(u32);
impl TX_OK_BYTES_CNT {
    /// The number of bytes transmitted successfully.
    ///
    /// Counter can be written by SW.
    #[inline(always)]
    pub fn tx_ok_bytes_cnt(&self) -> u32 {
        self.0
    }
    #[inline(always)]
    pub fn set_tx_ok_bytes_cnt(&mut self, value: u32) {
        self.0 = value;
    }
}
/// Tx OK Bytes Counter - MSB partTx OK Bytes Counter - MSB
///
/// The number of bytes transmitted - MSBs only.
#[derive(Copy, Clone, Debug, Eq, PartialEq, From, Into)]
pub struct TX_OK_BYTES_MSB_CNT(u32);
impl TX_OK_BYTES_MSB_CNT {
    /// The numbe rof transmitted bytes transmitted successfully - MSBs only.
    ///
    /// Counter can be written by SW.
    #[inline(always)]
    pub fn tx_ok_bytes_msb_cnt(&self) -> u32 {
        self.0 & 0xff
    }
    #[inline(always)]
    pub fn set_tx_ok_bytes_msb_cnt(&mut self, value: u32) {
        debug_assert!(value <= 0xff);
        self.0 &= !0xff;
        self.0 |= value;
    }
}
/// Tx Byte Counter
#[derive(Copy, Clone, Debug, Eq, PartialEq, From, Into)]
pub struct TX_OUT_BYTES_CNT(u32);
impl TX_OUT_BYTES_CNT {
    /// The number of bytes transmitted (good, bad and framing).
    ///
    /// Counter can be written by SW.
    #[inline(always)]
    pub fn tx_out_bytes_cnt(&self) -> u32 {
        self.0
    }
    #[inline(always)]
    pub fn set_tx_out_bytes_cnt(&mut self, value: u32) {
        self.0 = value;
    }
}
/// Tx Out Bytes Counter - MSB part
///
/// The number of bytes transmitted (good, bad, and framing) - MSBs only
#[derive(Copy, Clone, Debug, Eq, PartialEq, From, Into)]
pub struct TX_OUT_BYTES_MSB_CNT(u32);
impl TX_OUT_BYTES_MSB_CNT {
    /// The number of bytes transmitted (good, bad, framing) - MSBs only.
    ///
    /// Counter can be written by SW.
    #[inline(always)]
    pub fn tx_out_bytes_msb_cnt(&self) -> u32 {
        self.0 & 0xff
    }
    #[inline(always)]
    pub fn set_tx_out_bytes_msb_cnt(&mut self, value: u32) {
        debug_assert!(value <= 0xff);
        self.0 &= !0xff;
        self.0 |= value;
    }
}
