// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Based on mesa-v2021.09 (https://github.com/microchip-ung/mesa/) which has
// the following copyright and license:
//
// Copyright (c) 2004-2021 Microchip Technology Inc. and its subsidiaries.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// This is an autogenerated file; do not edit by hand!
use derive_more::{From, Into};

/// Register `LL_TAG_REMARK_CFG`
///
/// Configure remarking of VLAN tags in MPLS link layer
#[derive(From, Into)]
pub struct LL_TAG_REMARK_CFG(u32);
impl LL_TAG_REMARK_CFG {
    /// Selects DEI for MPLS encapsulation tag Idx0:  TAG_A, Idx1:	TAG_B

    ///

    /// 0: Classified DEI 1: Encapsulation TAG_DEI_VAL:n 2: DP: REW::DP_MAP.DP 3: Reserved 4: Mapped using mapping table 0, otherwise use LL_TAG_VAL[N].TAG_DEI_VAL 5: Mapped using mapping table 1, otherwise use mapping table 0 6: Mapped using mapping table 2, otherwise use LL_TAG_VAL[N].TAG_DEI_VAL 7: Mapped using mapping table 3, otherwise use mapping table 2
    pub fn tag_dei_sel(&self) -> u32 {
        (self.0 & 0xe) >> 1
    }
    pub fn set_tag_dei_sel(&mut self, value: u32) {
        let value = value << 1;
        assert!(value <= 0xe);
        self.0 &= !0xe;
        self.0 |= value;
    }
    /// Selects PCP for MPLS encapsulation tag Idx0:  TAG_A, Idx1:	TAG_B

    ///

    /// 0: Classified PCP 1: Encapsulation TAG_PCP_VAL:n 2-3: Reserved 4: Mapped using mapping table 0, otherwise use LL_TAG_VAL[N].TAG_PCP_VAL 5: Mapped using mapping table 1, otherwise use mapping table 0 6: Mapped using mapping table 2, otherwise use LL_TAG_VAL[N].TAG_PCP_VAL 7: Mapped using mapping table 3, otherwise use mapping table 2
    pub fn tag_pcp_sel(&self) -> u32 {
        (self.0 & 0x70) >> 4
    }
    pub fn set_tag_pcp_sel(&mut self, value: u32) {
        let value = value << 4;
        assert!(value <= 0x70);
        self.0 &= !0x70;
        self.0 |= value;
    }
    /// Selects TPID for MPLS encapsulation tag Idx0:  TAG_A, Idx1:	TAG_B

    ///

    /// 0: Encapsulation LL_TAG_VAL[N].TAG_TPID 1: Classified.  ANA controls via IFH: If ifh.encap.tag_tipd = STD_TPID: If ifh.vstax.tag_type = 0 then 0x8100 else LL_TAG_VAL[N].TAG_TPID if ifh.encap.tag_tipd > 0: Custom TPID 1 to 3 configured by  REW::TPID_CFG[N].TPID_VAL
    pub fn tag_tpid_sel(&self) -> u32 {
        (self.0 & 0x1) >> 0
    }
    pub fn set_tag_tpid_sel(&mut self, value: u32) {
        let value = value << 0;
        assert!(value <= 0x1);
        self.0 &= !0x1;
        self.0 |= value;
    }
    /// Selects VID for MPLS encapsulation tag Idx0:  TAG_A, Idx1:	TAG_B

    ///

    /// 0: Classified VID + TAG_VID_VAL:n 1: TAG_VID_VAL:n
    pub fn tag_vid_sel(&self) -> u32 {
        (self.0 & 0x80) >> 7
    }
    pub fn set_tag_vid_sel(&mut self, value: u32) {
        let value = value << 7;
        assert!(value <= 0x80);
        self.0 &= !0x80;
        self.0 |= value;
    }
}
