// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Based on mesa-v2021.09 (https://github.com/microchip-ung/mesa/) which has
// the following copyright and license:
//
// Copyright (c) 2004-2021 Microchip Technology Inc. and its subsidiaries.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// This is an autogenerated file; do not edit by hand!
use derive_more::{From, Into};
/// 1588 configuration
///
/// Selects ingress PTP mode of the CPU and virtual device ports. Replication n configures port 53+n.
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct PTP_CPUVD_MODE_CFG(u32);
impl PTP_CPUVD_MODE_CFG {
    /// Sets the time domain this port belongs to.
    #[inline]
    pub fn ptp_dom_val(&self) -> u32 {
        self.0 & 0x3
    }
    #[inline]
    pub fn set_ptp_dom_val(&mut self, value: u32) {
        assert!(value <= 0x3);
        self.0 &= !0x3;
        self.0 |= value;
    }
    /// PTP operation mode for frames.
    ///
    /// 0: Front port 1: Backplane port using RSRV field 30 bit TS transfer 2: Backplane port using RSRV field 32 bit TS transfer 3: Backplane port using CF field for 44 bit TS transfer 4: Backplane port using CF field for 48 bit TS transfer 5: Monitor port. Frame updated to arrival stamper. 6: PTP Disabled port
    #[inline]
    pub fn ptp_mode_val(&self) -> u32 {
        (self.0 & 0x1c) >> 2
    }
    #[inline]
    pub fn set_ptp_mode_val(&mut self, value: u32) {
        assert!(value <= 0x7);
        let value = value << 2;
        self.0 &= !0x1c;
        self.0 |= value;
    }
}
/// PTP reserved field check
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct PTP_RSRV_NOT_ZERO(u32);
impl PTP_RSRV_NOT_ZERO {
    /// Register contains one bit per port being set when the port has received a frame with non-zero reserved bytes field This register covers ports 0-31
    #[inline]
    pub fn ptp_rsrv_not_zero(&self) -> u32 {
        self.0
    }
    #[inline]
    pub fn set_ptp_rsrv_not_zero(&mut self, value: u32) {
        self.0 = value;
    }
}
/// PTP reserved field check
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct PTP_RSRV_NOT_ZERO_1(u32);
impl PTP_RSRV_NOT_ZERO_1 {
    /// This register covers ports 32-56. See PTP_RSRV_NOT_ZERO for description.
    #[inline]
    pub fn ptp_rsrv_not_zero_1(&self) -> u32 {
        self.0 & 0x1ffffff
    }
    #[inline]
    pub fn set_ptp_rsrv_not_zero_1(&mut self, value: u32) {
        assert!(value <= 0x1ffffff);
        self.0 &= !0x1ffffff;
        self.0 |= value;
    }
}
/// Configuration register for PTP stamping
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct PTP_TWOSTEP_CTRL(u32);
impl PTP_TWOSTEP_CTRL {
    /// Write one to advance the stamp queue to the next available.
    #[inline]
    pub fn ptp_nxt(&self) -> u32 {
        (self.0 & 0x800) >> 11
    }
    #[inline]
    pub fn set_ptp_nxt(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 11;
        self.0 &= !0x800;
        self.0 |= value;
    }
    /// The stamp is overflown, and some stamps are lost.
    #[inline]
    pub fn ptp_ovfl(&self) -> u32 {
        self.0 & 0x1
    }
    #[inline]
    pub fn set_ptp_ovfl(&mut self, value: u32) {
        assert!(value <= 0x1);
        self.0 &= !0x1;
        self.0 |= value;
    }
    /// If the fifo is overflown, additional stamps will overwrite older.
    #[inline]
    pub fn ptp_ovwr_ena(&self) -> u32 {
        (self.0 & 0x1000) >> 12
    }
    #[inline]
    pub fn set_ptp_ovwr_ena(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 12;
        self.0 &= !0x1000;
        self.0 |= value;
    }
    /// The stamp queue is non empty
    #[inline]
    pub fn ptp_vld(&self) -> u32 {
        (self.0 & 0x400) >> 10
    }
    #[inline]
    pub fn set_ptp_vld(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 10;
        self.0 &= !0x400;
        self.0 |= value;
    }
    /// Field contains the port number the stamp was made on
    #[inline]
    pub fn stamp_port(&self) -> u32 {
        (self.0 & 0x1fe) >> 1
    }
    #[inline]
    pub fn set_stamp_port(&mut self, value: u32) {
        assert!(value <= 0xff);
        let value = value << 1;
        self.0 &= !0x1fe;
        self.0 |= value;
    }
    /// Current stamp is an egress stamp
    #[inline]
    pub fn stamp_tx(&self) -> u32 {
        (self.0 & 0x200) >> 9
    }
    #[inline]
    pub fn set_stamp_tx(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 9;
        self.0 &= !0x200;
        self.0 |= value;
    }
}
/// Ingress time stamp
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct PTP_TWOSTEP_STAMP(u32);
impl PTP_TWOSTEP_STAMP {
    /// Contains the 32 bit timestamp.
    #[inline]
    pub fn stamp_nsec(&self) -> u32 {
        self.0
    }
    #[inline]
    pub fn set_stamp_nsec(&mut self, value: u32) {
        self.0 = value;
    }
}
