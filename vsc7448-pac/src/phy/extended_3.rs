// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Based on mesa-v2021.09 (https://github.com/microchip-ung/mesa/) which has
// the following copyright and license:
//
// Copyright (c) 2004-2021 Microchip Technology Inc. and its subsidiaries.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// This is an autogenerated file; do not edit by hand!
use derive_more::{From, Into};
#[derive(Copy, Clone, Debug, Eq, PartialEq, From, Into)]
pub struct MAC_SERDES_PCS_CONTROL(u16);
impl MAC_SERDES_PCS_CONTROL {
    #[inline(always)]
    pub fn aneg_ena(&self) -> u16 {
        (self.0 & 0x80) >> 7
    }
    #[inline(always)]
    pub fn set_aneg_ena(&mut self, value: u16) {
        assert!(value <= 0x1);
        let value = value << 7;
        self.0 &= !0x80;
        self.0 |= value;
    }
    #[inline(always)]
    pub fn fast_link_status_ena(&self) -> u16 {
        (self.0 & 0x10) >> 4
    }
    #[inline(always)]
    pub fn set_fast_link_status_ena(&mut self, value: u16) {
        assert!(value <= 0x1);
        let value = value << 4;
        self.0 &= !0x10;
        self.0 |= value;
    }
    #[inline(always)]
    pub fn force_adv_ability(&self) -> u16 {
        (self.0 & 0x800) >> 11
    }
    #[inline(always)]
    pub fn set_force_adv_ability(&mut self, value: u16) {
        assert!(value <= 0x1);
        let value = value << 11;
        self.0 &= !0x800;
        self.0 |= value;
    }
    #[inline(always)]
    pub fn inhibit_mac_odd_start_delay(&self) -> u16 {
        (self.0 & 0x4) >> 2
    }
    #[inline(always)]
    pub fn set_inhibit_mac_odd_start_delay(&mut self, value: u16) {
        assert!(value <= 0x1);
        let value = value << 2;
        self.0 &= !0x4;
        self.0 |= value;
    }
    #[inline(always)]
    pub fn inv_polarity_at_input(&self) -> u16 {
        (self.0 & 0x40) >> 6
    }
    #[inline(always)]
    pub fn set_inv_polarity_at_input(&mut self, value: u16) {
        assert!(value <= 0x1);
        let value = value << 6;
        self.0 &= !0x40;
        self.0 |= value;
    }
    #[inline(always)]
    pub fn inv_polarity_at_output(&self) -> u16 {
        (self.0 & 0x20) >> 5
    }
    #[inline(always)]
    pub fn set_inv_polarity_at_output(&mut self, value: u16) {
        assert!(value <= 0x1);
        let value = value << 5;
        self.0 &= !0x20;
        self.0 |= value;
    }
    #[inline(always)]
    pub fn mac_if_pd_ena(&self) -> u16 {
        (self.0 & 0x2000) >> 13
    }
    #[inline(always)]
    pub fn set_mac_if_pd_ena(&mut self, value: u16) {
        assert!(value <= 0x1);
        let value = value << 13;
        self.0 &= !0x2000;
        self.0 |= value;
    }
    #[inline(always)]
    pub fn sgmii_output_preamble(&self) -> u16 {
        (self.0 & 0x100) >> 8
    }
    #[inline(always)]
    pub fn set_sgmii_output_preamble(&mut self, value: u16) {
        assert!(value <= 0x1);
        let value = value << 8;
        self.0 &= !0x100;
        self.0 |= value;
    }
}
#[derive(Copy, Clone, Debug, Eq, PartialEq, From, Into)]
pub struct MAC_SERDES_PCS_STATUS(u16);
impl MAC_SERDES_PCS_STATUS {
    #[inline(always)]
    pub fn mac_aneg_complete(&self) -> u16 {
        (self.0 & 0x2) >> 1
    }
    #[inline(always)]
    pub fn set_mac_aneg_complete(&mut self, value: u16) {
        assert!(value <= 0x1);
        let value = value << 1;
        self.0 &= !0x2;
        self.0 |= value;
    }
    #[inline(always)]
    pub fn mac_cgbad(&self) -> u16 {
        (self.0 & 0x4000) >> 14
    }
    #[inline(always)]
    pub fn set_mac_cgbad(&mut self, value: u16) {
        assert!(value <= 0x1);
        let value = value << 14;
        self.0 &= !0x4000;
        self.0 |= value;
    }
    #[inline(always)]
    pub fn mac_fdx_adv(&self) -> u16 {
        (self.0 & 0x20) >> 5
    }
    #[inline(always)]
    pub fn set_mac_fdx_adv(&mut self, value: u16) {
        assert!(value <= 0x1);
        let value = value << 5;
        self.0 &= !0x20;
        self.0 |= value;
    }
    #[inline(always)]
    pub fn mac_hdx_adv(&self) -> u16 {
        (self.0 & 0x10) >> 4
    }
    #[inline(always)]
    pub fn set_mac_hdx_adv(&mut self, value: u16) {
        assert!(value <= 0x1);
        let value = value << 4;
        self.0 &= !0x10;
        self.0 |= value;
    }
    #[inline(always)]
    pub fn mac_link_status(&self) -> u16 {
        (self.0 & 0x4) >> 2
    }
    #[inline(always)]
    pub fn set_mac_link_status(&mut self, value: u16) {
        assert!(value <= 0x1);
        let value = value << 2;
        self.0 &= !0x4;
        self.0 |= value;
    }
    #[inline(always)]
    pub fn mac_lp_aneg_capable(&self) -> u16 {
        (self.0 & 0x8) >> 3
    }
    #[inline(always)]
    pub fn set_mac_lp_aneg_capable(&mut self, value: u16) {
        assert!(value <= 0x1);
        let value = value << 3;
        self.0 &= !0x8;
        self.0 |= value;
    }
    #[inline(always)]
    pub fn mac_lp_aneg_restart(&self) -> u16 {
        (self.0 & 0x800) >> 11
    }
    #[inline(always)]
    pub fn set_mac_lp_aneg_restart(&mut self, value: u16) {
        assert!(value <= 0x1);
        let value = value << 11;
        self.0 &= !0x800;
        self.0 |= value;
    }
    #[inline(always)]
    pub fn mac_pcs_sig_detect(&self) -> u16 {
        self.0 & 0x1
    }
    #[inline(always)]
    pub fn set_mac_pcs_sig_detect(&mut self, value: u16) {
        assert!(value <= 0x1);
        self.0 &= !0x1;
        self.0 |= value;
    }
    #[inline(always)]
    pub fn mac_sync_fail(&self) -> u16 {
        (self.0 & 0x8000) >> 15
    }
    #[inline(always)]
    pub fn set_mac_sync_fail(&mut self, value: u16) {
        assert!(value <= 0x1);
        let value = value << 15;
        self.0 &= !0x8000;
        self.0 |= value;
    }
    #[inline(always)]
    pub fn sgmii_align_error(&self) -> u16 {
        (self.0 & 0x1000) >> 12
    }
    #[inline(always)]
    pub fn set_sgmii_align_error(&mut self, value: u16) {
        assert!(value <= 0x1);
        let value = value << 12;
        self.0 &= !0x1000;
        self.0 |= value;
    }
}
#[derive(Copy, Clone, Debug, Eq, PartialEq, From, Into)]
pub struct MAC_SERDES_CLAUSE_37_ADVERTISED_ABILITY(pub u16);
#[derive(Copy, Clone, Debug, Eq, PartialEq, From, Into)]
pub struct REVERED_18(pub u16);
#[derive(Copy, Clone, Debug, Eq, PartialEq, From, Into)]
pub struct MAC_SERDES_STATUS(pub u16);
#[derive(Copy, Clone, Debug, Eq, PartialEq, From, Into)]
pub struct MEDIA_SERDES_TX_GOOD_PACKET_COUNTER(u16);
impl MEDIA_SERDES_TX_GOOD_PACKET_COUNTER {
    #[inline(always)]
    pub fn active(&self) -> u16 {
        (self.0 & 0x8000) >> 15
    }
    #[inline(always)]
    pub fn set_active(&mut self, value: u16) {
        assert!(value <= 0x1);
        let value = value << 15;
        self.0 &= !0x8000;
        self.0 |= value;
    }
    #[inline(always)]
    pub fn cnt(&self) -> u16 {
        self.0 & 0x1fff
    }
    #[inline(always)]
    pub fn set_cnt(&mut self, value: u16) {
        assert!(value <= 0x1fff);
        self.0 &= !0x1fff;
        self.0 |= value;
    }
}
#[derive(Copy, Clone, Debug, Eq, PartialEq, From, Into)]
pub struct MEDIA_SERDES_TX_CRC_ERROR_COUNTER(u16);
impl MEDIA_SERDES_TX_CRC_ERROR_COUNTER {
    #[inline(always)]
    pub fn cnt(&self) -> u16 {
        self.0 & 0x7f
    }
    #[inline(always)]
    pub fn set_cnt(&mut self, value: u16) {
        assert!(value <= 0x7f);
        self.0 &= !0x7f;
        self.0 |= value;
    }
    #[inline(always)]
    pub fn tx_preamble_fix(&self) -> u16 {
        (self.0 & 0x2000) >> 13
    }
    #[inline(always)]
    pub fn set_tx_preamble_fix(&mut self, value: u16) {
        assert!(value <= 0x1);
        let value = value << 13;
        self.0 &= !0x2000;
        self.0 |= value;
    }
    #[inline(always)]
    pub fn tx_select(&self) -> u16 {
        (self.0 & 0xc000) >> 14
    }
    #[inline(always)]
    pub fn set_tx_select(&mut self, value: u16) {
        assert!(value <= 0x3);
        let value = value << 14;
        self.0 &= !0xc000;
        self.0 |= value;
    }
}
#[derive(Copy, Clone, Debug, Eq, PartialEq, From, Into)]
pub struct MEDIA_SERDES_PCS_CONTROL(pub u16);
#[derive(Copy, Clone, Debug, Eq, PartialEq, From, Into)]
pub struct MEDIA_SERDES_PCS_STATUS(u16);
impl MEDIA_SERDES_PCS_STATUS {
    #[inline(always)]
    pub fn get_100basefx_proto_xfer_link_status(&self) -> u16 {
        (self.0 & 0x2000) >> 13
    }
    #[inline(always)]
    pub fn set_100basefx_proto_xfer_link_status(&mut self, value: u16) {
        assert!(value <= 0x1);
        let value = value << 13;
        self.0 &= !0x2000;
        self.0 |= value;
    }
    #[inline(always)]
    pub fn get_10mb_link_status(&self) -> u16 {
        (self.0 & 0x1000) >> 12
    }
    #[inline(always)]
    pub fn set_10mb_link_status(&mut self, value: u16) {
        assert!(value <= 0x1);
        let value = value << 12;
        self.0 &= !0x1000;
        self.0 |= value;
    }
    #[inline(always)]
    pub fn lp_aneg_cap(&self) -> u16 {
        (self.0 & 0x8) >> 3
    }
    #[inline(always)]
    pub fn set_lp_aneg_cap(&mut self, value: u16) {
        assert!(value <= 0x1);
        let value = value << 3;
        self.0 &= !0x8;
        self.0 |= value;
    }
    #[inline(always)]
    pub fn lp_full_duplex(&self) -> u16 {
        (self.0 & 0x20) >> 5
    }
    #[inline(always)]
    pub fn set_lp_full_duplex(&mut self, value: u16) {
        assert!(value <= 0x1);
        let value = value << 5;
        self.0 &= !0x20;
        self.0 |= value;
    }
    #[inline(always)]
    pub fn lp_half_duplex(&self) -> u16 {
        (self.0 & 0x10) >> 4
    }
    #[inline(always)]
    pub fn set_lp_half_duplex(&mut self, value: u16) {
        assert!(value <= 0x1);
        let value = value << 4;
        self.0 &= !0x10;
        self.0 |= value;
    }
    #[inline(always)]
    pub fn media_aneg_complete(&self) -> u16 {
        (self.0 & 0x2) >> 1
    }
    #[inline(always)]
    pub fn set_media_aneg_complete(&mut self, value: u16) {
        assert!(value <= 0x1);
        let value = value << 1;
        self.0 &= !0x2;
        self.0 |= value;
    }
    #[inline(always)]
    pub fn media_link_status(&self) -> u16 {
        (self.0 & 0x4) >> 2
    }
    #[inline(always)]
    pub fn set_media_link_status(&mut self, value: u16) {
        assert!(value <= 0x1);
        let value = value << 2;
        self.0 &= !0x4;
        self.0 |= value;
    }
    #[inline(always)]
    pub fn media_sig_det(&self) -> u16 {
        self.0 & 0x1
    }
    #[inline(always)]
    pub fn set_media_sig_det(&mut self, value: u16) {
        assert!(value <= 0x1);
        self.0 &= !0x1;
        self.0 |= value;
    }
}
#[derive(Copy, Clone, Debug, Eq, PartialEq, From, Into)]
pub struct MEDIA_SERDES_CLAUSE_37_LP_ABILITY(pub u16);
#[derive(Copy, Clone, Debug, Eq, PartialEq, From, Into)]
pub struct MEDIA_SERDES_STATUS(u16);
impl MEDIA_SERDES_STATUS {
    #[inline(always)]
    pub fn get_100fx_fefi_detect(&self) -> u16 {
        (self.0 & 0x2000) >> 13
    }
    #[inline(always)]
    pub fn set_100fx_fefi_detect(&mut self, value: u16) {
        assert!(value <= 0x1);
        let value = value << 13;
        self.0 &= !0x2000;
        self.0 |= value;
    }
    #[inline(always)]
    pub fn get_100fx_hls_detect(&self) -> u16 {
        (self.0 & 0x80) >> 7
    }
    #[inline(always)]
    pub fn set_100fx_hls_detect(&mut self, value: u16) {
        assert!(value <= 0x1);
        let value = value << 7;
        self.0 &= !0x80;
        self.0 |= value;
    }
    #[inline(always)]
    pub fn comma_detect(&self) -> u16 {
        (self.0 & 0x1000) >> 12
    }
    #[inline(always)]
    pub fn set_comma_detect(&mut self, value: u16) {
        assert!(value <= 0x1);
        let value = value << 12;
        self.0 &= !0x1000;
        self.0 |= value;
    }
    #[inline(always)]
    pub fn comma_realign(&self) -> u16 {
        (self.0 & 0x8000) >> 15
    }
    #[inline(always)]
    pub fn set_comma_realign(&mut self, value: u16) {
        assert!(value <= 0x1);
        let value = value << 15;
        self.0 &= !0x8000;
        self.0 |= value;
    }
    #[inline(always)]
    pub fn fiber_serdes_freq(&self) -> u16 {
        (self.0 & 0x40) >> 6
    }
    #[inline(always)]
    pub fn set_fiber_serdes_freq(&mut self, value: u16) {
        assert!(value <= 0x1);
        let value = value << 6;
        self.0 &= !0x40;
        self.0 |= value;
    }
    #[inline(always)]
    pub fn sig_detect(&self) -> u16 {
        (self.0 & 0x4000) >> 14
    }
    #[inline(always)]
    pub fn set_sig_detect(&mut self, value: u16) {
        assert!(value <= 0x1);
        let value = value << 14;
        self.0 &= !0x4000;
        self.0 |= value;
    }
}
#[derive(Copy, Clone, Debug, Eq, PartialEq, From, Into)]
pub struct MEDIA_MAC_SERDES_RX_GOOD_COUNTER(u16);
impl MEDIA_MAC_SERDES_RX_GOOD_COUNTER {
    #[inline(always)]
    pub fn cnt(&self) -> u16 {
        self.0 & 0x1fff
    }
    #[inline(always)]
    pub fn set_cnt(&mut self, value: u16) {
        assert!(value <= 0x1fff);
        self.0 &= !0x1fff;
        self.0 |= value;
    }
}
#[derive(Copy, Clone, Debug, Eq, PartialEq, From, Into)]
pub struct MEDIA_MAC_SERDES_RX_CRC_CRC_ERR_COUNTER(pub u16);
