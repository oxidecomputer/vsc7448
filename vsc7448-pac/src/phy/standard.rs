// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Based on mesa-v2021.09 (https://github.com/microchip-ung/mesa/) which has
// the following copyright and license:
//
// Copyright (c) 2004-2021 Microchip Technology Inc. and its subsidiaries.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// This is an autogenerated file; do not edit by hand!
use derive_more::{From, Into};
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct MODE_CONTROL(u16);
impl MODE_CONTROL {
    pub fn auto_neg_ena(&self) -> u16 {
        (self.0 & 0x1000) >> 12
    }
    pub fn set_auto_neg_ena(&mut self, value: u16) {
        let value = value << 12;
        assert!(value <= 0x1000);
        self.0 &= !0x1000;
        self.0 |= value;
    }
    pub fn isolate(&self) -> u16 {
        (self.0 & 0x400) >> 10
    }
    pub fn set_isolate(&mut self, value: u16) {
        let value = value << 10;
        assert!(value <= 0x400);
        self.0 &= !0x400;
        self.0 |= value;
    }
    pub fn get_loop(&self) -> u16 {
        (self.0 & 0x4000) >> 14
    }
    pub fn set_loop(&mut self, value: u16) {
        let value = value << 14;
        assert!(value <= 0x4000);
        self.0 &= !0x4000;
        self.0 |= value;
    }
    pub fn power_down(&self) -> u16 {
        (self.0 & 0x800) >> 11
    }
    pub fn set_power_down(&mut self, value: u16) {
        let value = value << 11;
        assert!(value <= 0x800);
        self.0 &= !0x800;
        self.0 |= value;
    }
    pub fn restart_auto_neg(&self) -> u16 {
        (self.0 & 0x200) >> 9
    }
    pub fn set_restart_auto_neg(&mut self, value: u16) {
        let value = value << 9;
        assert!(value <= 0x200);
        self.0 &= !0x200;
        self.0 |= value;
    }
    pub fn sw_reset(&self) -> u16 {
        (self.0 & 0x8000) >> 15
    }
    pub fn set_sw_reset(&mut self, value: u16) {
        let value = value << 15;
        assert!(value <= 0x8000);
        self.0 &= !0x8000;
        self.0 |= value;
    }
    pub fn unidirectional(&self) -> u16 {
        (self.0 & 0x20) >> 5
    }
    pub fn set_unidirectional(&mut self, value: u16) {
        let value = value << 5;
        assert!(value <= 0x20);
        self.0 &= !0x20;
        self.0 |= value;
    }
}
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct MODE_STATUS(pub u16);
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct IDENTIFIER_1(pub u16);
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct IDENTIFIER_2(pub u16);
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct DEVICE_AUTONEG_ADVERTISEMENT(u16);
impl DEVICE_AUTONEG_ADVERTISEMENT {
    pub fn get_100basetx_fdx(&self) -> u16 {
        (self.0 & 0x100) >> 8
    }
    pub fn set_100basetx_fdx(&mut self, value: u16) {
        let value = value << 8;
        assert!(value <= 0x100);
        self.0 &= !0x100;
        self.0 |= value;
    }
    pub fn get_100basetx_hdx(&self) -> u16 {
        (self.0 & 0x80) >> 7
    }
    pub fn set_100basetx_hdx(&mut self, value: u16) {
        let value = value << 7;
        assert!(value <= 0x80);
        self.0 &= !0x80;
        self.0 |= value;
    }
    pub fn get_10baset_fdx(&self) -> u16 {
        (self.0 & 0x40) >> 6
    }
    pub fn set_10baset_fdx(&mut self, value: u16) {
        let value = value << 6;
        assert!(value <= 0x40);
        self.0 &= !0x40;
        self.0 |= value;
    }
    pub fn get_10baset_hdx(&self) -> u16 {
        (self.0 & 0x20) >> 5
    }
    pub fn set_10baset_hdx(&mut self, value: u16) {
        let value = value << 5;
        assert!(value <= 0x20);
        self.0 &= !0x20;
        self.0 |= value;
    }
}
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct AUTONEGOTIATION_LINK_PARTNER_ABILITY(pub u16);
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct REG_1000BASE_T_CONTROL(u16);
impl REG_1000BASE_T_CONTROL {
    pub fn get_1000base_t_fdx_capability(&self) -> u16 {
        (self.0 & 0x200) >> 9
    }
    pub fn set_1000base_t_fdx_capability(&mut self, value: u16) {
        let value = value << 9;
        assert!(value <= 0x200);
        self.0 &= !0x200;
        self.0 |= value;
    }
    pub fn get_1000base_t_hdx_capability(&self) -> u16 {
        (self.0 & 0x100) >> 8
    }
    pub fn set_1000base_t_hdx_capability(&mut self, value: u16) {
        let value = value << 8;
        assert!(value <= 0x100);
        self.0 &= !0x100;
        self.0 |= value;
    }
}
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct REG_1000BASE_T_STATUS(pub u16);
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct MMD_EEE_ACCESS(pub u16);
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct MMD_ADDR_OR_DATA(pub u16);
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct BYPASS_CONTROL(u16);
impl BYPASS_CONTROL {
    pub fn disable_pari_swap_correction(&self) -> u16 {
        (self.0 & 0x20) >> 5
    }
    pub fn set_disable_pari_swap_correction(&mut self, value: u16) {
        let value = value << 5;
        assert!(value <= 0x20);
        self.0 &= !0x20;
        self.0 |= value;
    }
    pub fn hp_auto_mdix_at_force(&self) -> u16 {
        (self.0 & 0x80) >> 7
    }
    pub fn set_hp_auto_mdix_at_force(&mut self, value: u16) {
        let value = value << 7;
        assert!(value <= 0x80);
        self.0 &= !0x80;
        self.0 |= value;
    }
}
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct ERROR_COUNTER_1(u16);
impl ERROR_COUNTER_1 {
    pub fn get_100_1000basetx_rx_err_cnt(&self) -> u16 {
        self.0 & 0x7f
    }
    pub fn set_100_1000basetx_rx_err_cnt(&mut self, value: u16) {
        assert!(value <= 0x7f);
        self.0 &= !0x7f;
        self.0 |= value;
    }
}
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct EXTENDED_CONTROL_AND_STATUS_20(pub u16);
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct ERROR_COUNTER_3(u16);
impl ERROR_COUNTER_3 {
    pub fn cu_media_link_disconn_err_cnt(&self) -> u16 {
        self.0 & 0x7f
    }
    pub fn set_cu_media_link_disconn_err_cnt(&mut self, value: u16) {
        assert!(value <= 0x7f);
        self.0 &= !0x7f;
        self.0 |= value;
    }
}
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct EXTENDED_CONTROL_AND_STATUS(u16);
impl EXTENDED_CONTROL_AND_STATUS {
    pub fn force_10base_t_high(&self) -> u16 {
        (self.0 & 0x8000) >> 15
    }
    pub fn set_force_10base_t_high(&mut self, value: u16) {
        let value = value << 15;
        assert!(value <= 0x8000);
        self.0 &= !0x8000;
        self.0 |= value;
    }
}
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct EXTENDED_PHY_CONTROL(u16);
impl EXTENDED_PHY_CONTROL {
    pub fn ams_enabled(&self) -> u16 {
        (self.0 & 0x400) >> 10
    }
    pub fn set_ams_enabled(&mut self, value: u16) {
        let value = value << 10;
        assert!(value <= 0x400);
        self.0 &= !0x400;
        self.0 |= value;
    }
    pub fn ams_override(&self) -> u16 {
        (self.0 & 0x3c) >> 6
    }
    pub fn set_ams_override(&mut self, value: u16) {
        let value = value << 6;
        assert!(value <= 0x3c);
        self.0 &= !0x3c;
        self.0 |= value;
    }
    pub fn ams_preference(&self) -> u16 {
        (self.0 & 0x800) >> 11
    }
    pub fn set_ams_preference(&mut self, value: u16) {
        let value = value << 11;
        assert!(value <= 0x800);
        self.0 &= !0x800;
        self.0 |= value;
    }
    pub fn far_end_loopback_mode(&self) -> u16 {
        (self.0 & 0x8) >> 3
    }
    pub fn set_far_end_loopback_mode(&mut self, value: u16) {
        let value = value << 3;
        assert!(value <= 0x8);
        self.0 &= !0x8;
        self.0 |= value;
    }
    pub fn mac_interface_mode(&self) -> u16 {
        (self.0 & 0x1000) >> 12
    }
    pub fn set_mac_interface_mode(&mut self, value: u16) {
        let value = value << 12;
        assert!(value <= 0x1000);
        self.0 &= !0x1000;
        self.0 |= value;
    }
    pub fn media_operating_mode(&self) -> u16 {
        (self.0 & 0xf8) >> 8
    }
    pub fn set_media_operating_mode(&mut self, value: u16) {
        let value = value << 8;
        assert!(value <= 0xf8);
        self.0 &= !0xf8;
        self.0 |= value;
    }
    pub fn rxclk_bug_15388(&self) -> u16 {
        (self.0 & 0x2000) >> 13
    }
    pub fn set_rxclk_bug_15388(&mut self, value: u16) {
        let value = value << 13;
        assert!(value <= 0x2000);
        self.0 &= !0x2000;
        self.0 |= value;
    }
}
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct EXTENDED_PHY_CONTROL_2(u16);
impl EXTENDED_PHY_CONTROL_2 {
    pub fn connector_loopback_mode(&self) -> u16 {
        self.0 & 0x1
    }
    pub fn set_connector_loopback_mode(&mut self, value: u16) {
        assert!(value <= 0x1);
        self.0 &= !0x1;
        self.0 |= value;
    }
}
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct INTERRUPT_MASK(u16);
impl INTERRUPT_MASK {
    pub fn ams_media_change_mask(&self) -> u16 {
        (self.0 & 0x10) >> 4
    }
    pub fn set_ams_media_change_mask(&mut self, value: u16) {
        let value = value << 4;
        assert!(value <= 0x10);
        self.0 &= !0x10;
        self.0 |= value;
    }
    pub fn auto_neg_complete_mask(&self) -> u16 {
        (self.0 & 0x400) >> 10
    }
    pub fn set_auto_neg_complete_mask(&mut self, value: u16) {
        let value = value << 10;
        assert!(value <= 0x400);
        self.0 &= !0x400;
        self.0 |= value;
    }
    pub fn auto_neg_error_mask(&self) -> u16 {
        (self.0 & 0x800) >> 11
    }
    pub fn set_auto_neg_error_mask(&mut self, value: u16) {
        let value = value << 11;
        assert!(value <= 0x800);
        self.0 &= !0x800;
        self.0 |= value;
    }
    pub fn extended_int_mask(&self) -> u16 {
        (self.0 & 0x20) >> 5
    }
    pub fn set_extended_int_mask(&mut self, value: u16) {
        let value = value << 5;
        assert!(value <= 0x20);
        self.0 &= !0x20;
        self.0 |= value;
    }
    pub fn false_carrier_int_mask(&self) -> u16 {
        (self.0 & 0x8) >> 3
    }
    pub fn set_false_carrier_int_mask(&mut self, value: u16) {
        let value = value << 3;
        assert!(value <= 0x8);
        self.0 &= !0x8;
        self.0 |= value;
    }
    pub fn fast_link_mask(&self) -> u16 {
        (self.0 & 0x80) >> 7
    }
    pub fn set_fast_link_mask(&mut self, value: u16) {
        let value = value << 7;
        assert!(value <= 0x80);
        self.0 &= !0x80;
        self.0 |= value;
    }
    pub fn fdx_state_change_mask(&self) -> u16 {
        (self.0 & 0x1000) >> 12
    }
    pub fn set_fdx_state_change_mask(&mut self, value: u16) {
        let value = value << 12;
        assert!(value <= 0x1000);
        self.0 &= !0x1000;
        self.0 |= value;
    }
    pub fn inline_pow_dev_detect_mask(&self) -> u16 {
        (self.0 & 0x200) >> 9
    }
    pub fn set_inline_pow_dev_detect_mask(&mut self, value: u16) {
        let value = value << 9;
        assert!(value <= 0x200);
        self.0 &= !0x200;
        self.0 |= value;
    }
    pub fn int_mask(&self) -> u16 {
        (self.0 & 0x8000) >> 15
    }
    pub fn set_int_mask(&mut self, value: u16) {
        let value = value << 15;
        assert!(value <= 0x8000);
        self.0 &= !0x8000;
        self.0 |= value;
    }
    pub fn link_mask(&self) -> u16 {
        (self.0 & 0x2000) >> 13
    }
    pub fn set_link_mask(&mut self, value: u16) {
        let value = value << 13;
        assert!(value <= 0x2000);
        self.0 &= !0x2000;
        self.0 |= value;
    }
    pub fn link_speed_ds_detect_mask(&self) -> u16 {
        (self.0 & 0x4) >> 2
    }
    pub fn set_link_speed_ds_detect_mask(&mut self, value: u16) {
        let value = value << 2;
        assert!(value <= 0x4);
        self.0 &= !0x4;
        self.0 |= value;
    }
    pub fn master_slave_res_err_mask(&self) -> u16 {
        (self.0 & 0x2) >> 1
    }
    pub fn set_master_slave_res_err_mask(&mut self, value: u16) {
        let value = value << 1;
        assert!(value <= 0x2);
        self.0 &= !0x2;
        self.0 |= value;
    }
    pub fn rx_er_int_mask(&self) -> u16 {
        self.0 & 0x1
    }
    pub fn set_rx_er_int_mask(&mut self, value: u16) {
        assert!(value <= 0x1);
        self.0 &= !0x1;
        self.0 |= value;
    }
    pub fn rx_fifo_overflow_int_mask(&self) -> u16 {
        (self.0 & 0x20) >> 5
    }
    pub fn set_rx_fifo_overflow_int_mask(&mut self, value: u16) {
        let value = value << 5;
        assert!(value <= 0x20);
        self.0 &= !0x20;
        self.0 |= value;
    }
    pub fn speed_state_change_mask(&self) -> u16 {
        (self.0 & 0x4000) >> 14
    }
    pub fn set_speed_state_change_mask(&mut self, value: u16) {
        let value = value << 14;
        assert!(value <= 0x4000);
        self.0 &= !0x4000;
        self.0 |= value;
    }
    pub fn symbol_err_int_mask(&self) -> u16 {
        (self.0 & 0x100) >> 8
    }
    pub fn set_symbol_err_int_mask(&mut self, value: u16) {
        let value = value << 8;
        assert!(value <= 0x100);
        self.0 &= !0x100;
        self.0 |= value;
    }
    pub fn tx_fifo_overflow_int_mask(&self) -> u16 {
        (self.0 & 0x40) >> 6
    }
    pub fn set_tx_fifo_overflow_int_mask(&mut self, value: u16) {
        let value = value << 6;
        assert!(value <= 0x40);
        self.0 &= !0x40;
        self.0 |= value;
    }
    pub fn wake_on_lan_mask(&self) -> u16 {
        (self.0 & 0x40) >> 6
    }
    pub fn set_wake_on_lan_mask(&mut self, value: u16) {
        let value = value << 6;
        assert!(value <= 0x40);
        self.0 &= !0x40;
        self.0 |= value;
    }
}
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct INTERRUPT_STATUS(pub u16);
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct COBRA_LED_MODE_SELECT(pub u16);
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct STD_27(pub u16);
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct AUXILIARY_CONTROL_AND_STATUS(u16);
impl AUXILIARY_CONTROL_AND_STATUS {
    pub fn actiphy_mode_enable(&self) -> u16 {
        (self.0 & 0x40) >> 6
    }
    pub fn set_actiphy_mode_enable(&mut self, value: u16) {
        let value = value << 6;
        assert!(value <= 0x40);
        self.0 &= !0x40;
        self.0 |= value;
    }
    pub fn aneg_complete(&self) -> u16 {
        (self.0 & 0x8000) >> 15
    }
    pub fn set_aneg_complete(&mut self, value: u16) {
        let value = value << 15;
        assert!(value <= 0x8000);
        self.0 &= !0x8000;
        self.0 |= value;
    }
    pub fn aneg_disabled(&self) -> u16 {
        (self.0 & 0x4000) >> 14
    }
    pub fn set_aneg_disabled(&mut self, value: u16) {
        let value = value << 14;
        assert!(value <= 0x4000);
        self.0 &= !0x4000;
        self.0 |= value;
    }
    pub fn hp_auto_mdix_crossover_indication(&self) -> u16 {
        (self.0 & 0x2000) >> 13
    }
    pub fn set_hp_auto_mdix_crossover_indication(&mut self, value: u16) {
        let value = value << 13;
        assert!(value <= 0x2000);
        self.0 &= !0x2000;
        self.0 |= value;
    }
}
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct LED_MODE_SELECT(pub u16);
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct LED_BEHAVIOR(u16);
impl LED_BEHAVIOR {
    pub fn led_pulsing_enable(&self) -> u16 {
        (self.0 & 0x1000) >> 12
    }
    pub fn set_led_pulsing_enable(&mut self, value: u16) {
        let value = value << 12;
        assert!(value <= 0x1000);
        self.0 &= !0x1000;
        self.0 |= value;
    }
}
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct PAGE(pub u16);
