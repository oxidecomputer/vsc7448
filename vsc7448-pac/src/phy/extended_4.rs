// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Based on mesa-v2021.09 (https://github.com/microchip-ung/mesa/) which has
// the following copyright and license:
//
// Copyright (c) 2004-2021 Microchip Technology Inc. and its subsidiaries.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// This is an autogenerated file; do not edit by hand!
use derive_more::{From, Into};
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct REG_1588_PPS_0_MUX_CTRL(u16);
impl REG_1588_PPS_0_MUX_CTRL {
    #[inline]
    pub fn get_1588_soft_reset(&self) -> u16 {
        (self.0 & 0x8000) >> 15
    }
    #[inline]
    pub fn set_1588_soft_reset(&mut self, value: u16) {
        assert!(value <= 0x1);
        let value = value << 15;
        self.0 &= !0x8000;
        self.0 |= value;
    }
}
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct SPI_DAISY_CHAIN_CTRL(u16);
impl SPI_DAISY_CHAIN_CTRL {
    #[inline]
    pub fn enable_input_port(&self) -> u16 {
        (self.0 & 0x8000) >> 15
    }
    #[inline]
    pub fn set_enable_input_port(&mut self, value: u16) {
        assert!(value <= 0x1);
        let value = value << 15;
        self.0 &= !0x8000;
        self.0 |= value;
    }
    #[inline]
    pub fn enable_output_port(&self) -> u16 {
        (self.0 & 0x4000) >> 14
    }
    #[inline]
    pub fn set_enable_output_port(&mut self, value: u16) {
        assert!(value <= 0x1);
        let value = value << 14;
        self.0 &= !0x4000;
        self.0 |= value;
    }
}
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct SPI_DAISY_CHAIN_CNTR(u16);
impl SPI_DAISY_CHAIN_CNTR {}
