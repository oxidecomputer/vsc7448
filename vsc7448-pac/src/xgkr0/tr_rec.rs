// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Based on mesa-v2021.09 (https://github.com/microchip-ung/mesa/) which has
// the following copyright and license:
//
// Copyright (c) 2004-2021 Microchip Technology Inc. and its subsidiaries.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// This is an autogenerated file; do not edit by hand!
use derive_more::{From, Into};
/// VS training lptrain state machine history msw
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct HIST_MSW(u32);
impl HIST_MSW {
    /// lptrain state machine history
    pub fn lptsm_hist_msw(&self) -> u32 {
        self.0 & 0x3
    }
    pub fn set_lptsm_hist_msw(&mut self, value: u32) {
        assert!(value <= 0x3);
        self.0 &= !0x3;
        self.0 |= value;
    }
    /// training state machine history
    pub fn sm_hist(&self) -> u32 {
        (self.0 & 0x7f0) >> 4
    }
    pub fn set_sm_hist(&mut self, value: u32) {
        let value = value << 4;
        assert!(value <= 0x7f0);
        self.0 &= !0x7f0;
        self.0 |= value;
    }
}
/// VS recorded dme violation positions for C0
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct TR_C0_DME_REC(u32);
impl TR_C0_DME_REC {
    /// Recorded position of DME_viol event for C0
    pub fn c0_dme_rec(&self) -> u32 {
        self.0 & 0x7f
    }
    pub fn set_c0_dme_rec(&mut self, value: u32) {
        assert!(value <= 0x7f);
        self.0 &= !0x7f;
        self.0 |= value;
    }
}
/// VS recorded min,max positions for C0
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct TR_C0_LIM_REC(u32);
impl TR_C0_LIM_REC {
    /// Recorded position of MAX event for C0
    pub fn c0_max_rec(&self) -> u32 {
        (self.0 & 0x7f00) >> 8
    }
    pub fn set_c0_max_rec(&mut self, value: u32) {
        let value = value << 8;
        assert!(value <= 0x7f00);
        self.0 &= !0x7f00;
        self.0 |= value;
    }
    /// Recorded position of MIN event for C0
    pub fn c0_min_rec(&self) -> u32 {
        self.0 & 0x7f
    }
    pub fn set_c0_min_rec(&mut self, value: u32) {
        assert!(value <= 0x7f);
        self.0 &= !0x7f;
        self.0 |= value;
    }
}
/// VS recorded dme violation positions for CM
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct TR_CM_DME_REC(u32);
impl TR_CM_DME_REC {
    /// Recorded position of DME_viol event for CM
    pub fn cm_dme_rec(&self) -> u32 {
        self.0 & 0x7f
    }
    pub fn set_cm_dme_rec(&mut self, value: u32) {
        assert!(value <= 0x7f);
        self.0 &= !0x7f;
        self.0 |= value;
    }
}
/// VS recorded min,max positions for CM
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct TR_CM_LIM_REC(u32);
impl TR_CM_LIM_REC {
    /// Recorded position of MAX event for CM
    pub fn cm_max_rec(&self) -> u32 {
        (self.0 & 0x7f00) >> 8
    }
    pub fn set_cm_max_rec(&mut self, value: u32) {
        let value = value << 8;
        assert!(value <= 0x7f00);
        self.0 &= !0x7f00;
        self.0 |= value;
    }
    /// Recorded position of MIN event for CM
    pub fn cm_min_rec(&self) -> u32 {
        self.0 & 0x7f
    }
    pub fn set_cm_min_rec(&mut self, value: u32) {
        assert!(value <= 0x7f);
        self.0 &= !0x7f;
        self.0 |= value;
    }
}
/// VS recorded dme violation positions for CP
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct TR_CP_DME_REC(u32);
impl TR_CP_DME_REC {
    /// Recorded position of DME_viol event for CP
    pub fn cp_dme_rec(&self) -> u32 {
        self.0 & 0x7f
    }
    pub fn set_cp_dme_rec(&mut self, value: u32) {
        assert!(value <= 0x7f);
        self.0 &= !0x7f;
        self.0 |= value;
    }
}
/// VS recorded min,max positions for CP
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct TR_CP_LIM_REC(u32);
impl TR_CP_LIM_REC {
    /// Recorded position of MAX event for CP
    pub fn cp_max_rec(&self) -> u32 {
        (self.0 & 0x7f00) >> 8
    }
    pub fn set_cp_max_rec(&mut self, value: u32) {
        let value = value << 8;
        assert!(value <= 0x7f00);
        self.0 &= !0x7f00;
        self.0 |= value;
    }
    /// Recorded position of MIN event for CP
    pub fn cp_min_rec(&self) -> u32 {
        self.0 & 0x7f
    }
    pub fn set_cp_min_rec(&mut self, value: u32) {
        assert!(value <= 0x7f);
        self.0 &= !0x7f;
        self.0 |= value;
    }
}
