// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Based on mesa-v2021.09 (https://github.com/microchip-ung/mesa/) which has
// the following copyright and license:
//
// Copyright (c) 2004-2021 Microchip Technology Inc. and its subsidiaries.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// This is an autogenerated file; do not edit by hand!
use derive_more::{From, Into};
/// Dev1g Interrupt Reg
///
/// Interrupt register
#[derive(Copy, Clone, Debug, Eq, PartialEq, From, Into)]
pub struct DEV1G_INTR(u32);
impl DEV1G_INTR {
    /// ANEG Link down interrupt (only PCS1g)
    ///
    /// 0: No interrupt 1: Interrupt occured Bit is cleared by writing a 1 to this position.
    #[inline(always)]
    pub fn an_link_down_intr_sticky(&self) -> u32 {
        (self.0 & 0x4) >> 2
    }
    #[inline(always)]
    pub fn set_an_link_down_intr_sticky(&mut self, value: u32) {
        debug_assert!(value <= 0x1);
        let value = value << 2;
        self.0 &= !0x4;
        self.0 |= value;
    }
    /// ANEG Link up interrupt (only PCS1g)
    ///
    /// 0: No interrupt 1: Interrupt occured Bit is cleared by writing a 1 to this position.
    #[inline(always)]
    pub fn an_link_up_intr_sticky(&self) -> u32 {
        (self.0 & 0x8) >> 3
    }
    #[inline(always)]
    pub fn set_an_link_up_intr_sticky(&mut self, value: u32) {
        debug_assert!(value <= 0x1);
        let value = value << 3;
        self.0 &= !0x8;
        self.0 |= value;
    }
    /// ANEG next page receive interrupt (only PCS1g)
    ///
    /// 0: No interrupt 1: Interrupt occured Bit is cleared by writing a 1 to this position.
    #[inline(always)]
    pub fn an_page_rx_intr_sticky(&self) -> u32 {
        (self.0 & 0x10) >> 4
    }
    #[inline(always)]
    pub fn set_an_page_rx_intr_sticky(&mut self, value: u32) {
        debug_assert!(value <= 0x1);
        let value = value << 4;
        self.0 &= !0x10;
        self.0 |= value;
    }
    /// Far-end-fault indication found interrupt (only PCS_fx100)
    ///
    /// 0: No interrupt 1: Interrupt occured Bit is cleared by writing a 1 to this position.
    #[inline(always)]
    pub fn fef_found_intr_sticky(&self) -> u32 {
        (self.0 & 0x100) >> 8
    }
    #[inline(always)]
    pub fn set_fef_found_intr_sticky(&mut self, value: u32) {
        debug_assert!(value <= 0x1);
        let value = value << 8;
        self.0 &= !0x100;
        self.0 |= value;
    }
    /// Link down interrupt
    ///
    /// 0: No interrupt 1: Interrupt occured Bit is cleared by writing a 1 to this position.
    #[inline(always)]
    pub fn link_down_intr_sticky(&self) -> u32 {
        self.0 & 0x1
    }
    #[inline(always)]
    pub fn set_link_down_intr_sticky(&mut self, value: u32) {
        debug_assert!(value <= 0x1);
        self.0 &= !0x1;
        self.0 |= value;
    }
    /// Link up interrupt
    ///
    /// 0: No interrupt 1: Interrupt occured Bit is cleared by writing a 1 to this position.
    #[inline(always)]
    pub fn link_up_intr_sticky(&self) -> u32 {
        (self.0 & 0x2) >> 1
    }
    #[inline(always)]
    pub fn set_link_up_intr_sticky(&mut self, value: u32) {
        debug_assert!(value <= 0x1);
        let value = value << 1;
        self.0 &= !0x2;
        self.0 |= value;
    }
    /// Low Power Idle Receive interrupt (only PCS1g)
    ///
    /// 0: No interrupt 1: Interrupt occured Bit is cleared by writing a 1 to this position.
    #[inline(always)]
    pub fn rx_lpi_intr_sticky(&self) -> u32 {
        (self.0 & 0x20) >> 5
    }
    #[inline(always)]
    pub fn set_rx_lpi_intr_sticky(&mut self, value: u32) {
        debug_assert!(value <= 0x1);
        let value = value << 5;
        self.0 &= !0x20;
        self.0 |= value;
    }
    /// Low Power Idle Transmit interrupt (only PCS1g)
    ///
    /// 0: No interrupt 1: Interrupt occured Bit is cleared by writing a 1 to this position.
    #[inline(always)]
    pub fn tx_lpi_intr_sticky(&self) -> u32 {
        (self.0 & 0x40) >> 6
    }
    #[inline(always)]
    pub fn set_tx_lpi_intr_sticky(&mut self, value: u32) {
        debug_assert!(value <= 0x1);
        let value = value << 6;
        self.0 &= !0x40;
        self.0 |= value;
    }
}
/// Dev1g Intr Configuration
///
/// Interrupt Mask (Enable) register
#[derive(Copy, Clone, Debug, Eq, PartialEq, From, Into)]
pub struct DEV1G_INTR_CFG(u32);
impl DEV1G_INTR_CFG {
    /// ANEG Link down interrupt enable (only PCS1g)
    ///
    /// 0: Interrupt disabled 1: Interrupt enabled
    #[inline(always)]
    pub fn an_link_down_intr_ena(&self) -> u32 {
        (self.0 & 0x4) >> 2
    }
    #[inline(always)]
    pub fn set_an_link_down_intr_ena(&mut self, value: u32) {
        debug_assert!(value <= 0x1);
        let value = value << 2;
        self.0 &= !0x4;
        self.0 |= value;
    }
    /// ANEG Link up interrupt enable (only PCS1g)
    ///
    /// 0: Interrupt disabled 1: Interrupt enabled
    #[inline(always)]
    pub fn an_link_up_intr_ena(&self) -> u32 {
        (self.0 & 0x8) >> 3
    }
    #[inline(always)]
    pub fn set_an_link_up_intr_ena(&mut self, value: u32) {
        debug_assert!(value <= 0x1);
        let value = value << 3;
        self.0 &= !0x8;
        self.0 |= value;
    }
    /// ANEG next page receive interrupt enable (only PCS1g)
    ///
    /// 0: Interrupt disabled 1: Interrupt enabled
    #[inline(always)]
    pub fn an_page_rx_intr_ena(&self) -> u32 {
        (self.0 & 0x10) >> 4
    }
    #[inline(always)]
    pub fn set_an_page_rx_intr_ena(&mut self, value: u32) {
        debug_assert!(value <= 0x1);
        let value = value << 4;
        self.0 &= !0x10;
        self.0 |= value;
    }
    /// Far-end-fault indication found interrupt enable (only PCS_fx100)
    ///
    /// 0: Interrupt disabled 1: Interrupt enabled
    #[inline(always)]
    pub fn fef_found_intr_ena(&self) -> u32 {
        (self.0 & 0x100) >> 8
    }
    #[inline(always)]
    pub fn set_fef_found_intr_ena(&mut self, value: u32) {
        debug_assert!(value <= 0x1);
        let value = value << 8;
        self.0 &= !0x100;
        self.0 |= value;
    }
    /// Link down interrupt enable
    ///
    /// 0: Interrupt disabled 1: Interrupt enabled
    #[inline(always)]
    pub fn link_down_intr_ena(&self) -> u32 {
        self.0 & 0x1
    }
    #[inline(always)]
    pub fn set_link_down_intr_ena(&mut self, value: u32) {
        debug_assert!(value <= 0x1);
        self.0 &= !0x1;
        self.0 |= value;
    }
    /// Link up interrupt enable
    ///
    /// 0: Interrupt disabled 1: Interrupt enabled
    #[inline(always)]
    pub fn link_up_intr_ena(&self) -> u32 {
        (self.0 & 0x2) >> 1
    }
    #[inline(always)]
    pub fn set_link_up_intr_ena(&mut self, value: u32) {
        debug_assert!(value <= 0x1);
        let value = value << 1;
        self.0 &= !0x2;
        self.0 |= value;
    }
    /// Low Power Idle Receive interrupt enable (only PCS1g)
    ///
    /// 0: Interrupt disabled 1: Interrupt enabled
    #[inline(always)]
    pub fn rx_lpi_intr_ena(&self) -> u32 {
        (self.0 & 0x20) >> 5
    }
    #[inline(always)]
    pub fn set_rx_lpi_intr_ena(&mut self, value: u32) {
        debug_assert!(value <= 0x1);
        let value = value << 5;
        self.0 &= !0x20;
        self.0 |= value;
    }
    /// Low Power Idle Transmit interrupt enable (only PCS1g)
    ///
    /// 0: Interrupt disabled 1: Interrupt enabled
    #[inline(always)]
    pub fn tx_lpi_intr_ena(&self) -> u32 {
        (self.0 & 0x40) >> 6
    }
    #[inline(always)]
    pub fn set_tx_lpi_intr_ena(&mut self, value: u32) {
        debug_assert!(value <= 0x1);
        let value = value << 6;
        self.0 &= !0x40;
        self.0 |= value;
    }
}
/// Dev1g Interrupt Ident
///
/// Pending Interrupts (only enabled interrupts are visible)
#[derive(Copy, Clone, Debug, Eq, PartialEq, From, Into)]
pub struct DEV1G_INTR_IDENT(u32);
impl DEV1G_INTR_IDENT {
    /// ANEG Link down interrupt (only PCS1g)
    ///
    /// 0: No interrupt 1: Interrupt pending
    #[inline(always)]
    pub fn an_link_down_intr_ident(&self) -> u32 {
        (self.0 & 0x4) >> 2
    }
    #[inline(always)]
    pub fn set_an_link_down_intr_ident(&mut self, value: u32) {
        debug_assert!(value <= 0x1);
        let value = value << 2;
        self.0 &= !0x4;
        self.0 |= value;
    }
    /// ANEG Link up interrupt (only PCS1g)
    ///
    /// 0: No interrupt 1: Interrupt pending
    #[inline(always)]
    pub fn an_link_up_intr_ident(&self) -> u32 {
        (self.0 & 0x8) >> 3
    }
    #[inline(always)]
    pub fn set_an_link_up_intr_ident(&mut self, value: u32) {
        debug_assert!(value <= 0x1);
        let value = value << 3;
        self.0 &= !0x8;
        self.0 |= value;
    }
    /// ANEG next page receive interrupt (only PCS1g)
    ///
    /// 0: No interrupt 1: Interrupt pending
    #[inline(always)]
    pub fn an_page_rx_intr_ident(&self) -> u32 {
        (self.0 & 0x10) >> 4
    }
    #[inline(always)]
    pub fn set_an_page_rx_intr_ident(&mut self, value: u32) {
        debug_assert!(value <= 0x1);
        let value = value << 4;
        self.0 &= !0x10;
        self.0 |= value;
    }
    /// Far-end-fault indication found interrupt (only PCS_fx100)
    ///
    /// 0: No interrupt 1: Interrupt pending
    #[inline(always)]
    pub fn fef_found_intr_ident(&self) -> u32 {
        (self.0 & 0x100) >> 8
    }
    #[inline(always)]
    pub fn set_fef_found_intr_ident(&mut self, value: u32) {
        debug_assert!(value <= 0x1);
        let value = value << 8;
        self.0 &= !0x100;
        self.0 |= value;
    }
    /// Link down interrupt
    ///
    /// 0: No interrupt 1: Interrupt pending
    #[inline(always)]
    pub fn link_down_intr_ident(&self) -> u32 {
        self.0 & 0x1
    }
    #[inline(always)]
    pub fn set_link_down_intr_ident(&mut self, value: u32) {
        debug_assert!(value <= 0x1);
        self.0 &= !0x1;
        self.0 |= value;
    }
    /// Link up interrupt
    ///
    /// 0: No interrupt 1: Interrupt pending
    #[inline(always)]
    pub fn link_up_intr_ident(&self) -> u32 {
        (self.0 & 0x2) >> 1
    }
    #[inline(always)]
    pub fn set_link_up_intr_ident(&mut self, value: u32) {
        debug_assert!(value <= 0x1);
        let value = value << 1;
        self.0 &= !0x2;
        self.0 |= value;
    }
    /// Low Power Idle Receive interrupt (only PCS1g)
    ///
    /// 0: No interrupt 1: Interrupt pending
    #[inline(always)]
    pub fn rx_lpi_intr_ident(&self) -> u32 {
        (self.0 & 0x20) >> 5
    }
    #[inline(always)]
    pub fn set_rx_lpi_intr_ident(&mut self, value: u32) {
        debug_assert!(value <= 0x1);
        let value = value << 5;
        self.0 &= !0x20;
        self.0 |= value;
    }
    /// Low Power Idle Transmit interrupt (only PCS1g)
    ///
    /// 0: No interrupt 1: Interrupt pending
    #[inline(always)]
    pub fn tx_lpi_intr_ident(&self) -> u32 {
        (self.0 & 0x40) >> 6
    }
    #[inline(always)]
    pub fn set_tx_lpi_intr_ident(&mut self, value: u32) {
        debug_assert!(value <= 0x1);
        let value = value << 6;
        self.0 &= !0x40;
        self.0 |= value;
    }
}
