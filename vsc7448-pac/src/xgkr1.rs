// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Based on mesa-v2021.09 (https://github.com/microchip-ung/mesa/) which has
// the following copyright and license:
//
// Copyright (c) 2004-2021 Microchip Technology Inc. and its subsidiaries.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// This is an autogenerated file; do not edit by hand!

use crate::types::RegisterAddress;

// Register groups are stored in the tree as submodules

pub mod an_cfg0;
pub mod an_hist;
pub mod an_sm;
pub mod an_sts0;
pub mod aw_tmr;
pub mod bl_tmr;
pub mod kr10g_tmr;
pub mod kr1g_tmr;
pub mod kr3g_tmr;
pub mod kr_7x0000;
pub mod kr_7x0001;
pub mod kr_7x0030;
pub mod ld_adv;
pub mod ld_next_page;
pub mod lflong_tmr;
pub mod lfshort_tmr;
pub mod lp_base_page_0;
pub mod lp_base_page_1;
pub mod lp_base_page_2;
pub mod lp_next_page;
pub mod lp_tmr;
pub mod pd_tmr;
pub mod tr_tmr;

/// Not documented
pub struct AN_CFG0(pub(super) u32);
impl AN_CFG0 {
    pub fn AN_CFG0(&self) -> RegisterAddress<an_cfg0::AN_CFG0> {
        RegisterAddress::new(self.0 + 0x0)
    }
}

/// Not documented
pub struct AN_HIST(pub(super) u32);
impl AN_HIST {
    pub fn AN_HIST(&self) -> RegisterAddress<an_hist::AN_HIST> {
        RegisterAddress::new(self.0 + 0x0)
    }
}

/// Not documented
pub struct AN_SM(pub(super) u32);
impl AN_SM {
    pub fn AN_SM(&self) -> RegisterAddress<an_sm::AN_SM> {
        RegisterAddress::new(self.0 + 0x0)
    }
}

/// Not documented
pub struct AN_STS0(pub(super) u32);
impl AN_STS0 {
    pub fn AN_STS0(&self) -> RegisterAddress<an_sts0::AN_STS0> {
        RegisterAddress::new(self.0 + 0x0)
    }
}

/// Not documented
pub struct AW_TMR(pub(super) u32);
impl AW_TMR {
    pub fn AW_LSW(&self) -> RegisterAddress<aw_tmr::AW_LSW> {
        RegisterAddress::new(self.0 + 0x0)
    }
    pub fn AW_MSW(&self) -> RegisterAddress<aw_tmr::AW_MSW> {
        RegisterAddress::new(self.0 + 0x4)
    }
}

/// Not documented
pub struct BL_TMR(pub(super) u32);
impl BL_TMR {
    pub fn BL_LSW(&self) -> RegisterAddress<bl_tmr::BL_LSW> {
        RegisterAddress::new(self.0 + 0x0)
    }
    pub fn BL_MSW(&self) -> RegisterAddress<bl_tmr::BL_MSW> {
        RegisterAddress::new(self.0 + 0x4)
    }
}

/// Not documented
pub struct KR10G_TMR(pub(super) u32);
impl KR10G_TMR {
    pub fn KR10G_LSW(&self) -> RegisterAddress<kr10g_tmr::KR10G_LSW> {
        RegisterAddress::new(self.0 + 0x0)
    }
    pub fn KR10G_MSW(&self) -> RegisterAddress<kr10g_tmr::KR10G_MSW> {
        RegisterAddress::new(self.0 + 0x4)
    }
}

/// Not documented
pub struct KR1G_TMR(pub(super) u32);
impl KR1G_TMR {
    pub fn KR1G_LSW(&self) -> RegisterAddress<kr1g_tmr::KR1G_LSW> {
        RegisterAddress::new(self.0 + 0x0)
    }
    pub fn KR1G_MSW(&self) -> RegisterAddress<kr1g_tmr::KR1G_MSW> {
        RegisterAddress::new(self.0 + 0x4)
    }
}

/// Not documented
pub struct KR3G_TMR(pub(super) u32);
impl KR3G_TMR {
    pub fn KR3G_LSW(&self) -> RegisterAddress<kr3g_tmr::KR3G_LSW> {
        RegisterAddress::new(self.0 + 0x0)
    }
    pub fn KR3G_MSW(&self) -> RegisterAddress<kr3g_tmr::KR3G_MSW> {
        RegisterAddress::new(self.0 + 0x4)
    }
}

/// Not documented
pub struct KR_7X0000(pub(super) u32);
impl KR_7X0000 {
    pub fn KR_7X0000(&self) -> RegisterAddress<kr_7x0000::KR_7X0000> {
        RegisterAddress::new(self.0 + 0x0)
    }
}

/// Not documented
pub struct KR_7X0001(pub(super) u32);
impl KR_7X0001 {
    pub fn KR_7X0001(&self) -> RegisterAddress<kr_7x0001::KR_7X0001> {
        RegisterAddress::new(self.0 + 0x0)
    }
}

/// Not documented
pub struct KR_7X0030(pub(super) u32);
impl KR_7X0030 {
    pub fn KR_7X0030(&self) -> RegisterAddress<kr_7x0030::KR_7X0030> {
        RegisterAddress::new(self.0 + 0x0)
    }
}

/// Not documented
pub struct LD_ADV(pub(super) u32);
impl LD_ADV {
    pub fn KR_7X0010(&self) -> RegisterAddress<ld_adv::KR_7X0010> {
        RegisterAddress::new(self.0 + 0x0)
    }
    pub fn KR_7X0011(&self) -> RegisterAddress<ld_adv::KR_7X0011> {
        RegisterAddress::new(self.0 + 0x4)
    }
    pub fn KR_7X0012(&self) -> RegisterAddress<ld_adv::KR_7X0012> {
        RegisterAddress::new(self.0 + 0x8)
    }
}

/// Not documented
pub struct LD_NEXT_PAGE(pub(super) u32);
impl LD_NEXT_PAGE {
    pub fn KR_7X0016(&self) -> RegisterAddress<ld_next_page::KR_7X0016> {
        RegisterAddress::new(self.0 + 0x0)
    }
    pub fn KR_7X0017(&self) -> RegisterAddress<ld_next_page::KR_7X0017> {
        RegisterAddress::new(self.0 + 0x4)
    }
    pub fn KR_7X0018(&self) -> RegisterAddress<ld_next_page::KR_7X0018> {
        RegisterAddress::new(self.0 + 0x8)
    }
}

/// Not documented
pub struct LFLONG_TMR(pub(super) u32);
impl LFLONG_TMR {
    pub fn LFLONG_LSW(&self) -> RegisterAddress<lflong_tmr::LFLONG_LSW> {
        RegisterAddress::new(self.0 + 0x0)
    }
    pub fn LFLONG_MSW(&self) -> RegisterAddress<lflong_tmr::LFLONG_MSW> {
        RegisterAddress::new(self.0 + 0x4)
    }
}

/// Not documented
pub struct LFSHORT_TMR(pub(super) u32);
impl LFSHORT_TMR {
    pub fn LFSHORT_LSW(&self) -> RegisterAddress<lfshort_tmr::LFSHORT_LSW> {
        RegisterAddress::new(self.0 + 0x0)
    }
    pub fn LFSHORT_MSW(&self) -> RegisterAddress<lfshort_tmr::LFSHORT_MSW> {
        RegisterAddress::new(self.0 + 0x4)
    }
}

/// Not documented
pub struct LP_BASE_PAGE_0(pub(super) u32);
impl LP_BASE_PAGE_0 {
    pub fn KR_7X0013(&self) -> RegisterAddress<lp_base_page_0::KR_7X0013> {
        RegisterAddress::new(self.0 + 0x0)
    }
}

/// Not documented
pub struct LP_BASE_PAGE_1(pub(super) u32);
impl LP_BASE_PAGE_1 {
    pub fn KR_7X0014(&self) -> RegisterAddress<lp_base_page_1::KR_7X0014> {
        RegisterAddress::new(self.0 + 0x0)
    }
}

/// Not documented
pub struct LP_BASE_PAGE_2(pub(super) u32);
impl LP_BASE_PAGE_2 {
    pub fn KR_7X0015(&self) -> RegisterAddress<lp_base_page_2::KR_7X0015> {
        RegisterAddress::new(self.0 + 0x0)
    }
}

/// Not documented
pub struct LP_NEXT_PAGE(pub(super) u32);
impl LP_NEXT_PAGE {
    pub fn KR_7X0019(&self) -> RegisterAddress<lp_next_page::KR_7X0019> {
        RegisterAddress::new(self.0 + 0x0)
    }
    pub fn KR_7X001A(&self) -> RegisterAddress<lp_next_page::KR_7X001A> {
        RegisterAddress::new(self.0 + 0x4)
    }
    pub fn KR_7X001B(&self) -> RegisterAddress<lp_next_page::KR_7X001B> {
        RegisterAddress::new(self.0 + 0x8)
    }
}

/// Not documented
pub struct LP_TMR(pub(super) u32);
impl LP_TMR {
    pub fn LP_LSW(&self) -> RegisterAddress<lp_tmr::LP_LSW> {
        RegisterAddress::new(self.0 + 0x0)
    }
    pub fn LP_MSW(&self) -> RegisterAddress<lp_tmr::LP_MSW> {
        RegisterAddress::new(self.0 + 0x4)
    }
}

/// Not documented
pub struct PD_TMR(pub(super) u32);
impl PD_TMR {
    pub fn PD_LSW(&self) -> RegisterAddress<pd_tmr::PD_LSW> {
        RegisterAddress::new(self.0 + 0x0)
    }
    pub fn PD_MSW(&self) -> RegisterAddress<pd_tmr::PD_MSW> {
        RegisterAddress::new(self.0 + 0x4)
    }
}

/// Not documented
pub struct TR_TMR(pub(super) u32);
impl TR_TMR {
    pub fn TR_LSW(&self) -> RegisterAddress<tr_tmr::TR_LSW> {
        RegisterAddress::new(self.0 + 0x0)
    }
    pub fn TR_MSW(&self) -> RegisterAddress<tr_tmr::TR_MSW> {
        RegisterAddress::new(self.0 + 0x4)
    }
}
