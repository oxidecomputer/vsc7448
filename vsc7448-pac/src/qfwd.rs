// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Based on mesa-v2021.09 (https://github.com/microchip-ung/mesa/) which has
// the following copyright and license:
//
// Copyright (c) 2004-2021 Microchip Technology Inc. and its subsidiaries.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// This is an autogenerated file; do not edit by hand!

use crate::types::RegisterAddress;

// Register groups are stored in the tree as submodules

pub mod system;

/// Switch configuration
pub struct SYSTEM(pub(super) u32);
impl SYSTEM {
    #[inline(always)]
    pub fn CPUQ_DISCARD(&self) -> RegisterAddress<system::CPUQ_DISCARD> {
        RegisterAddress::new(self.0 + 0x124)
    }
    #[inline(always)]
    pub fn FRAME_COPY_CFG(&self, index: u8) -> RegisterAddress<system::FRAME_COPY_CFG> {
        debug_assert!(index < 12);
        RegisterAddress::new(self.0 + 0xe8 + u32::from(index) * 0x4)
    }
    #[inline(always)]
    pub fn FRAME_COPY_LRNA_CFG(&self) -> RegisterAddress<system::FRAME_COPY_LRNA_CFG> {
        RegisterAddress::new(self.0 + 0x118)
    }
    #[inline(always)]
    pub fn FWD_CTRL(&self) -> RegisterAddress<system::FWD_CTRL> {
        RegisterAddress::new(self.0 + 0xe4)
    }
    #[inline(always)]
    pub fn FWD_PRESS_DROP_CNT(&self) -> RegisterAddress<system::FWD_PRESS_DROP_CNT> {
        RegisterAddress::new(self.0 + 0x11c)
    }
    #[inline(always)]
    pub fn MIRROR_CFG(&self) -> RegisterAddress<system::MIRROR_CFG> {
        RegisterAddress::new(self.0 + 0x120)
    }
    #[inline(always)]
    pub fn SWITCH_PORT_MODE(&self, index: u8) -> RegisterAddress<system::SWITCH_PORT_MODE> {
        debug_assert!(index < 57);
        RegisterAddress::new(self.0 + 0x0 + u32::from(index) * 0x4)
    }
}
