// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Based on mesa-v2021.09 (https://github.com/microchip-ung/mesa/) which has
// the following copyright and license:
//
// Copyright (c) 2004-2021 Microchip Technology Inc. and its subsidiaries.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// This is an autogenerated file; do not edit by hand!
use derive_more::{From, Into};
/// Automatic calendar setup
///
/// These four registers configures the automaric calendar for the next 16 ports from 'repl'*16.
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct CAL_AUTO(u32);
impl CAL_AUTO {
    /// Per port setting for internal bandwidth for 16 ports. Replication M, Bits 2N+1 and 2N is a two bit value for port M*16+N, encoded as seen below.
    ///
    /// 00: Port not active 01: Port granted 1Gbps 10: Port granted 2.5Gbps 11: Port granted 10Gbps
    pub fn cal_auto(&self) -> u32 {
        self.0
    }
    pub fn set_cal_auto(&mut self, value: u32) {
        self.0 = value;
    }
}
/// Calendar configuration
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct CAL_CTRL(u32);
impl CAL_CTRL {
    /// The automatic calendar failed to service all ports.
    pub fn cal_auto_error(&self) -> u32 {
        self.0 & 0x1
    }
    pub fn set_cal_auto_error(&mut self, value: u32) {
        assert!(value <= 0x1);
        self.0 &= !0x1;
        self.0 |= value;
    }
    /// Configures the time between bus grants to 10g ports, in 0.1 nanosecond unit. Other speeds will be adjusted relative to the 10g setting. Default value of 8 matches the nominal minimum packet time on a 10g port.
    pub fn cal_auto_grant_rate(&self) -> u32 {
        (self.0 & 0x7fe) >> 1
    }
    pub fn set_cal_auto_grant_rate(&mut self, value: u32) {
        let value = value << 1;
        assert!(value <= 0x7fe);
        self.0 &= !0x7fe;
        self.0 |= value;
    }
    /// The internal bus calendars can be set to a predefined port mode (settings 0-3), to an automatic sequence generated by the CAL_AUTO registers, or to a specific sequence programmed through the CAL_SEQ fields.
    ///
    /// 0: 48x1G + 2x10G 1:  Reserved 2:  52x1G 3:  8x1G + 24x2.5G 4:  8x1G + 8x2.5G + 4x10G 5:  24x1G + 4x10G 8:  CAL_AUTO port setting 9:  Sequence program 10: Halt
    pub fn cal_mode(&self) -> u32 {
        (self.0 & 0x7800) >> 11
    }
    pub fn set_cal_mode(&mut self, value: u32) {
        let value = value << 11;
        assert!(value <= 0x7800);
        self.0 &= !0x7800;
        self.0 |= value;
    }
}
/// Manual calendar setup
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct CAL_SEQ(u32);
impl CAL_SEQ {
    /// Port to service in the cycle given by the CAL_SEQ_LEN value.
    pub fn cal_seq_cur_val(&self) -> u32 {
        (self.0 & 0x1f80) >> 7
    }
    pub fn set_cal_seq_cur_val(&mut self, value: u32) {
        let value = value << 7;
        assert!(value <= 0x1f80);
        self.0 &= !0x1f80;
        self.0 |= value;
    }
    /// Last entry in manual sequence. CAL_SEQ only accessible while calendar is halted.
    pub fn cal_seq_len(&self) -> u32 {
        (self.0 & 0x3fe000) >> 13
    }
    pub fn set_cal_seq_len(&mut self, value: u32) {
        let value = value << 13;
        assert!(value <= 0x3fe000);
        self.0 &= !0x3fe000;
        self.0 |= value;
    }
    /// Enable update of the CAL_SEQ.
    pub fn cal_seq_pgm_ena(&self) -> u32 {
        self.0 & 0x1
    }
    pub fn set_cal_seq_pgm_ena(&mut self, value: u32) {
        assert!(value <= 0x1);
        self.0 &= !0x1;
        self.0 |= value;
    }
    /// The CAL_SEQ_PGM_VAL is written into the sequence entry CAL_SEQ_LEN.
    pub fn cal_seq_pgm_val(&self) -> u32 {
        (self.0 & 0x7e) >> 1
    }
    pub fn set_cal_seq_pgm_val(&mut self, value: u32) {
        let value = value << 1;
        assert!(value <= 0x7e);
        self.0 &= !0x7e;
        self.0 |= value;
    }
}
