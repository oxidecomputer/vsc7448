// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Based on mesa-v2021.09 (https://github.com/microchip-ung/mesa/) which has
// the following copyright and license:
//
// Copyright (c) 2004-2021 Microchip Technology Inc. and its subsidiaries.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// This is an autogenerated file; do not edit by hand!
use derive_more::{From, Into};

/// Register `EEE_CFG`
///
/// Control Energy Efficient Ethernet operation per front port.
#[derive(From, Into)]
pub struct EEE_CFG(u32);
impl EEE_CFG {
    /// Queues set in this mask activate the egress port immediately when any of the queues have data available.
    pub fn eee_fast_queues(&self) -> u32 {
        (self.0 & 0xff) >> 0
    }
    pub fn set_eee_fast_queues(&mut self, value: u32) {
        let value = value << 0;
        assert!(value <= 0xff);
        self.0 &= !0xff;
        self.0 |= value;
    }
}

/// Register `EEE_THRES`
///
/// Thresholds for delayed EEE queues
#[derive(From, Into)]
pub struct EEE_THRES(u32);
impl EEE_THRES {
    /// Maximum number of bytes in a queue before egress port is activated. Unit is 60 bytes.
    pub fn eee_high_bytes(&self) -> u32 {
        (self.0 & 0xff00) >> 8
    }
    pub fn set_eee_high_bytes(&mut self, value: u32) {
        let value = value << 8;
        assert!(value <= 0xff00);
        self.0 &= !0xff00;
        self.0 |= value;
    }
    /// Maximum number of frames in a queue before the egress port is activated. Unit is 1 frame.
    pub fn eee_high_frames(&self) -> u32 {
        (self.0 & 0xff) >> 0
    }
    pub fn set_eee_high_frames(&mut self, value: u32) {
        let value = value << 0;
        assert!(value <= 0xff);
        self.0 &= !0xff;
        self.0 |= value;
    }
}

/// Register `FRM_AGING`
///
/// Frame aging configuration
#[derive(From, Into)]
pub struct FRM_AGING(u32);
impl FRM_AGING {
    /// Frames are aged and removed from the queue system when the frame's age timer becomes two. The frame age timer is increased for all frames whenever the configured time, MAX_AGE,  has passed. Effectively, this means that a frame is aged when the frame has waited in the queue system between one or two times the period specified by MAX_AGE. The periodd configured by MAX_AGE is also termed an "age era". A value of zero disables frame aging. Frame aging related parameters: QSYS:SYSTEM:FRM_AGING.MAX_AGE HSCH:HSCH_MISC:PORT_MODE.AGE_DIS DSM:CFG:BUF_CFG.AGING_ENA

    ///

    /// 0: Disable frame aging. >=1: Era length in unit of 4us.
    pub fn max_age(&self) -> u32 {
        (self.0 & 0xfffff) >> 0
    }
    pub fn set_max_age(&mut self, value: u32) {
        let value = value << 0;
        assert!(value <= 0xfffff);
        self.0 &= !0xfffff;
        self.0 |= value;
    }
}

/// Register `PMEM_SIZE`
///
/// Packet memory status
#[derive(From, Into)]
pub struct PMEM_SIZE(u32);
impl PMEM_SIZE {
    /// Must be set before core reset is released. Unit is  bytes.
    pub fn pmem_size(&self) -> u32 {
        (self.0 & 0xffff) >> 0
    }
    pub fn set_pmem_size(&mut self, value: u32) {
        let value = value << 0;
        assert!(value <= 0xffff);
        self.0 &= !0xffff;
        self.0 |= value;
    }
}

/// Register `RESET_CFG`
///
/// Core reset control
///
/// Controls reset and initialization of the switching core. Proper startup sequence is: - Enable memories - Initialize memories - Enable core
#[derive(From, Into)]
pub struct RESET_CFG(u32);
impl RESET_CFG {
    /// Switch core is enabled when this field is set.
    pub fn core_ena(&self) -> u32 {
        (self.0 & 0x1) >> 0
    }
    pub fn set_core_ena(&mut self, value: u32) {
        let value = value << 0;
        assert!(value <= 0x1);
        self.0 &= !0x1;
        self.0 |= value;
    }
}

/// Register `STAT_CFG`
///
/// Statistics configuration
#[derive(From, Into)]
pub struct STAT_CFG(u32);
impl STAT_CFG {
    /// Set to disable counting buffer drops (tail) in the designated tail drop counter. When disabled, the per priority buffer drop counter is used instead.
    pub fn stat_rx_taildrop_dis(&self) -> u32 {
        (self.0 & 0x1) >> 0
    }
    pub fn set_stat_rx_taildrop_dis(&mut self, value: u32) {
        let value = value << 0;
        assert!(value <= 0x1);
        self.0 &= !0x1;
        self.0 |= value;
    }
}
