// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Based on mesa-v2021.09 (https://github.com/microchip-ung/mesa/) which has
// the following copyright and license:
//
// Copyright (c) 2004-2021 Microchip Technology Inc. and its subsidiaries.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// This is an autogenerated file; do not edit by hand!
use derive_more::{From, Into};
/// Packet Memory Status
#[derive(From, Into)]
pub struct MMGT_FAST(u32);
impl MMGT_FAST {
    /// Number of words in the fast pool
    pub fn freevld(&self) -> u32 {
        (self.0 & 0xf0) >> 4
    }
    pub fn set_freevld(&mut self, value: u32) {
        let value = value << 4;
        assert!(value <= 0xf0);
        self.0 &= !0xf0;
        self.0 |= value;
    }
    /// Number of frames awaiting release in the fast pool
    pub fn relvld(&self) -> u32 {
        self.0 & 0xf
    }
    pub fn set_relvld(&mut self, value: u32) {
        assert!(value <= 0xf);
        self.0 &= !0xf;
        self.0 |= value;
    }
}
/// Ingress queue status
#[derive(From, Into)]
pub struct MMGT_IQ_STAT(u32);
impl MMGT_IQ_STAT {
    /// Number of frame copies pending in the ingress queue
    pub fn mmgt_iq_size(&self) -> u32 {
        self.0 & 0xfffff
    }
    pub fn set_mmgt_iq_size(&mut self, value: u32) {
        assert!(value <= 0xfffff);
        self.0 &= !0xfffff;
        self.0 |= value;
    }
}
/// Total consumption per ingress port
#[derive(From, Into)]
pub struct MMGT_PORT_USE(u32);
impl MMGT_PORT_USE {
    /// Total consumption per port in the memory manager. Unit is one cell (176 bytes).
    pub fn mmgt_port_use(&self) -> u32 {
        self.0 & 0xffff
    }
    pub fn set_mmgt_port_use(&mut self, value: u32) {
        assert!(value <= 0xffff);
        self.0 &= !0xffff;
        self.0 |= value;
    }
}
/// Port to see values for
#[derive(From, Into)]
pub struct MMGT_PORT_VIEW(u32);
impl MMGT_PORT_VIEW {
    /// Select port to see consumption values for
    pub fn mmgt_port_view(&self) -> u32 {
        self.0 & 0x3f
    }
    pub fn set_mmgt_port_view(&mut self, value: u32) {
        assert!(value <= 0x3f);
        self.0 &= !0x3f;
        self.0 |= value;
    }
}
