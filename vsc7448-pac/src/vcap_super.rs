// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Based on mesa-v2021.09 (https://github.com/microchip-ung/mesa/) which has
// the following copyright and license:
//
// Copyright (c) 2004-2021 Microchip Technology Inc. and its subsidiaries.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// This is an autogenerated file; do not edit by hand!

use crate::types::RegisterAddress;

// Register groups are stored in the tree as submodules

pub mod tcam_bist;
pub mod vcap_const;
pub mod vcap_core_cache;
pub mod vcap_core_cfg;
pub mod vcap_core_map;
pub mod vcap_core_sticky;

/// Build in test for TCAM
pub struct TCAM_BIST(pub(super) u32);
impl TCAM_BIST {
    #[inline(always)]
    pub fn TCAM_CFG(&self) -> RegisterAddress<tcam_bist::TCAM_CFG> {
        RegisterAddress::new(self.0 + 0x4)
    }
    #[inline(always)]
    pub fn TCAM_CTRL(&self) -> RegisterAddress<tcam_bist::TCAM_CTRL> {
        RegisterAddress::new(self.0 + 0x0)
    }
    #[inline(always)]
    pub fn TCAM_STAT(&self) -> RegisterAddress<tcam_bist::TCAM_STAT> {
        RegisterAddress::new(self.0 + 0x8)
    }
}

/// VCAP constants
pub struct VCAP_CONST(pub(super) u32);
impl VCAP_CONST {
    #[inline(always)]
    pub fn ACTION_DEF_CNT(&self) -> RegisterAddress<vcap_const::ACTION_DEF_CNT> {
        RegisterAddress::new(self.0 + 0x14)
    }
    #[inline(always)]
    pub fn ACTION_WIDTH(&self) -> RegisterAddress<vcap_const::ACTION_WIDTH> {
        RegisterAddress::new(self.0 + 0x18)
    }
    #[inline(always)]
    pub fn CNT_WIDTH(&self) -> RegisterAddress<vcap_const::CNT_WIDTH> {
        RegisterAddress::new(self.0 + 0x1c)
    }
    #[inline(always)]
    pub fn CORE_CNT(&self) -> RegisterAddress<vcap_const::CORE_CNT> {
        RegisterAddress::new(self.0 + 0x20)
    }
    #[inline(always)]
    pub fn ENTRY_CNT(&self) -> RegisterAddress<vcap_const::ENTRY_CNT> {
        RegisterAddress::new(self.0 + 0x8)
    }
    #[inline(always)]
    pub fn ENTRY_SWCNT(&self) -> RegisterAddress<vcap_const::ENTRY_SWCNT> {
        RegisterAddress::new(self.0 + 0xc)
    }
    #[inline(always)]
    pub fn ENTRY_TG_WIDTH(&self) -> RegisterAddress<vcap_const::ENTRY_TG_WIDTH> {
        RegisterAddress::new(self.0 + 0x10)
    }
    #[inline(always)]
    pub fn ENTRY_WIDTH(&self) -> RegisterAddress<vcap_const::ENTRY_WIDTH> {
        RegisterAddress::new(self.0 + 0x4)
    }
    #[inline(always)]
    pub fn IF_CNT(&self) -> RegisterAddress<vcap_const::IF_CNT> {
        RegisterAddress::new(self.0 + 0x24)
    }
    #[inline(always)]
    pub fn VCAP_VER(&self) -> RegisterAddress<vcap_const::VCAP_VER> {
        RegisterAddress::new(self.0 + 0x0)
    }
}

/// VCAP cache
pub struct VCAP_CORE_CACHE(pub(super) u32);
impl VCAP_CORE_CACHE {
    #[inline(always)]
    pub fn VCAP_ACTION_DAT(&self, index: u32) -> RegisterAddress<vcap_core_cache::VCAP_ACTION_DAT> {
        assert!(index < 64);
        RegisterAddress::new(self.0 + 0x200 + index * 0x4)
    }
    #[inline(always)]
    pub fn VCAP_CNT_DAT(&self, index: u32) -> RegisterAddress<vcap_core_cache::VCAP_CNT_DAT> {
        assert!(index < 32);
        RegisterAddress::new(self.0 + 0x300 + index * 0x4)
    }
    #[inline(always)]
    pub fn VCAP_ENTRY_DAT(&self, index: u32) -> RegisterAddress<vcap_core_cache::VCAP_ENTRY_DAT> {
        assert!(index < 64);
        RegisterAddress::new(self.0 + 0x0 + index * 0x4)
    }
    #[inline(always)]
    pub fn VCAP_MASK_DAT(&self, index: u32) -> RegisterAddress<vcap_core_cache::VCAP_MASK_DAT> {
        assert!(index < 64);
        RegisterAddress::new(self.0 + 0x100 + index * 0x4)
    }
    #[inline(always)]
    pub fn VCAP_RULE_ENA(&self) -> RegisterAddress<vcap_core_cache::VCAP_RULE_ENA> {
        RegisterAddress::new(self.0 + 0x380)
    }
}

/// VCAP operations
pub struct VCAP_CORE_CFG(pub(super) u32);
impl VCAP_CORE_CFG {
    #[inline(always)]
    pub fn VCAP_MV_CFG(&self) -> RegisterAddress<vcap_core_cfg::VCAP_MV_CFG> {
        RegisterAddress::new(self.0 + 0x4)
    }
    #[inline(always)]
    pub fn VCAP_UPDATE_CTRL(&self) -> RegisterAddress<vcap_core_cfg::VCAP_UPDATE_CTRL> {
        RegisterAddress::new(self.0 + 0x0)
    }
}

/// Mapping of cores to interfaces
pub struct VCAP_CORE_MAP(pub(super) u32);
impl VCAP_CORE_MAP {
    #[inline(always)]
    pub fn VCAP_CORE_IDX(&self) -> RegisterAddress<vcap_core_map::VCAP_CORE_IDX> {
        RegisterAddress::new(self.0 + 0x0)
    }
    #[inline(always)]
    pub fn VCAP_CORE_MAP(&self) -> RegisterAddress<vcap_core_map::VCAP_CORE_MAP> {
        RegisterAddress::new(self.0 + 0x4)
    }
}

/// Sticky bits
pub struct VCAP_CORE_STICKY(pub(super) u32);
impl VCAP_CORE_STICKY {
    #[inline(always)]
    pub fn VCAP_STICKY(&self) -> RegisterAddress<vcap_core_sticky::VCAP_STICKY> {
        RegisterAddress::new(self.0 + 0x0)
    }
}
