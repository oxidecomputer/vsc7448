// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Based on mesa-v2021.09 (https://github.com/microchip-ung/mesa/) which has
// the following copyright and license:
//
// Copyright (c) 2004-2021 Microchip Technology Inc. and its subsidiaries.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// This is an autogenerated file; do not edit by hand!

use crate::types::RegisterAddress;

// Register groups are stored in the tree as submodules

pub mod eee_stats;
pub mod eee_timer_cfg;
pub mod kr_fec_capability;
pub mod kr_fec_cfg;
pub mod kr_fec_ha_status;
pub mod kr_fec_status;
pub mod kr_fec_threshold_cfg;
pub mod pcs_10gbr_cfg;
pub mod pcs_10gbr_ha_status;
pub mod pcs_10gbr_status;

/// Register group to indicate EEE FSM status
pub struct EEE_STATS(pub(super) u32);
impl EEE_STATS {
    pub fn EEE_INTR_MASK(&self) -> RegisterAddress<eee_stats::EEE_INTR_MASK> {
        RegisterAddress::new(self.0 + 0x8)
    }
    pub fn EEE_STATUS(&self) -> RegisterAddress<eee_stats::EEE_STATUS> {
        RegisterAddress::new(self.0 + 0x4)
    }
    pub fn RX_WF_TIMER_REG(&self) -> RegisterAddress<eee_stats::RX_WF_TIMER_REG> {
        RegisterAddress::new(self.0 + 0x18)
    }
    pub fn WAKE_ERR_CNT(&self) -> RegisterAddress<eee_stats::WAKE_ERR_CNT> {
        RegisterAddress::new(self.0 + 0x0)
    }
}

/// Register group for timer configurations related to EEE of 10G Base-R PCS
pub struct EEE_TIMER_CFG(pub(super) u32);
impl EEE_TIMER_CFG {
    pub fn KR_FEC_CAPABILITY(&self) -> RegisterAddress<eee_timer_cfg::KR_FEC_CAPABILITY> {
        RegisterAddress::new(self.0 + 0x0)
    }
    pub fn ONE_US_TIMER_REG(&self) -> RegisterAddress<eee_timer_cfg::ONE_US_TIMER_REG> {
        RegisterAddress::new(self.0 + 0x0)
    }
    pub fn RX_TQ_TIMER_REG(&self) -> RegisterAddress<eee_timer_cfg::RX_TQ_TIMER_REG> {
        RegisterAddress::new(self.0 + 0x10)
    }
    pub fn RX_TW_TIMER_REG(&self) -> RegisterAddress<eee_timer_cfg::RX_TW_TIMER_REG> {
        RegisterAddress::new(self.0 + 0x14)
    }
    pub fn TX_TQ_TIMER_REG(&self) -> RegisterAddress<eee_timer_cfg::TX_TQ_TIMER_REG> {
        RegisterAddress::new(self.0 + 0x8)
    }
    pub fn TX_TS_TIMER_REG(&self) -> RegisterAddress<eee_timer_cfg::TX_TS_TIMER_REG> {
        RegisterAddress::new(self.0 + 0x4)
    }
    pub fn TX_TW_TIMER_REG(&self) -> RegisterAddress<eee_timer_cfg::TX_TW_TIMER_REG> {
        RegisterAddress::new(self.0 + 0xc)
    }
}

/// KR FEC capability register group
pub struct KR_FEC_CAPABILITY(pub(super) u32);
impl KR_FEC_CAPABILITY {
    pub fn KR_FEC_STATUS(&self) -> RegisterAddress<kr_fec_capability::KR_FEC_STATUS> {
        RegisterAddress::new(self.0 + 0x8)
    }
}

/// KR FEC IEEE CONTROL REGISTER
pub struct KR_FEC_CFG(pub(super) u32);
impl KR_FEC_CFG {
    pub fn RX_FSET_FIFO_DATA(&self) -> RegisterAddress<kr_fec_cfg::RX_FSET_FIFO_DATA> {
        RegisterAddress::new(self.0 + 0x24)
    }
}

/// KR FEC IEEE status registers
pub struct KR_FEC_HA_STATUS(pub(super) u32);
impl KR_FEC_HA_STATUS {
    pub fn KR_FEC_CORRECTED(&self) -> RegisterAddress<kr_fec_ha_status::KR_FEC_CORRECTED> {
        RegisterAddress::new(self.0 + 0x0)
    }
    pub fn UNFIXABLE_ERROR_COUNT_THRESHOLD(&self) -> RegisterAddress<kr_fec_ha_status::UNFIXABLE_ERROR_COUNT_THRESHOLD> {
        RegisterAddress::new(self.0 + 0x4)
    }
}

/// KR FEC sticky bit regsiter
pub struct KR_FEC_STATUS(pub(super) u32);
impl KR_FEC_STATUS {
    pub fn KR_FEC_STICKY(&self) -> RegisterAddress<kr_fec_status::KR_FEC_STICKY> {
        RegisterAddress::new(self.0 + 0x0)
    }
    pub fn KR_FEC_STICKY_MASK(&self) -> RegisterAddress<kr_fec_status::KR_FEC_STICKY_MASK> {
        RegisterAddress::new(self.0 + 0x4)
    }
    pub fn KR_FEC_UNCORRECTED(&self) -> RegisterAddress<kr_fec_status::KR_FEC_UNCORRECTED> {
        RegisterAddress::new(self.0 + 0x4)
    }
}

/// KR FEC counters threshold configurations
pub struct KR_FEC_THRESHOLD_CFG(pub(super) u32);
impl KR_FEC_THRESHOLD_CFG {
    pub fn FIXED_ERROR_COUNT_THRESHOLD(&self) -> RegisterAddress<kr_fec_threshold_cfg::FIXED_ERROR_COUNT_THRESHOLD> {
        RegisterAddress::new(self.0 + 0x0)
    }
    pub fn KR_FEC_CFG(&self) -> RegisterAddress<kr_fec_threshold_cfg::KR_FEC_CFG> {
        RegisterAddress::new(self.0 + 0x0)
    }
}

/// PCS configuration
pub struct PCS_10GBR_CFG(pub(super) u32);
impl PCS_10GBR_CFG {
    pub fn PCS_CFG(&self) -> RegisterAddress<pcs_10gbr_cfg::PCS_CFG> {
        RegisterAddress::new(self.0 + 0x0)
    }
    pub fn PCS_INTR_MASK(&self) -> RegisterAddress<pcs_10gbr_cfg::PCS_INTR_MASK> {
        RegisterAddress::new(self.0 + 0x30)
    }
    pub fn PCS_SD_CFG(&self) -> RegisterAddress<pcs_10gbr_cfg::PCS_SD_CFG> {
        RegisterAddress::new(self.0 + 0x4)
    }
    pub fn RX_DATAPAT_LSB(&self) -> RegisterAddress<pcs_10gbr_cfg::RX_DATAPAT_LSB> {
        RegisterAddress::new(self.0 + 0x28)
    }
    pub fn RX_DATAPAT_MSB(&self) -> RegisterAddress<pcs_10gbr_cfg::RX_DATAPAT_MSB> {
        RegisterAddress::new(self.0 + 0x24)
    }
    pub fn RX_PRBS31_INIT(&self) -> RegisterAddress<pcs_10gbr_cfg::RX_PRBS31_INIT> {
        RegisterAddress::new(self.0 + 0x18)
    }
    pub fn TEST_CFG(&self) -> RegisterAddress<pcs_10gbr_cfg::TEST_CFG> {
        RegisterAddress::new(self.0 + 0x2c)
    }
    pub fn TX_DATAPAT_LSB(&self) -> RegisterAddress<pcs_10gbr_cfg::TX_DATAPAT_LSB> {
        RegisterAddress::new(self.0 + 0x20)
    }
    pub fn TX_DATAPAT_MSB(&self) -> RegisterAddress<pcs_10gbr_cfg::TX_DATAPAT_MSB> {
        RegisterAddress::new(self.0 + 0x1c)
    }
    pub fn TX_SEEDA_LSB(&self) -> RegisterAddress<pcs_10gbr_cfg::TX_SEEDA_LSB> {
        RegisterAddress::new(self.0 + 0xc)
    }
    pub fn TX_SEEDA_MSB(&self) -> RegisterAddress<pcs_10gbr_cfg::TX_SEEDA_MSB> {
        RegisterAddress::new(self.0 + 0x8)
    }
    pub fn TX_SEEDB_LSB(&self) -> RegisterAddress<pcs_10gbr_cfg::TX_SEEDB_LSB> {
        RegisterAddress::new(self.0 + 0x14)
    }
    pub fn TX_SEEDB_MSB(&self) -> RegisterAddress<pcs_10gbr_cfg::TX_SEEDB_MSB> {
        RegisterAddress::new(self.0 + 0x10)
    }
}

/// PCS status registers and counters
pub struct PCS_10GBR_HA_STATUS(pub(super) u32);
impl PCS_10GBR_HA_STATUS {
    pub fn PCS_STATUS(&self) -> RegisterAddress<pcs_10gbr_ha_status::PCS_STATUS> {
        RegisterAddress::new(self.0 + 0x4)
    }
    pub fn RX_BER_CNT(&self) -> RegisterAddress<pcs_10gbr_ha_status::RX_BER_CNT> {
        RegisterAddress::new(self.0 + 0xc)
    }
    pub fn RX_CHARERR_CNT(&self) -> RegisterAddress<pcs_10gbr_ha_status::RX_CHARERR_CNT> {
        RegisterAddress::new(self.0 + 0x14)
    }
    pub fn RX_ERRBLK_CNT(&self) -> RegisterAddress<pcs_10gbr_ha_status::RX_ERRBLK_CNT> {
        RegisterAddress::new(self.0 + 0x10)
    }
    pub fn RX_FSET_FIFO_STAT(&self) -> RegisterAddress<pcs_10gbr_ha_status::RX_FSET_FIFO_STAT> {
        RegisterAddress::new(self.0 + 0x20)
    }
    pub fn RX_OSET_FIFO_DATA(&self) -> RegisterAddress<pcs_10gbr_ha_status::RX_OSET_FIFO_DATA> {
        RegisterAddress::new(self.0 + 0x1c)
    }
    pub fn RX_OSET_FIFO_STAT(&self) -> RegisterAddress<pcs_10gbr_ha_status::RX_OSET_FIFO_STAT> {
        RegisterAddress::new(self.0 + 0x18)
    }
    pub fn TEST_ERR_CNT(&self) -> RegisterAddress<pcs_10gbr_ha_status::TEST_ERR_CNT> {
        RegisterAddress::new(self.0 + 0x0)
    }
    pub fn TX_CHARERR_CNT(&self) -> RegisterAddress<pcs_10gbr_ha_status::TX_CHARERR_CNT> {
        RegisterAddress::new(self.0 + 0x8)
    }
    pub fn TX_ERRBLK_CNT(&self) -> RegisterAddress<pcs_10gbr_ha_status::TX_ERRBLK_CNT> {
        RegisterAddress::new(self.0 + 0x4)
    }
}

/// PCS status
pub struct PCS_10GBR_STATUS(pub(super) u32);
impl PCS_10GBR_STATUS {
    pub fn PCS_INTR_STAT(&self) -> RegisterAddress<pcs_10gbr_status::PCS_INTR_STAT> {
        RegisterAddress::new(self.0 + 0x0)
    }
    pub fn TIMER_125(&self) -> RegisterAddress<pcs_10gbr_status::TIMER_125> {
        RegisterAddress::new(self.0 + 0x34)
    }
}
