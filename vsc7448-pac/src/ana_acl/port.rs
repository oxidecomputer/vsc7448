// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Based on mesa-v2021.09 (https://github.com/microchip-ung/mesa/) which has
// the following copyright and license:
//
// Copyright (c) 2004-2021 Microchip Technology Inc. and its subsidiaries.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// This is an autogenerated file; do not edit by hand!
use derive_more::{From, Into};

/// Register `VCAP_S2_KEY_SEL`
///
/// VCAP_IS2 key selection
///
/// Key selection for VCAP_IS2 lookups. Replicated per lookup.
#[derive(From, Into)]
pub struct VCAP_S2_KEY_SEL(u32);
impl VCAP_S2_KEY_SEL {    ///
    /// Applies to ARP/RARP frames.
    ///
    /// 0: Match against MAC_ETYPE entries. 1: Match against ARP entries.
    pub fn arp_key_sel(&self) -> u32 {
        (self.0 & 0x1) >> 0
    }
    pub fn set_arp_key_sel(&mut self, value: u32) {
        let value = value << 0;
        assert!(value <= 0x1);
        self.0 &= !0x1;
        self.0 |= value;
    }    ///
    /// Applies to IPv4 multicast frames.
    ///
    /// 0: Match against MAC_ETYPE entries. 1: Match against IP4_TCP_UDP for IPv4 TCP/UDP frames and against IP4_OTHER entries for other IPv4 frames. 2: Match against IP_7TUPLE entries. 3: Match against IP4_VID entries.
    pub fn ip4_mc_key_sel(&self) -> u32 {
        (self.0 & 0xc0) >> 6
    }
    pub fn set_ip4_mc_key_sel(&mut self, value: u32) {
        let value = value << 6;
        assert!(value <= 0xc0);
        self.0 &= !0xc0;
        self.0 |= value;
    }    ///
    /// Applies to IPv4 unicast frames.
    ///
    /// 0: Match against MAC_ETYPE entries. 1: Match against IP4_TCP_UDP for IPv4 TCP/UDP frames and against IP4_OTHER entries for other IPv4 frames. 2: Match against IP_7TUPLE entries.
    pub fn ip4_uc_key_sel(&self) -> u32 {
        (self.0 & 0x30) >> 4
    }
    pub fn set_ip4_uc_key_sel(&mut self, value: u32) {
        let value = value << 4;
        assert!(value <= 0x30);
        self.0 &= !0x30;
        self.0 |= value;
    }    ///
    /// Applies to IPv6 multicast frames.
    ///
    /// 0: Match against MAC_ETYPE entries. 1: Match against IP_7TUPLE entries. 2: Match against IP6_VID entries.
    pub fn ip6_mc_key_sel(&self) -> u32 {
        (self.0 & 0xc) >> 2
    }
    pub fn set_ip6_mc_key_sel(&mut self, value: u32) {
        let value = value << 2;
        assert!(value <= 0xc);
        self.0 &= !0xc;
        self.0 |= value;
    }    ///
    /// Applies to IPv6 unicast frames.
    ///
    /// 0: Match against MAC_ETYPE entries. 1: Match against IP_7TUPLE entries.
    pub fn ip6_uc_key_sel(&self) -> u32 {
        (self.0 & 0x2) >> 1
    }
    pub fn set_ip6_uc_key_sel(&mut self, value: u32) {
        let value = value << 1;
        assert!(value <= 0x2);
        self.0 &= !0x2;
        self.0 |= value;
    }    ///
    /// Applies to frames where frame_type is set to non Ethernet (CW or MPLS).
    ///
    /// 0: Match against MAC_ETYPE entries. 1: match against CUSTOM_1 entries. 2: match against CUSTOM_2 entries. 3: No lookup.
    pub fn non_eth_key_sel(&self) -> u32 {
        (self.0 & 0x300) >> 8
    }
    pub fn set_non_eth_key_sel(&mut self, value: u32) {
        let value = value << 8;
        assert!(value <= 0x300);
        self.0 &= !0x300;
        self.0 |= value;
    }
}
