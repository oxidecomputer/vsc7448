// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Based on mesa-v2021.09 (https://github.com/microchip-ung/mesa/) which has
// the following copyright and license:
//
// Copyright (c) 2004-2021 Microchip Technology Inc. and its subsidiaries.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// This is an autogenerated file; do not edit by hand!

use crate::types::RegisterAddress;

// Register groups are stored in the tree as submodules

pub mod bdlb;
pub mod bum_slb;
pub mod common_bdlb;
pub mod common_bum_slb;
pub mod common_sdlb;
pub mod pol_all_cfg;
pub mod pol_port_cfg;
pub mod pol_port_ctrl;
pub mod port_pt_ctrl;
pub mod sdlb;

/// Leaky bucket configuration & status
pub struct BDLB(pub(super) u32);
impl BDLB {
    #[inline(always)]
    pub fn DLB_CFG(&self) -> RegisterAddress<bdlb::DLB_CFG> {
        RegisterAddress::new(self.0 + 0x4)
    }
    #[inline(always)]
    pub fn LB_BUCKET_VAL(&self, index: u8) -> RegisterAddress<bdlb::LB_BUCKET_VAL> {
        debug_assert!(index < 2);
        RegisterAddress::new(self.0 + 0x10 + u32::from(index) * 0x4)
    }
    #[inline(always)]
    pub fn LB_CFG(&self, index: u8) -> RegisterAddress<bdlb::LB_CFG> {
        debug_assert!(index < 2);
        RegisterAddress::new(self.0 + 0x8 + u32::from(index) * 0x4)
    }
    #[inline(always)]
    pub fn MISC_CFG(&self) -> RegisterAddress<bdlb::MISC_CFG> {
        RegisterAddress::new(self.0 + 0x0)
    }
}

/// Leaky bucket configuration & status
pub struct BUM_SLB(pub(super) u32);
impl BUM_SLB {
    #[inline(always)]
    pub fn LB_BUCKET_VAL(&self, index: u8) -> RegisterAddress<bum_slb::LB_BUCKET_VAL> {
        debug_assert!(index < 3);
        RegisterAddress::new(self.0 + 0x14 + u32::from(index) * 0x4)
    }
    #[inline(always)]
    pub fn LB_CFG(&self, index: u8) -> RegisterAddress<bum_slb::LB_CFG> {
        debug_assert!(index < 3);
        RegisterAddress::new(self.0 + 0x8 + u32::from(index) * 0x4)
    }
    #[inline(always)]
    pub fn MISC_CFG(&self) -> RegisterAddress<bum_slb::MISC_CFG> {
        RegisterAddress::new(self.0 + 0x0)
    }
    #[inline(always)]
    pub fn SLB_CFG(&self) -> RegisterAddress<bum_slb::SLB_CFG> {
        RegisterAddress::new(self.0 + 0x4)
    }
}

/// Common LB configuration and status registers
pub struct COMMON_BDLB(pub(super) u32);
impl COMMON_BDLB {
    #[inline(always)]
    pub fn DLB_CTRL(&self) -> RegisterAddress<common_bdlb::DLB_CTRL> {
        RegisterAddress::new(self.0 + 0x0)
    }
    #[inline(always)]
    pub fn DLB_STICKY(&self) -> RegisterAddress<common_bdlb::DLB_STICKY> {
        RegisterAddress::new(self.0 + 0x4)
    }
}

/// Common LB configuration and status registers
pub struct COMMON_BUM_SLB(pub(super) u32);
impl COMMON_BUM_SLB {
    #[inline(always)]
    pub fn DLB_CTRL(&self) -> RegisterAddress<common_bum_slb::DLB_CTRL> {
        RegisterAddress::new(self.0 + 0x0)
    }
    #[inline(always)]
    pub fn SLB_STICKY(&self) -> RegisterAddress<common_bum_slb::SLB_STICKY> {
        RegisterAddress::new(self.0 + 0x10)
    }
    #[inline(always)]
    pub fn TRAFFIC_MASK_CFG(&self, index: u8) -> RegisterAddress<common_bum_slb::TRAFFIC_MASK_CFG> {
        debug_assert!(index < 3);
        RegisterAddress::new(self.0 + 0x4 + u32::from(index) * 0x4)
    }
}

/// Common LB configuration and status registers
pub struct COMMON_SDLB(pub(super) u32);
impl COMMON_SDLB {
    #[inline(always)]
    pub fn DLB_CTRL(&self) -> RegisterAddress<common_sdlb::DLB_CTRL> {
        RegisterAddress::new(self.0 + 0x0)
    }
    #[inline(always)]
    pub fn DLB_STICKY(&self) -> RegisterAddress<common_sdlb::DLB_STICKY> {
        RegisterAddress::new(self.0 + 0x4)
    }
}

/// Various policer controls
pub struct POL_ALL_CFG(pub(super) u32);
impl POL_ALL_CFG {
    #[inline(always)]
    pub fn POL_ACL_CTRL(&self, index: u8) -> RegisterAddress<pol_all_cfg::POL_ACL_CTRL> {
        debug_assert!(index < 32);
        RegisterAddress::new(self.0 + 0x160 + u32::from(index) * 0x4)
    }
    #[inline(always)]
    pub fn POL_ACL_RATE_CFG(&self, index: u8) -> RegisterAddress<pol_all_cfg::POL_ACL_RATE_CFG> {
        debug_assert!(index < 32);
        RegisterAddress::new(self.0 + 0x60 + u32::from(index) * 0x4)
    }
    #[inline(always)]
    pub fn POL_ACL_THRES_CFG(&self, index: u8) -> RegisterAddress<pol_all_cfg::POL_ACL_THRES_CFG> {
        debug_assert!(index < 32);
        RegisterAddress::new(self.0 + 0xe0 + u32::from(index) * 0x4)
    }
    #[inline(always)]
    pub fn POL_ALL_CFG(&self) -> RegisterAddress<pol_all_cfg::POL_ALL_CFG> {
        RegisterAddress::new(self.0 + 0x2c4)
    }
    #[inline(always)]
    pub fn POL_PORT_FC_CFG(&self, index: u8) -> RegisterAddress<pol_all_cfg::POL_PORT_FC_CFG> {
        debug_assert!(index < 57);
        RegisterAddress::new(self.0 + 0x1e0 + u32::from(index) * 0x4)
    }
    #[inline(always)]
    pub fn POL_STICKY(&self) -> RegisterAddress<pol_all_cfg::POL_STICKY> {
        RegisterAddress::new(self.0 + 0x2cc)
    }
    #[inline(always)]
    pub fn POL_STICKY1(&self) -> RegisterAddress<pol_all_cfg::POL_STICKY1> {
        RegisterAddress::new(self.0 + 0x2d0)
    }
    #[inline(always)]
    pub fn POL_STORM_CTRL(&self, index: u8) -> RegisterAddress<pol_all_cfg::POL_STORM_CTRL> {
        debug_assert!(index < 8);
        RegisterAddress::new(self.0 + 0x40 + u32::from(index) * 0x4)
    }
    #[inline(always)]
    pub fn POL_STORM_RATE_CFG(
        &self,
        index: u8,
    ) -> RegisterAddress<pol_all_cfg::POL_STORM_RATE_CFG> {
        debug_assert!(index < 8);
        RegisterAddress::new(self.0 + 0x0 + u32::from(index) * 0x4)
    }
    #[inline(always)]
    pub fn POL_STORM_THRES_CFG(
        &self,
        index: u8,
    ) -> RegisterAddress<pol_all_cfg::POL_STORM_THRES_CFG> {
        debug_assert!(index < 8);
        RegisterAddress::new(self.0 + 0x20 + u32::from(index) * 0x4)
    }
    #[inline(always)]
    pub fn POL_UPD_INT_CFG(&self) -> RegisterAddress<pol_all_cfg::POL_UPD_INT_CFG> {
        RegisterAddress::new(self.0 + 0x2c8)
    }
}

/// Rate and threshold configuration for port policers.
pub struct POL_PORT_CFG(pub(super) u32);
impl POL_PORT_CFG {
    #[inline(always)]
    pub fn POL_PORT_RATE_CFG(&self, index: u8) -> RegisterAddress<pol_port_cfg::POL_PORT_RATE_CFG> {
        debug_assert!(index < 228);
        RegisterAddress::new(self.0 + 0x800 + u32::from(index) * 0x4)
    }
    #[inline(always)]
    pub fn POL_PORT_THRES_CFG_0(
        &self,
        index: u8,
    ) -> RegisterAddress<pol_port_cfg::POL_PORT_THRES_CFG_0> {
        debug_assert!(index < 228);
        RegisterAddress::new(self.0 + 0x0 + u32::from(index) * 0x4)
    }
    #[inline(always)]
    pub fn POL_PORT_THRES_CFG_1(
        &self,
        index: u8,
    ) -> RegisterAddress<pol_port_cfg::POL_PORT_THRES_CFG_1> {
        debug_assert!(index < 228);
        RegisterAddress::new(self.0 + 0x400 + u32::from(index) * 0x4)
    }
}

/// Port policer configuration and status per port
pub struct POL_PORT_CTRL(pub(super) u32);
impl POL_PORT_CTRL {
    #[inline(always)]
    pub fn POL_PORT_CFG(&self, index: u8) -> RegisterAddress<pol_port_ctrl::POL_PORT_CFG> {
        debug_assert!(index < 4);
        RegisterAddress::new(self.0 + 0x4 + u32::from(index) * 0x4)
    }
    #[inline(always)]
    pub fn POL_PORT_GAP(&self) -> RegisterAddress<pol_port_ctrl::POL_PORT_GAP> {
        RegisterAddress::new(self.0 + 0x0)
    }
}

/// Pipeline configuration indexed per port.
pub struct PORT_PT_CTRL(pub(super) u32);
impl PORT_PT_CTRL {
    #[inline(always)]
    pub fn ACTION_CTRL(&self, index: u8) -> RegisterAddress<port_pt_ctrl::ACTION_CTRL> {
        debug_assert!(index < 5);
        RegisterAddress::new(self.0 + 0x0 + u32::from(index) * 0x4)
    }
}

/// Leaky bucket configuration & status
pub struct SDLB(pub(super) u32);
impl SDLB {
    #[inline(always)]
    pub fn DLB_CFG(&self) -> RegisterAddress<sdlb::DLB_CFG> {
        RegisterAddress::new(self.0 + 0x4)
    }
    #[inline(always)]
    pub fn LB_BUCKET_VAL(&self, index: u8) -> RegisterAddress<sdlb::LB_BUCKET_VAL> {
        debug_assert!(index < 2);
        RegisterAddress::new(self.0 + 0x10 + u32::from(index) * 0x4)
    }
    #[inline(always)]
    pub fn LB_CFG(&self, index: u8) -> RegisterAddress<sdlb::LB_CFG> {
        debug_assert!(index < 2);
        RegisterAddress::new(self.0 + 0x8 + u32::from(index) * 0x4)
    }
    #[inline(always)]
    pub fn MISC_CFG(&self) -> RegisterAddress<sdlb::MISC_CFG> {
        RegisterAddress::new(self.0 + 0x0)
    }
}
