// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Based on mesa-v2021.09 (https://github.com/microchip-ung/mesa/) which has
// the following copyright and license:
//
// Copyright (c) 2004-2021 Microchip Technology Inc. and its subsidiaries.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// This is an autogenerated file; do not edit by hand!
use derive_more::{From, Into};

/// Register `DTI_DURATION_TICK_LEN`
///
/// Lenght of DTI Duration Tick
#[derive(From, Into)]
pub struct DTI_DURATION_TICK_LEN(u32);
impl DTI_DURATION_TICK_LEN {
    /// Lenght of DTI Duration Tick in clock cycles. Default value corresponds to 0.1ms.
    pub fn dti_duration_tick_len(&self) -> u32 {
        self.0 & 0x3ffff
    }
    pub fn set_dti_duration_tick_len(&mut self, value: u32) {
        assert!(value <= 0x3ffff);
        self.0 &= !0x3ffff;
        self.0 |= value;
    }
}

/// Register `FRM_NEXT_AND_TYPE`
///
/// Entry type and pointer to next Frame Table entry.
///
/// Note: Write operations to entries in the frame table, which are in the process of being removed (FRM_RM=1, see FRM_ENTRY_PART0) are not allowed.
#[derive(From, Into)]
pub struct FRM_NEXT_AND_TYPE(u32);
impl FRM_NEXT_AND_TYPE {
    /// Entry Type. Delay entries are only applicable to DTI. The Entry Type controls the use of FRM_ENTRY_PART0.PART0.

    ///

    /// 0: Frame 1: Delay
    pub fn entry_type(&self) -> u32 {
        (self.0 & 0x10000) >> 16
    }
    pub fn set_entry_type(&mut self, value: u32) {
        let value = value << 16;
        assert!(value <= 0x10000);
        self.0 &= !0x10000;
        self.0 |= value;
    }
    /// Pointer to next Frame Table entry. Only applicable for frames used for DTI.
    pub fn next_ptr(&self) -> u32 {
        self.0 & 0xfff
    }
    pub fn set_next_ptr(&mut self, value: u32) {
        assert!(value <= 0xfff);
        self.0 &= !0xfff;
        self.0 |= value;
    }
}
