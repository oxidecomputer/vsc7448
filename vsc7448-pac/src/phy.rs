// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Based on mesa-v2021.09 (https://github.com/microchip-ung/mesa/) which has
// the following copyright and license:
//
// Copyright (c) 2004-2021 Microchip Technology Inc. and its subsidiaries.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// This is an autogenerated file; do not edit by hand!

use crate::types::PhyRegisterAddress;
use core::marker::PhantomData;

pub mod extended;
pub mod extended_2;
pub mod extended_3;
pub mod extended_4;
pub mod gpio;
pub mod macsec;
pub mod page_1588;
pub mod standard;
pub mod test;
pub mod tr;

/// Standard registers
pub struct STANDARD {}
impl STANDARD {
    #[inline(always)]
    pub const fn MODE_CONTROL() -> PhyRegisterAddress<standard::MODE_CONTROL> {
        PhyRegisterAddress {
            page: 0,
            addr: 0,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn MODE_STATUS() -> PhyRegisterAddress<standard::MODE_STATUS> {
        PhyRegisterAddress {
            page: 0,
            addr: 1,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn IDENTIFIER_1() -> PhyRegisterAddress<standard::IDENTIFIER_1> {
        PhyRegisterAddress {
            page: 0,
            addr: 2,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn IDENTIFIER_2() -> PhyRegisterAddress<standard::IDENTIFIER_2> {
        PhyRegisterAddress {
            page: 0,
            addr: 3,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn DEVICE_AUTONEG_ADVERTISEMENT(
    ) -> PhyRegisterAddress<standard::DEVICE_AUTONEG_ADVERTISEMENT> {
        PhyRegisterAddress {
            page: 0,
            addr: 4,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn AUTONEGOTIATION_LINK_PARTNER_ABILITY(
    ) -> PhyRegisterAddress<standard::AUTONEGOTIATION_LINK_PARTNER_ABILITY> {
        PhyRegisterAddress {
            page: 0,
            addr: 5,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn REG_1000BASE_T_CONTROL() -> PhyRegisterAddress<standard::REG_1000BASE_T_CONTROL> {
        PhyRegisterAddress {
            page: 0,
            addr: 9,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn REG_1000BASE_T_STATUS() -> PhyRegisterAddress<standard::REG_1000BASE_T_STATUS> {
        PhyRegisterAddress {
            page: 0,
            addr: 10,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn MMD_EEE_ACCESS() -> PhyRegisterAddress<standard::MMD_EEE_ACCESS> {
        PhyRegisterAddress {
            page: 0,
            addr: 13,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn MMD_ADDR_OR_DATA() -> PhyRegisterAddress<standard::MMD_ADDR_OR_DATA> {
        PhyRegisterAddress {
            page: 0,
            addr: 14,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn BYPASS_CONTROL() -> PhyRegisterAddress<standard::BYPASS_CONTROL> {
        PhyRegisterAddress {
            page: 0,
            addr: 18,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn ERROR_COUNTER_1() -> PhyRegisterAddress<standard::ERROR_COUNTER_1> {
        PhyRegisterAddress {
            page: 0,
            addr: 19,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn EXTENDED_CONTROL_AND_STATUS_20(
    ) -> PhyRegisterAddress<standard::EXTENDED_CONTROL_AND_STATUS_20> {
        PhyRegisterAddress {
            page: 0,
            addr: 20,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn ERROR_COUNTER_3() -> PhyRegisterAddress<standard::ERROR_COUNTER_3> {
        PhyRegisterAddress {
            page: 0,
            addr: 21,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn EXTENDED_CONTROL_AND_STATUS(
    ) -> PhyRegisterAddress<standard::EXTENDED_CONTROL_AND_STATUS> {
        PhyRegisterAddress {
            page: 0,
            addr: 22,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn COOPER_VTSS_PHY_AUXILIARY_CONTROL_AND_STATUS(
    ) -> PhyRegisterAddress<standard::COOPER_VTSS_PHY_AUXILIARY_CONTROL_AND_STATUS> {
        PhyRegisterAddress {
            page: 0,
            addr: 23,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn EXTENDED_PHY_CONTROL() -> PhyRegisterAddress<standard::EXTENDED_PHY_CONTROL> {
        PhyRegisterAddress {
            page: 0,
            addr: 23,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn EXTENDED_PHY_CONTROL_2() -> PhyRegisterAddress<standard::EXTENDED_PHY_CONTROL_2> {
        PhyRegisterAddress {
            page: 0,
            addr: 24,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn INTERRUPT_MASK() -> PhyRegisterAddress<standard::INTERRUPT_MASK> {
        PhyRegisterAddress {
            page: 0,
            addr: 25,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn INTERRUPT_STATUS() -> PhyRegisterAddress<standard::INTERRUPT_STATUS> {
        PhyRegisterAddress {
            page: 0,
            addr: 26,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn COBRA_LED_MODE_SELECT() -> PhyRegisterAddress<standard::COBRA_LED_MODE_SELECT> {
        PhyRegisterAddress {
            page: 0,
            addr: 27,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn STD_27() -> PhyRegisterAddress<standard::STD_27> {
        PhyRegisterAddress {
            page: 0,
            addr: 27,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn AUXILIARY_CONTROL_AND_STATUS(
    ) -> PhyRegisterAddress<standard::AUXILIARY_CONTROL_AND_STATUS> {
        PhyRegisterAddress {
            page: 0,
            addr: 28,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn LED_MODE_SELECT() -> PhyRegisterAddress<standard::LED_MODE_SELECT> {
        PhyRegisterAddress {
            page: 0,
            addr: 29,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn LED_BEHAVIOR() -> PhyRegisterAddress<standard::LED_BEHAVIOR> {
        PhyRegisterAddress {
            page: 0,
            addr: 30,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn PAGE() -> PhyRegisterAddress<standard::PAGE> {
        PhyRegisterAddress {
            page: 0,
            addr: 31,
            _phantom: PhantomData,
        }
    }
}

/// Extended registers
pub struct EXTENDED {}
impl EXTENDED {
    #[inline(always)]
    pub const fn REG_17E() -> PhyRegisterAddress<extended::REG_17E> {
        PhyRegisterAddress {
            page: 1,
            addr: 17,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn CU_MEDIA_CRC_GOOD_COUNTER(
    ) -> PhyRegisterAddress<extended::CU_MEDIA_CRC_GOOD_COUNTER> {
        PhyRegisterAddress {
            page: 1,
            addr: 18,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn EXTENDED_MODE_CONTROL() -> PhyRegisterAddress<extended::EXTENDED_MODE_CONTROL> {
        PhyRegisterAddress {
            page: 1,
            addr: 19,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn EXTENDED_PHY_CONTROL_3() -> PhyRegisterAddress<extended::EXTENDED_PHY_CONTROL_3> {
        PhyRegisterAddress {
            page: 1,
            addr: 20,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn RESERVED_1_WS() -> PhyRegisterAddress<extended::RESERVED_1_WS> {
        PhyRegisterAddress {
            page: 1,
            addr: 21,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn RESERVED_2_WS() -> PhyRegisterAddress<extended::RESERVED_2_WS> {
        PhyRegisterAddress {
            page: 1,
            addr: 22,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn EXTENDED_PHY_CONTROL_4() -> PhyRegisterAddress<extended::EXTENDED_PHY_CONTROL_4> {
        PhyRegisterAddress {
            page: 1,
            addr: 23,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn VERIPHY_CTRL_REG1() -> PhyRegisterAddress<extended::VERIPHY_CTRL_REG1> {
        PhyRegisterAddress {
            page: 1,
            addr: 24,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn VERIPHY_CTRL_REG2() -> PhyRegisterAddress<extended::VERIPHY_CTRL_REG2> {
        PhyRegisterAddress {
            page: 1,
            addr: 25,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn VERIPHY_CTRL_REG3() -> PhyRegisterAddress<extended::VERIPHY_CTRL_REG3> {
        PhyRegisterAddress {
            page: 1,
            addr: 26,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn EXT_28() -> PhyRegisterAddress<extended::EXT_28> {
        PhyRegisterAddress {
            page: 1,
            addr: 28,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn EPG_CTRL_REG_1() -> PhyRegisterAddress<extended::EPG_CTRL_REG_1> {
        PhyRegisterAddress {
            page: 1,
            addr: 29,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn EPG_CTRL_REG_2() -> PhyRegisterAddress<extended::EPG_CTRL_REG_2> {
        PhyRegisterAddress {
            page: 1,
            addr: 30,
            _phantom: PhantomData,
        }
    }
}

/// Extended registers - page 2
pub struct EXTENDED_2 {}
impl EXTENDED_2 {
    #[inline(always)]
    pub const fn CU_PMD_TX_CTRL() -> PhyRegisterAddress<extended_2::CU_PMD_TX_CTRL> {
        PhyRegisterAddress {
            page: 2,
            addr: 16,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn EEE_CONTROL() -> PhyRegisterAddress<extended_2::EEE_CONTROL> {
        PhyRegisterAddress {
            page: 2,
            addr: 17,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn EXTENDED_CHIP_ID() -> PhyRegisterAddress<extended_2::EXTENDED_CHIP_ID> {
        PhyRegisterAddress {
            page: 2,
            addr: 18,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn TESLA_RGMII_CONTROL() -> PhyRegisterAddress<extended_2::TESLA_RGMII_CONTROL> {
        PhyRegisterAddress {
            page: 2,
            addr: 18,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn RGMII_CONTROL() -> PhyRegisterAddress<extended_2::RGMII_CONTROL> {
        PhyRegisterAddress {
            page: 2,
            addr: 20,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn WOL_LOWER_MAC_ADDR() -> PhyRegisterAddress<extended_2::WOL_LOWER_MAC_ADDR> {
        PhyRegisterAddress {
            page: 2,
            addr: 21,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn WOL_MID_MAC_ADDR() -> PhyRegisterAddress<extended_2::WOL_MID_MAC_ADDR> {
        PhyRegisterAddress {
            page: 2,
            addr: 22,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn WOL_UPPER_MAC_ADDR() -> PhyRegisterAddress<extended_2::WOL_UPPER_MAC_ADDR> {
        PhyRegisterAddress {
            page: 2,
            addr: 23,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn WOL_LOWER_PASSWD() -> PhyRegisterAddress<extended_2::WOL_LOWER_PASSWD> {
        PhyRegisterAddress {
            page: 2,
            addr: 24,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn WOL_MID_PASSWD() -> PhyRegisterAddress<extended_2::WOL_MID_PASSWD> {
        PhyRegisterAddress {
            page: 2,
            addr: 25,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn WOL_UPPER_PASSWD() -> PhyRegisterAddress<extended_2::WOL_UPPER_PASSWD> {
        PhyRegisterAddress {
            page: 2,
            addr: 26,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn WOL_CONTROL() -> PhyRegisterAddress<extended_2::WOL_CONTROL> {
        PhyRegisterAddress {
            page: 2,
            addr: 27,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn EXTENDED_INTERRUPT_MASK() -> PhyRegisterAddress<extended_2::EXTENDED_INTERRUPT_MASK>
    {
        PhyRegisterAddress {
            page: 2,
            addr: 28,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn EXTENDED_INTERRUPT_STATUS(
    ) -> PhyRegisterAddress<extended_2::EXTENDED_INTERRUPT_STATUS> {
        PhyRegisterAddress {
            page: 2,
            addr: 29,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn EXTENDED_RING_RESILIENCY_CTRL(
    ) -> PhyRegisterAddress<extended_2::EXTENDED_RING_RESILIENCY_CTRL> {
        PhyRegisterAddress {
            page: 2,
            addr: 30,
            _phantom: PhantomData,
        }
    }
}

/// Extended registers - page 3
pub struct EXTENDED_3 {}
impl EXTENDED_3 {
    #[inline(always)]
    pub const fn MAC_SERDES_PCS_CONTROL() -> PhyRegisterAddress<extended_3::MAC_SERDES_PCS_CONTROL>
    {
        PhyRegisterAddress {
            page: 3,
            addr: 16,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn MAC_SERDES_PCS_STATUS() -> PhyRegisterAddress<extended_3::MAC_SERDES_PCS_STATUS> {
        PhyRegisterAddress {
            page: 3,
            addr: 17,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn MAC_SERDES_CLAUSE_37_ADVERTISED_ABILITY(
    ) -> PhyRegisterAddress<extended_3::MAC_SERDES_CLAUSE_37_ADVERTISED_ABILITY> {
        PhyRegisterAddress {
            page: 3,
            addr: 18,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn REVERED_18() -> PhyRegisterAddress<extended_3::REVERED_18> {
        PhyRegisterAddress {
            page: 3,
            addr: 18,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn MAC_SERDES_STATUS() -> PhyRegisterAddress<extended_3::MAC_SERDES_STATUS> {
        PhyRegisterAddress {
            page: 3,
            addr: 20,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn MEDIA_SERDES_TX_GOOD_PACKET_COUNTER(
    ) -> PhyRegisterAddress<extended_3::MEDIA_SERDES_TX_GOOD_PACKET_COUNTER> {
        PhyRegisterAddress {
            page: 3,
            addr: 21,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn MEDIA_SERDES_TX_CRC_ERROR_COUNTER(
    ) -> PhyRegisterAddress<extended_3::MEDIA_SERDES_TX_CRC_ERROR_COUNTER> {
        PhyRegisterAddress {
            page: 3,
            addr: 22,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn MEDIA_SERDES_PCS_CONTROL(
    ) -> PhyRegisterAddress<extended_3::MEDIA_SERDES_PCS_CONTROL> {
        PhyRegisterAddress {
            page: 3,
            addr: 23,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn MEDIA_SERDES_PCS_STATUS() -> PhyRegisterAddress<extended_3::MEDIA_SERDES_PCS_STATUS>
    {
        PhyRegisterAddress {
            page: 3,
            addr: 24,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn MEDIA_SERDES_CLAUSE_37_LP_ABILITY(
    ) -> PhyRegisterAddress<extended_3::MEDIA_SERDES_CLAUSE_37_LP_ABILITY> {
        PhyRegisterAddress {
            page: 3,
            addr: 26,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn MEDIA_SERDES_STATUS() -> PhyRegisterAddress<extended_3::MEDIA_SERDES_STATUS> {
        PhyRegisterAddress {
            page: 3,
            addr: 27,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn MEDIA_MAC_SERDES_RX_GOOD_COUNTER(
    ) -> PhyRegisterAddress<extended_3::MEDIA_MAC_SERDES_RX_GOOD_COUNTER> {
        PhyRegisterAddress {
            page: 3,
            addr: 28,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn MEDIA_MAC_SERDES_RX_CRC_CRC_ERR_COUNTER(
    ) -> PhyRegisterAddress<extended_3::MEDIA_MAC_SERDES_RX_CRC_CRC_ERR_COUNTER> {
        PhyRegisterAddress {
            page: 3,
            addr: 29,
            _phantom: PhantomData,
        }
    }
}

/// Extended registers - page 4
pub struct EXTENDED_4 {}
impl EXTENDED_4 {
    #[inline(always)]
    pub const fn REG_1588_PPS_0_MUX_CTRL() -> PhyRegisterAddress<extended_4::REG_1588_PPS_0_MUX_CTRL>
    {
        PhyRegisterAddress {
            page: 4,
            addr: 21,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn SPI_DAISY_CHAIN_CTRL() -> PhyRegisterAddress<extended_4::SPI_DAISY_CHAIN_CTRL> {
        PhyRegisterAddress {
            page: 4,
            addr: 26,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn SPI_DAISY_CHAIN_CNTR() -> PhyRegisterAddress<extended_4::SPI_DAISY_CHAIN_CNTR> {
        PhyRegisterAddress {
            page: 4,
            addr: 28,
            _phantom: PhantomData,
        }
    }
}

/// MACSEC page
pub struct MACSEC {}
impl MACSEC {
    #[inline(always)]
    pub const fn MACSEC_CSR_DATA_LSB() -> PhyRegisterAddress<macsec::MACSEC_CSR_DATA_LSB> {
        PhyRegisterAddress {
            page: 4,
            addr: 17,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn MACSEC_CSR_DATA_MSB() -> PhyRegisterAddress<macsec::MACSEC_CSR_DATA_MSB> {
        PhyRegisterAddress {
            page: 4,
            addr: 18,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn MACSEC_19() -> PhyRegisterAddress<macsec::MACSEC_19> {
        PhyRegisterAddress {
            page: 4,
            addr: 19,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn MACSEC_20() -> PhyRegisterAddress<macsec::MACSEC_20> {
        PhyRegisterAddress {
            page: 4,
            addr: 20,
            _phantom: PhantomData,
        }
    }
}

/// GPIO registers
pub struct GPIO {}
impl GPIO {
    #[inline(always)]
    pub const fn GPIO_0() -> PhyRegisterAddress<gpio::GPIO_0> {
        PhyRegisterAddress {
            page: 16,
            addr: 0,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn GPIO_3() -> PhyRegisterAddress<gpio::GPIO_3> {
        PhyRegisterAddress {
            page: 16,
            addr: 3,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn GPIO_4() -> PhyRegisterAddress<gpio::GPIO_4> {
        PhyRegisterAddress {
            page: 16,
            addr: 4,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn GPIO_5() -> PhyRegisterAddress<gpio::GPIO_5> {
        PhyRegisterAddress {
            page: 16,
            addr: 5,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn GPIO_6() -> PhyRegisterAddress<gpio::GPIO_6> {
        PhyRegisterAddress {
            page: 16,
            addr: 6,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn GPIO_7() -> PhyRegisterAddress<gpio::GPIO_7> {
        PhyRegisterAddress {
            page: 16,
            addr: 7,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn GPIO_8() -> PhyRegisterAddress<gpio::GPIO_8> {
        PhyRegisterAddress {
            page: 16,
            addr: 8,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn GPIO_9() -> PhyRegisterAddress<gpio::GPIO_9> {
        PhyRegisterAddress {
            page: 16,
            addr: 9,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn GPIO_10() -> PhyRegisterAddress<gpio::GPIO_10> {
        PhyRegisterAddress {
            page: 16,
            addr: 10,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn GPIO_11() -> PhyRegisterAddress<gpio::GPIO_11> {
        PhyRegisterAddress {
            page: 16,
            addr: 11,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn GPIO_12() -> PhyRegisterAddress<gpio::GPIO_12> {
        PhyRegisterAddress {
            page: 16,
            addr: 12,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn SIGDET_GPIO_CONTROL() -> PhyRegisterAddress<gpio::SIGDET_GPIO_CONTROL> {
        PhyRegisterAddress {
            page: 16,
            addr: 13,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn GPIO_CONTROL_2() -> PhyRegisterAddress<gpio::GPIO_CONTROL_2> {
        PhyRegisterAddress {
            page: 16,
            addr: 14,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn GPIO_15() -> PhyRegisterAddress<gpio::GPIO_15> {
        PhyRegisterAddress {
            page: 16,
            addr: 15,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn GPIO_INPUT() -> PhyRegisterAddress<gpio::GPIO_INPUT> {
        PhyRegisterAddress {
            page: 16,
            addr: 15,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn GPIO_OUTPUT() -> PhyRegisterAddress<gpio::GPIO_OUTPUT> {
        PhyRegisterAddress {
            page: 16,
            addr: 16,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn GPIO_IN_OUT_CONF() -> PhyRegisterAddress<gpio::GPIO_IN_OUT_CONF> {
        PhyRegisterAddress {
            page: 16,
            addr: 17,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn MICRO_PAGE() -> PhyRegisterAddress<gpio::MICRO_PAGE> {
        PhyRegisterAddress {
            page: 16,
            addr: 18,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn GPIO_CONTROL_3() -> PhyRegisterAddress<gpio::GPIO_CONTROL_3> {
        PhyRegisterAddress {
            page: 16,
            addr: 19,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn MAC_MODE_AND_FAST_LINK() -> PhyRegisterAddress<gpio::MAC_MODE_AND_FAST_LINK> {
        PhyRegisterAddress {
            page: 16,
            addr: 19,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn I2C_MUX_CONTROL_1() -> PhyRegisterAddress<gpio::I2C_MUX_CONTROL_1> {
        PhyRegisterAddress {
            page: 16,
            addr: 20,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn I2C_MUX_CONTROL_2() -> PhyRegisterAddress<gpio::I2C_MUX_CONTROL_2> {
        PhyRegisterAddress {
            page: 16,
            addr: 21,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn I2C_MUX_DATA_READ_WRITE() -> PhyRegisterAddress<gpio::I2C_MUX_DATA_READ_WRITE> {
        PhyRegisterAddress {
            page: 16,
            addr: 22,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn RECOVERED_CLOCK_0_CONTROL() -> PhyRegisterAddress<gpio::RECOVERED_CLOCK_0_CONTROL>
    {
        PhyRegisterAddress {
            page: 16,
            addr: 23,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn RECOVERED_CLOCK_1_CONTROL() -> PhyRegisterAddress<gpio::RECOVERED_CLOCK_1_CONTROL>
    {
        PhyRegisterAddress {
            page: 16,
            addr: 24,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn ENHANCED_LED_CONTROL() -> PhyRegisterAddress<gpio::ENHANCED_LED_CONTROL> {
        PhyRegisterAddress {
            page: 16,
            addr: 25,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn TEMP_CONF() -> PhyRegisterAddress<gpio::TEMP_CONF> {
        PhyRegisterAddress {
            page: 16,
            addr: 26,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn TEMP_VAL() -> PhyRegisterAddress<gpio::TEMP_VAL> {
        PhyRegisterAddress {
            page: 16,
            addr: 28,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn EXTENDED_REVISION() -> PhyRegisterAddress<gpio::EXTENDED_REVISION> {
        PhyRegisterAddress {
            page: 16,
            addr: 30,
            _phantom: PhantomData,
        }
    }
}

/// 1588 (PTP) registers
pub struct PAGE_1588 {}
impl PAGE_1588 {
    #[inline(always)]
    pub const fn REG_1588_16() -> PhyRegisterAddress<page_1588::REG_1588_16> {
        PhyRegisterAddress {
            page: 5512,
            addr: 16,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn REG_1588_CSR_DATA_LSB() -> PhyRegisterAddress<page_1588::REG_1588_CSR_DATA_LSB> {
        PhyRegisterAddress {
            page: 5512,
            addr: 17,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn REG_1588_CSR_DATA_MSB() -> PhyRegisterAddress<page_1588::REG_1588_CSR_DATA_MSB> {
        PhyRegisterAddress {
            page: 5512,
            addr: 18,
            _phantom: PhantomData,
        }
    }
}

/// Test registers
pub struct TEST {}
impl TEST {
    #[inline(always)]
    pub const fn TEST_PAGE_0() -> PhyRegisterAddress<test::TEST_PAGE_0> {
        PhyRegisterAddress {
            page: 10800,
            addr: 0,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn TEST_PAGE_1() -> PhyRegisterAddress<test::TEST_PAGE_1> {
        PhyRegisterAddress {
            page: 10800,
            addr: 1,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn TEST_PAGE_2() -> PhyRegisterAddress<test::TEST_PAGE_2> {
        PhyRegisterAddress {
            page: 10800,
            addr: 2,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn TEST_PAGE_3() -> PhyRegisterAddress<test::TEST_PAGE_3> {
        PhyRegisterAddress {
            page: 10800,
            addr: 3,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn TEST_PAGE_5() -> PhyRegisterAddress<test::TEST_PAGE_5> {
        PhyRegisterAddress {
            page: 10800,
            addr: 5,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn TEST_PAGE_8() -> PhyRegisterAddress<test::TEST_PAGE_8> {
        PhyRegisterAddress {
            page: 10800,
            addr: 8,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn TEST_PAGE_9() -> PhyRegisterAddress<test::TEST_PAGE_9> {
        PhyRegisterAddress {
            page: 10800,
            addr: 9,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn TEST_PAGE_12() -> PhyRegisterAddress<test::TEST_PAGE_12> {
        PhyRegisterAddress {
            page: 10800,
            addr: 12,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn TEST_PAGE_19() -> PhyRegisterAddress<test::TEST_PAGE_19> {
        PhyRegisterAddress {
            page: 10800,
            addr: 19,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn TEST_PAGE_20() -> PhyRegisterAddress<test::TEST_PAGE_20> {
        PhyRegisterAddress {
            page: 10800,
            addr: 20,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn TEST_PAGE_22() -> PhyRegisterAddress<test::TEST_PAGE_22> {
        PhyRegisterAddress {
            page: 10800,
            addr: 22,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn TEST_PAGE_23() -> PhyRegisterAddress<test::TEST_PAGE_23> {
        PhyRegisterAddress {
            page: 10800,
            addr: 23,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn TEST_PAGE_24() -> PhyRegisterAddress<test::TEST_PAGE_24> {
        PhyRegisterAddress {
            page: 10800,
            addr: 24,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn TEST_PAGE_25() -> PhyRegisterAddress<test::TEST_PAGE_25> {
        PhyRegisterAddress {
            page: 10800,
            addr: 25,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn TEST_PAGE_27() -> PhyRegisterAddress<test::TEST_PAGE_27> {
        PhyRegisterAddress {
            page: 10800,
            addr: 27,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn TEST_PAGE_28() -> PhyRegisterAddress<test::TEST_PAGE_28> {
        PhyRegisterAddress {
            page: 10800,
            addr: 28,
            _phantom: PhantomData,
        }
    }
}

/// Token ring registers
pub struct TR {}
impl TR {
    #[inline(always)]
    pub const fn TR_0() -> PhyRegisterAddress<tr::TR_0> {
        PhyRegisterAddress {
            page: 21173,
            addr: 0,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn TR_1() -> PhyRegisterAddress<tr::TR_1> {
        PhyRegisterAddress {
            page: 21173,
            addr: 1,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn TR_2() -> PhyRegisterAddress<tr::TR_2> {
        PhyRegisterAddress {
            page: 21173,
            addr: 2,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn TR_16() -> PhyRegisterAddress<tr::TR_16> {
        PhyRegisterAddress {
            page: 21173,
            addr: 16,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn TR_17() -> PhyRegisterAddress<tr::TR_17> {
        PhyRegisterAddress {
            page: 21173,
            addr: 17,
            _phantom: PhantomData,
        }
    }
    #[inline(always)]
    pub const fn TR_18() -> PhyRegisterAddress<tr::TR_18> {
        PhyRegisterAddress {
            page: 21173,
            addr: 18,
            _phantom: PhantomData,
        }
    }
}
