// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Based on mesa-v2021.09 (https://github.com/microchip-ung/mesa/) which has
// the following copyright and license:
//
// Copyright (c) 2004-2021 Microchip Technology Inc. and its subsidiaries.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// This is an autogenerated file; do not edit by hand!

use crate::types::PhyRegisterAddress;

pub mod extended;
pub mod extended_2;
pub mod extended_3;
pub mod extended_4;
pub mod gpio;
pub mod macsec;
pub mod page_1588;
pub mod standard;
pub mod test;
pub mod tr;

/// Standard registers
pub struct STANDARD {}
impl STANDARD {
    #[inline(always)]
    pub fn MODE_CONTROL() -> PhyRegisterAddress<standard::MODE_CONTROL> {
        PhyRegisterAddress::new(0, 0)
    }
    #[inline(always)]
    pub fn MODE_STATUS() -> PhyRegisterAddress<standard::MODE_STATUS> {
        PhyRegisterAddress::new(0, 1)
    }
    #[inline(always)]
    pub fn IDENTIFIER_1() -> PhyRegisterAddress<standard::IDENTIFIER_1> {
        PhyRegisterAddress::new(0, 2)
    }
    #[inline(always)]
    pub fn IDENTIFIER_2() -> PhyRegisterAddress<standard::IDENTIFIER_2> {
        PhyRegisterAddress::new(0, 3)
    }
    #[inline(always)]
    pub fn DEVICE_AUTONEG_ADVERTISEMENT(
    ) -> PhyRegisterAddress<standard::DEVICE_AUTONEG_ADVERTISEMENT> {
        PhyRegisterAddress::new(0, 4)
    }
    #[inline(always)]
    pub fn AUTONEGOTIATION_LINK_PARTNER_ABILITY(
    ) -> PhyRegisterAddress<standard::AUTONEGOTIATION_LINK_PARTNER_ABILITY> {
        PhyRegisterAddress::new(0, 5)
    }
    #[inline(always)]
    pub fn REG_1000BASE_T_CONTROL() -> PhyRegisterAddress<standard::REG_1000BASE_T_CONTROL> {
        PhyRegisterAddress::new(0, 9)
    }
    #[inline(always)]
    pub fn REG_1000BASE_T_STATUS() -> PhyRegisterAddress<standard::REG_1000BASE_T_STATUS> {
        PhyRegisterAddress::new(0, 10)
    }
    #[inline(always)]
    pub fn MMD_EEE_ACCESS() -> PhyRegisterAddress<standard::MMD_EEE_ACCESS> {
        PhyRegisterAddress::new(0, 13)
    }
    #[inline(always)]
    pub fn MMD_ADDR_OR_DATA() -> PhyRegisterAddress<standard::MMD_ADDR_OR_DATA> {
        PhyRegisterAddress::new(0, 14)
    }
    #[inline(always)]
    pub fn BYPASS_CONTROL() -> PhyRegisterAddress<standard::BYPASS_CONTROL> {
        PhyRegisterAddress::new(0, 18)
    }
    #[inline(always)]
    pub fn ERROR_COUNTER_1() -> PhyRegisterAddress<standard::ERROR_COUNTER_1> {
        PhyRegisterAddress::new(0, 19)
    }
    #[inline(always)]
    pub fn EXTENDED_CONTROL_AND_STATUS_20(
    ) -> PhyRegisterAddress<standard::EXTENDED_CONTROL_AND_STATUS_20> {
        PhyRegisterAddress::new(0, 20)
    }
    #[inline(always)]
    pub fn ERROR_COUNTER_3() -> PhyRegisterAddress<standard::ERROR_COUNTER_3> {
        PhyRegisterAddress::new(0, 21)
    }
    #[inline(always)]
    pub fn EXTENDED_CONTROL_AND_STATUS() -> PhyRegisterAddress<standard::EXTENDED_CONTROL_AND_STATUS>
    {
        PhyRegisterAddress::new(0, 22)
    }
    #[inline(always)]
    pub fn EXTENDED_PHY_CONTROL() -> PhyRegisterAddress<standard::EXTENDED_PHY_CONTROL> {
        PhyRegisterAddress::new(0, 23)
    }
    #[inline(always)]
    pub fn EXTENDED_PHY_CONTROL_2() -> PhyRegisterAddress<standard::EXTENDED_PHY_CONTROL_2> {
        PhyRegisterAddress::new(0, 24)
    }
    #[inline(always)]
    pub fn INTERRUPT_MASK() -> PhyRegisterAddress<standard::INTERRUPT_MASK> {
        PhyRegisterAddress::new(0, 25)
    }
    #[inline(always)]
    pub fn INTERRUPT_STATUS() -> PhyRegisterAddress<standard::INTERRUPT_STATUS> {
        PhyRegisterAddress::new(0, 26)
    }
    #[inline(always)]
    pub fn COBRA_LED_MODE_SELECT() -> PhyRegisterAddress<standard::COBRA_LED_MODE_SELECT> {
        PhyRegisterAddress::new(0, 27)
    }
    #[inline(always)]
    pub fn STD_27() -> PhyRegisterAddress<standard::STD_27> {
        PhyRegisterAddress::new(0, 27)
    }
    #[inline(always)]
    pub fn AUXILIARY_CONTROL_AND_STATUS(
    ) -> PhyRegisterAddress<standard::AUXILIARY_CONTROL_AND_STATUS> {
        PhyRegisterAddress::new(0, 28)
    }
    #[inline(always)]
    pub fn LED_MODE_SELECT() -> PhyRegisterAddress<standard::LED_MODE_SELECT> {
        PhyRegisterAddress::new(0, 29)
    }
    #[inline(always)]
    pub fn LED_BEHAVIOR() -> PhyRegisterAddress<standard::LED_BEHAVIOR> {
        PhyRegisterAddress::new(0, 30)
    }
    #[inline(always)]
    pub fn PAGE() -> PhyRegisterAddress<standard::PAGE> {
        PhyRegisterAddress::new(0, 31)
    }
}

/// Extended registers
pub struct EXTENDED {}
impl EXTENDED {
    #[inline(always)]
    pub fn REG_17E() -> PhyRegisterAddress<extended::REG_17E> {
        PhyRegisterAddress::new(1, 17)
    }
    #[inline(always)]
    pub fn CU_MEDIA_CRC_GOOD_COUNTER() -> PhyRegisterAddress<extended::CU_MEDIA_CRC_GOOD_COUNTER> {
        PhyRegisterAddress::new(1, 18)
    }
    #[inline(always)]
    pub fn EXTENDED_MODE_CONTROL() -> PhyRegisterAddress<extended::EXTENDED_MODE_CONTROL> {
        PhyRegisterAddress::new(1, 19)
    }
    #[inline(always)]
    pub fn EXTENDED_PHY_CONTROL_3() -> PhyRegisterAddress<extended::EXTENDED_PHY_CONTROL_3> {
        PhyRegisterAddress::new(1, 20)
    }
    #[inline(always)]
    pub fn RESERVED_1_WS() -> PhyRegisterAddress<extended::RESERVED_1_WS> {
        PhyRegisterAddress::new(1, 21)
    }
    #[inline(always)]
    pub fn RESERVED_2_WS() -> PhyRegisterAddress<extended::RESERVED_2_WS> {
        PhyRegisterAddress::new(1, 22)
    }
    #[inline(always)]
    pub fn EXTENDED_PHY_CONTROL_4() -> PhyRegisterAddress<extended::EXTENDED_PHY_CONTROL_4> {
        PhyRegisterAddress::new(1, 23)
    }
    #[inline(always)]
    pub fn VERIPHY_CTRL_REG1() -> PhyRegisterAddress<extended::VERIPHY_CTRL_REG1> {
        PhyRegisterAddress::new(1, 24)
    }
    #[inline(always)]
    pub fn VERIPHY_CTRL_REG2() -> PhyRegisterAddress<extended::VERIPHY_CTRL_REG2> {
        PhyRegisterAddress::new(1, 25)
    }
    #[inline(always)]
    pub fn VERIPHY_CTRL_REG3() -> PhyRegisterAddress<extended::VERIPHY_CTRL_REG3> {
        PhyRegisterAddress::new(1, 26)
    }
    #[inline(always)]
    pub fn EXT_28() -> PhyRegisterAddress<extended::EXT_28> {
        PhyRegisterAddress::new(1, 28)
    }
}

/// Extended registers - page 2
pub struct EXTENDED_2 {}
impl EXTENDED_2 {
    #[inline(always)]
    pub fn CU_PMD_TX_CTRL() -> PhyRegisterAddress<extended_2::CU_PMD_TX_CTRL> {
        PhyRegisterAddress::new(2, 16)
    }
    #[inline(always)]
    pub fn EEE_CONTROL() -> PhyRegisterAddress<extended_2::EEE_CONTROL> {
        PhyRegisterAddress::new(2, 17)
    }
    #[inline(always)]
    pub fn TESLA_RGMII_CONTROL() -> PhyRegisterAddress<extended_2::TESLA_RGMII_CONTROL> {
        PhyRegisterAddress::new(2, 18)
    }
    #[inline(always)]
    pub fn RGMII_CONTROL() -> PhyRegisterAddress<extended_2::RGMII_CONTROL> {
        PhyRegisterAddress::new(2, 20)
    }
    #[inline(always)]
    pub fn WOL_LOWER_MAC_ADDR() -> PhyRegisterAddress<extended_2::WOL_LOWER_MAC_ADDR> {
        PhyRegisterAddress::new(2, 21)
    }
    #[inline(always)]
    pub fn WOL_MID_MAC_ADDR() -> PhyRegisterAddress<extended_2::WOL_MID_MAC_ADDR> {
        PhyRegisterAddress::new(2, 22)
    }
    #[inline(always)]
    pub fn WOL_UPPER_MAC_ADDR() -> PhyRegisterAddress<extended_2::WOL_UPPER_MAC_ADDR> {
        PhyRegisterAddress::new(2, 23)
    }
    #[inline(always)]
    pub fn WOL_LOWER_PASSWD() -> PhyRegisterAddress<extended_2::WOL_LOWER_PASSWD> {
        PhyRegisterAddress::new(2, 24)
    }
    #[inline(always)]
    pub fn WOL_MID_PASSWD() -> PhyRegisterAddress<extended_2::WOL_MID_PASSWD> {
        PhyRegisterAddress::new(2, 25)
    }
    #[inline(always)]
    pub fn WOL_UPPER_PASSWD() -> PhyRegisterAddress<extended_2::WOL_UPPER_PASSWD> {
        PhyRegisterAddress::new(2, 26)
    }
    #[inline(always)]
    pub fn WOL_CONTROL() -> PhyRegisterAddress<extended_2::WOL_CONTROL> {
        PhyRegisterAddress::new(2, 27)
    }
    #[inline(always)]
    pub fn EXTENDED_INTERRUPT_MASK() -> PhyRegisterAddress<extended_2::EXTENDED_INTERRUPT_MASK> {
        PhyRegisterAddress::new(2, 28)
    }
    #[inline(always)]
    pub fn EXTENDED_INTERRUPT_STATUS() -> PhyRegisterAddress<extended_2::EXTENDED_INTERRUPT_STATUS>
    {
        PhyRegisterAddress::new(2, 29)
    }
    #[inline(always)]
    pub fn EXTENDED_RING_RESILIENCY_CTRL(
    ) -> PhyRegisterAddress<extended_2::EXTENDED_RING_RESILIENCY_CTRL> {
        PhyRegisterAddress::new(2, 30)
    }
}

/// Extended registers - page 3
pub struct EXTENDED_3 {}
impl EXTENDED_3 {
    #[inline(always)]
    pub fn MAC_SERDES_PCS_CONTROL() -> PhyRegisterAddress<extended_3::MAC_SERDES_PCS_CONTROL> {
        PhyRegisterAddress::new(3, 16)
    }
    #[inline(always)]
    pub fn MAC_SERDES_PCS_STATUS() -> PhyRegisterAddress<extended_3::MAC_SERDES_PCS_STATUS> {
        PhyRegisterAddress::new(3, 17)
    }
    #[inline(always)]
    pub fn MAC_SERDES_CLAUSE_37_ADVERTISED_ABILITY(
    ) -> PhyRegisterAddress<extended_3::MAC_SERDES_CLAUSE_37_ADVERTISED_ABILITY> {
        PhyRegisterAddress::new(3, 18)
    }
    #[inline(always)]
    pub fn REVERED_18() -> PhyRegisterAddress<extended_3::REVERED_18> {
        PhyRegisterAddress::new(3, 18)
    }
    #[inline(always)]
    pub fn MAC_SERDES_STATUS() -> PhyRegisterAddress<extended_3::MAC_SERDES_STATUS> {
        PhyRegisterAddress::new(3, 20)
    }
    #[inline(always)]
    pub fn MEDIA_SERDES_TX_GOOD_PACKET_COUNTER(
    ) -> PhyRegisterAddress<extended_3::MEDIA_SERDES_TX_GOOD_PACKET_COUNTER> {
        PhyRegisterAddress::new(3, 21)
    }
    #[inline(always)]
    pub fn MEDIA_SERDES_TX_CRC_ERROR_COUNTER(
    ) -> PhyRegisterAddress<extended_3::MEDIA_SERDES_TX_CRC_ERROR_COUNTER> {
        PhyRegisterAddress::new(3, 22)
    }
    #[inline(always)]
    pub fn MEDIA_SERDES_PCS_CONTROL() -> PhyRegisterAddress<extended_3::MEDIA_SERDES_PCS_CONTROL> {
        PhyRegisterAddress::new(3, 23)
    }
    #[inline(always)]
    pub fn MEDIA_SERDES_PCS_STATUS() -> PhyRegisterAddress<extended_3::MEDIA_SERDES_PCS_STATUS> {
        PhyRegisterAddress::new(3, 24)
    }
    #[inline(always)]
    pub fn MEDIA_SERDES_CLAUSE_37_LP_ABILITY(
    ) -> PhyRegisterAddress<extended_3::MEDIA_SERDES_CLAUSE_37_LP_ABILITY> {
        PhyRegisterAddress::new(3, 26)
    }
    #[inline(always)]
    pub fn MEDIA_SERDES_STATUS() -> PhyRegisterAddress<extended_3::MEDIA_SERDES_STATUS> {
        PhyRegisterAddress::new(3, 27)
    }
    #[inline(always)]
    pub fn MEDIA_MAC_SERDES_RX_GOOD_COUNTER(
    ) -> PhyRegisterAddress<extended_3::MEDIA_MAC_SERDES_RX_GOOD_COUNTER> {
        PhyRegisterAddress::new(3, 28)
    }
    #[inline(always)]
    pub fn MEDIA_MAC_SERDES_RX_CRC_CRC_ERR_COUNTER(
    ) -> PhyRegisterAddress<extended_3::MEDIA_MAC_SERDES_RX_CRC_CRC_ERR_COUNTER> {
        PhyRegisterAddress::new(3, 29)
    }
}

/// Extended registers - page 4
pub struct EXTENDED_4 {}
impl EXTENDED_4 {
    #[inline(always)]
    pub fn REG_1588_PPS_0_MUX_CTRL() -> PhyRegisterAddress<extended_4::REG_1588_PPS_0_MUX_CTRL> {
        PhyRegisterAddress::new(4, 21)
    }
    #[inline(always)]
    pub fn SPI_DAISY_CHAIN_CTRL() -> PhyRegisterAddress<extended_4::SPI_DAISY_CHAIN_CTRL> {
        PhyRegisterAddress::new(4, 26)
    }
    #[inline(always)]
    pub fn SPI_DAISY_CHAIN_CNTR() -> PhyRegisterAddress<extended_4::SPI_DAISY_CHAIN_CNTR> {
        PhyRegisterAddress::new(4, 28)
    }
}

/// MACSEC page
pub struct MACSEC {}
impl MACSEC {
    #[inline(always)]
    pub fn MACSEC_CSR_DATA_LSB() -> PhyRegisterAddress<macsec::MACSEC_CSR_DATA_LSB> {
        PhyRegisterAddress::new(4, 17)
    }
    #[inline(always)]
    pub fn MACSEC_CSR_DATA_MSB() -> PhyRegisterAddress<macsec::MACSEC_CSR_DATA_MSB> {
        PhyRegisterAddress::new(4, 18)
    }
    #[inline(always)]
    pub fn MACSEC_19() -> PhyRegisterAddress<macsec::MACSEC_19> {
        PhyRegisterAddress::new(4, 19)
    }
    #[inline(always)]
    pub fn MACSEC_20() -> PhyRegisterAddress<macsec::MACSEC_20> {
        PhyRegisterAddress::new(4, 20)
    }
}

/// GPIO registers
pub struct GPIO {}
impl GPIO {
    #[inline(always)]
    pub fn GPIO_0() -> PhyRegisterAddress<gpio::GPIO_0> {
        PhyRegisterAddress::new(16, 0)
    }
    #[inline(always)]
    pub fn GPIO_3() -> PhyRegisterAddress<gpio::GPIO_3> {
        PhyRegisterAddress::new(16, 3)
    }
    #[inline(always)]
    pub fn GPIO_4() -> PhyRegisterAddress<gpio::GPIO_4> {
        PhyRegisterAddress::new(16, 4)
    }
    #[inline(always)]
    pub fn GPIO_5() -> PhyRegisterAddress<gpio::GPIO_5> {
        PhyRegisterAddress::new(16, 5)
    }
    #[inline(always)]
    pub fn GPIO_6() -> PhyRegisterAddress<gpio::GPIO_6> {
        PhyRegisterAddress::new(16, 6)
    }
    #[inline(always)]
    pub fn GPIO_7() -> PhyRegisterAddress<gpio::GPIO_7> {
        PhyRegisterAddress::new(16, 7)
    }
    #[inline(always)]
    pub fn GPIO_8() -> PhyRegisterAddress<gpio::GPIO_8> {
        PhyRegisterAddress::new(16, 8)
    }
    #[inline(always)]
    pub fn GPIO_9() -> PhyRegisterAddress<gpio::GPIO_9> {
        PhyRegisterAddress::new(16, 9)
    }
    #[inline(always)]
    pub fn GPIO_10() -> PhyRegisterAddress<gpio::GPIO_10> {
        PhyRegisterAddress::new(16, 10)
    }
    #[inline(always)]
    pub fn GPIO_11() -> PhyRegisterAddress<gpio::GPIO_11> {
        PhyRegisterAddress::new(16, 11)
    }
    #[inline(always)]
    pub fn GPIO_12() -> PhyRegisterAddress<gpio::GPIO_12> {
        PhyRegisterAddress::new(16, 12)
    }
    #[inline(always)]
    pub fn SIGDET_GPIO_CONTROL() -> PhyRegisterAddress<gpio::SIGDET_GPIO_CONTROL> {
        PhyRegisterAddress::new(16, 13)
    }
    #[inline(always)]
    pub fn GPIO_CONTROL_2() -> PhyRegisterAddress<gpio::GPIO_CONTROL_2> {
        PhyRegisterAddress::new(16, 14)
    }
    #[inline(always)]
    pub fn GPIO_15() -> PhyRegisterAddress<gpio::GPIO_15> {
        PhyRegisterAddress::new(16, 15)
    }
    #[inline(always)]
    pub fn GPIO_INPUT() -> PhyRegisterAddress<gpio::GPIO_INPUT> {
        PhyRegisterAddress::new(16, 15)
    }
    #[inline(always)]
    pub fn GPIO_OUTPUT() -> PhyRegisterAddress<gpio::GPIO_OUTPUT> {
        PhyRegisterAddress::new(16, 16)
    }
    #[inline(always)]
    pub fn GPIO_IN_OUT_CONF() -> PhyRegisterAddress<gpio::GPIO_IN_OUT_CONF> {
        PhyRegisterAddress::new(16, 17)
    }
    #[inline(always)]
    pub fn MICRO_PAGE() -> PhyRegisterAddress<gpio::MICRO_PAGE> {
        PhyRegisterAddress::new(16, 18)
    }
    #[inline(always)]
    pub fn GPIO_CONTROL_3() -> PhyRegisterAddress<gpio::GPIO_CONTROL_3> {
        PhyRegisterAddress::new(16, 19)
    }
    #[inline(always)]
    pub fn MAC_MODE_AND_FAST_LINK() -> PhyRegisterAddress<gpio::MAC_MODE_AND_FAST_LINK> {
        PhyRegisterAddress::new(16, 19)
    }
    #[inline(always)]
    pub fn I2C_MUX_CONTROL_1() -> PhyRegisterAddress<gpio::I2C_MUX_CONTROL_1> {
        PhyRegisterAddress::new(16, 20)
    }
    #[inline(always)]
    pub fn I2C_MUX_CONTROL_2() -> PhyRegisterAddress<gpio::I2C_MUX_CONTROL_2> {
        PhyRegisterAddress::new(16, 21)
    }
    #[inline(always)]
    pub fn I2C_MUX_DATA_READ_WRITE() -> PhyRegisterAddress<gpio::I2C_MUX_DATA_READ_WRITE> {
        PhyRegisterAddress::new(16, 22)
    }
    #[inline(always)]
    pub fn RECOVERED_CLOCK_0_CONTROL() -> PhyRegisterAddress<gpio::RECOVERED_CLOCK_0_CONTROL> {
        PhyRegisterAddress::new(16, 23)
    }
    #[inline(always)]
    pub fn RECOVERED_CLOCK_1_CONTROL() -> PhyRegisterAddress<gpio::RECOVERED_CLOCK_1_CONTROL> {
        PhyRegisterAddress::new(16, 24)
    }
    #[inline(always)]
    pub fn ENHANCED_LED_CONTROL() -> PhyRegisterAddress<gpio::ENHANCED_LED_CONTROL> {
        PhyRegisterAddress::new(16, 25)
    }
    #[inline(always)]
    pub fn TEMP_CONF() -> PhyRegisterAddress<gpio::TEMP_CONF> {
        PhyRegisterAddress::new(16, 26)
    }
    #[inline(always)]
    pub fn TEMP_VAL() -> PhyRegisterAddress<gpio::TEMP_VAL> {
        PhyRegisterAddress::new(16, 28)
    }
    #[inline(always)]
    pub fn EXTENDED_REVISION() -> PhyRegisterAddress<gpio::EXTENDED_REVISION> {
        PhyRegisterAddress::new(16, 30)
    }
}

/// 1588 (PTP) registers
pub struct PAGE_1588 {}
impl PAGE_1588 {
    #[inline(always)]
    pub fn REG_1588_16() -> PhyRegisterAddress<page_1588::REG_1588_16> {
        PhyRegisterAddress::new(5512, 16)
    }
    #[inline(always)]
    pub fn REG_1588_CSR_DATA_LSB() -> PhyRegisterAddress<page_1588::REG_1588_CSR_DATA_LSB> {
        PhyRegisterAddress::new(5512, 17)
    }
    #[inline(always)]
    pub fn REG_1588_CSR_DATA_MSB() -> PhyRegisterAddress<page_1588::REG_1588_CSR_DATA_MSB> {
        PhyRegisterAddress::new(5512, 18)
    }
}

/// Test registers
pub struct TEST {}
impl TEST {
    #[inline(always)]
    pub fn TEST_PAGE_0() -> PhyRegisterAddress<test::TEST_PAGE_0> {
        PhyRegisterAddress::new(10800, 0)
    }
    #[inline(always)]
    pub fn TEST_PAGE_1() -> PhyRegisterAddress<test::TEST_PAGE_1> {
        PhyRegisterAddress::new(10800, 1)
    }
    #[inline(always)]
    pub fn TEST_PAGE_2() -> PhyRegisterAddress<test::TEST_PAGE_2> {
        PhyRegisterAddress::new(10800, 2)
    }
    #[inline(always)]
    pub fn TEST_PAGE_3() -> PhyRegisterAddress<test::TEST_PAGE_3> {
        PhyRegisterAddress::new(10800, 3)
    }
    #[inline(always)]
    pub fn TEST_PAGE_5() -> PhyRegisterAddress<test::TEST_PAGE_5> {
        PhyRegisterAddress::new(10800, 5)
    }
    #[inline(always)]
    pub fn TEST_PAGE_8() -> PhyRegisterAddress<test::TEST_PAGE_8> {
        PhyRegisterAddress::new(10800, 8)
    }
    #[inline(always)]
    pub fn TEST_PAGE_9() -> PhyRegisterAddress<test::TEST_PAGE_9> {
        PhyRegisterAddress::new(10800, 9)
    }
    #[inline(always)]
    pub fn TEST_PAGE_12() -> PhyRegisterAddress<test::TEST_PAGE_12> {
        PhyRegisterAddress::new(10800, 12)
    }
    #[inline(always)]
    pub fn TEST_PAGE_19() -> PhyRegisterAddress<test::TEST_PAGE_19> {
        PhyRegisterAddress::new(10800, 19)
    }
    #[inline(always)]
    pub fn TEST_PAGE_20() -> PhyRegisterAddress<test::TEST_PAGE_20> {
        PhyRegisterAddress::new(10800, 20)
    }
    #[inline(always)]
    pub fn TEST_PAGE_22() -> PhyRegisterAddress<test::TEST_PAGE_22> {
        PhyRegisterAddress::new(10800, 22)
    }
    #[inline(always)]
    pub fn TEST_PAGE_23() -> PhyRegisterAddress<test::TEST_PAGE_23> {
        PhyRegisterAddress::new(10800, 23)
    }
    #[inline(always)]
    pub fn TEST_PAGE_24() -> PhyRegisterAddress<test::TEST_PAGE_24> {
        PhyRegisterAddress::new(10800, 24)
    }
    #[inline(always)]
    pub fn TEST_PAGE_25() -> PhyRegisterAddress<test::TEST_PAGE_25> {
        PhyRegisterAddress::new(10800, 25)
    }
    #[inline(always)]
    pub fn TEST_PAGE_27() -> PhyRegisterAddress<test::TEST_PAGE_27> {
        PhyRegisterAddress::new(10800, 27)
    }
    #[inline(always)]
    pub fn TEST_PAGE_28() -> PhyRegisterAddress<test::TEST_PAGE_28> {
        PhyRegisterAddress::new(10800, 28)
    }
}

/// Token ring registers
pub struct TR {}
impl TR {
    #[inline(always)]
    pub fn TR_0() -> PhyRegisterAddress<tr::TR_0> {
        PhyRegisterAddress::new(21173, 0)
    }
    #[inline(always)]
    pub fn TR_1() -> PhyRegisterAddress<tr::TR_1> {
        PhyRegisterAddress::new(21173, 1)
    }
    #[inline(always)]
    pub fn TR_2() -> PhyRegisterAddress<tr::TR_2> {
        PhyRegisterAddress::new(21173, 2)
    }
    #[inline(always)]
    pub fn TR_16() -> PhyRegisterAddress<tr::TR_16> {
        PhyRegisterAddress::new(21173, 16)
    }
    #[inline(always)]
    pub fn TR_17() -> PhyRegisterAddress<tr::TR_17> {
        PhyRegisterAddress::new(21173, 17)
    }
    #[inline(always)]
    pub fn TR_18() -> PhyRegisterAddress<tr::TR_18> {
        PhyRegisterAddress::new(21173, 18)
    }
}
