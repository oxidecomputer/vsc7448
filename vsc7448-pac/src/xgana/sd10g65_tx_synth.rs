// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Based on mesa-v2021.09 (https://github.com/microchip-ung/mesa/) which has
// the following copyright and license:
//
// Copyright (c) 2004-2021 Microchip Technology Inc. and its subsidiaries.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// This is an autogenerated file; do not edit by hand!
use derive_more::{From, Into};

/// Register `F2DF_CFG_STAT`
///
/// F2DF Configuration / status register
///
/// Configuration / status register for the F2DF control logic.
#[derive(From, Into)]
pub struct F2DF_CFG_STAT(u32);
impl F2DF_CFG_STAT {
    /// Data valid value in "PropperSide" state. '0': data valid flaged only in "Lock" state; '1' data valid also flaged in "PropperSide" state.
    pub fn f2df_data_valid_propper_side(&self) -> u32 {
        (self.0 & 0x8) >> 3
    }
    pub fn set_f2df_data_valid_propper_side(&mut self, value: u32) {
        let value = value << 3;
        assert!(value <= 0x8);
        self.0 &= !0x8;
        self.0 |= value;
    }
    /// F2df enable. Enabling the f2df circuit automatically switches the input of the CDR-loop to the f2df control block (overrules synth_cpmd_dig_sel and synth_cpmd_dig_ena) and replaces the data valid signal from the core logic by the data valid signal generated by the f2df control logic.
    pub fn f2df_enable(&self) -> u32 {
        (self.0 & 0x1) >> 0
    }
    pub fn set_f2df_enable(&mut self, value: u32) {
        let value = value << 0;
        assert!(value <= 0x1);
        self.0 &= !0x1;
        self.0 |= value;
    }
    /// Actual FSM state: '0': Iffy; '1': WrongSide; '2': PropperSide; '3': Lock.
    pub fn f2df_fsm_state(&self) -> u32 {
        (self.0 & 0x1800000) >> 23
    }
    pub fn set_f2df_fsm_state(&mut self, value: u32) {
        let value = value << 23;
        assert!(value <= 0x1800000);
        self.0 &= !0x1800000;
        self.0 |= value;
    }
    /// Sampling mode: '0' one parallel data word per sampled clock cycle; '1' clock pattern sampled in two parallel data words.
    pub fn f2df_sample_mode(&self) -> u32 {
        (self.0 & 0x2) >> 1
    }
    pub fn set_f2df_sample_mode(&mut self, value: u32) {
        let value = value << 1;
        assert!(value <= 0x2);
        self.0 &= !0x2;
        self.0 |= value;
    }
    /// Select bit from input data used for side detection. Debug feature: '31' select constant zero, '30' select constant one.
    pub fn f2df_side_det_bit_sel(&self) -> u32 {
        (self.0 & 0x3e0000) >> 17
    }
    pub fn set_f2df_side_det_bit_sel(&mut self, value: u32) {
        let value = value << 17;
        assert!(value <= 0x3e0000);
        self.0 &= !0x3e0000;
        self.0 |= value;
    }
    /// Sample '1' => increment 8bit filter saturating counter by 2**n. Cnt >= 0xC0 => PropperSide detected.
    pub fn f2df_side_det_ones_weight(&self) -> u32 {
        (self.0 & 0x1c000) >> 14
    }
    pub fn set_f2df_side_det_ones_weight(&mut self, value: u32) {
        let value = value << 14;
        assert!(value <= 0x1c000);
        self.0 &= !0x1c000;
        self.0 |= value;
    }
    /// Sticky bit: indicate loosing propper side detection in lock state.
    pub fn f2df_side_det_sticky(&self) -> u32 {
        (self.0 & 0x400000) >> 22
    }
    pub fn set_f2df_side_det_sticky(&mut self, value: u32) {
        let value = value << 22;
        assert!(value <= 0x400000);
        self.0 &= !0x400000;
        self.0 |= value;
    }
    /// Sample '0' => decrement 8bit filter saturating counter by 2**n. Cnt <

    ///

    /// 0x40 => WrongSide detected.
    pub fn f2df_side_det_zeros_weight(&self) -> u32 {
        (self.0 & 0x3800) >> 11
    }
    pub fn set_f2df_side_det_zeros_weight(&mut self, value: u32) {
        let value = value << 11;
        assert!(value <= 0x3800);
        self.0 &= !0x3800;
        self.0 |= value;
    }
    /// Clear all sticky bits.
    pub fn f2df_sticky_clr(&self) -> u32 {
        (self.0 & 0x4) >> 2
    }
    pub fn set_f2df_sticky_clr(&mut self, value: u32) {
        let value = value << 2;
        assert!(value <= 0x4);
        self.0 &= !0x4;
        self.0 |= value;
    }
    /// Determines the number of samples that have to show at least one toggle.
    pub fn f2df_tog_det_cnt(&self) -> u32 {
        (self.0 & 0x3f0) >> 4
    }
    pub fn set_f2df_tog_det_cnt(&mut self, value: u32) {
        let value = value << 4;
        assert!(value <= 0x3f0);
        self.0 &= !0x3f0;
        self.0 |= value;
    }
    /// Sticky bit: indicate missing toggle of MD sampler in lock state.
    pub fn f2df_tog_det_sticky(&self) -> u32 {
        (self.0 & 0x400) >> 10
    }
    pub fn set_f2df_tog_det_sticky(&mut self, value: u32) {
        let value = value << 10;
        assert!(value <= 0x400);
        self.0 &= !0x400;
        self.0 |= value;
    }
}

/// Register `SD10G65_SSC_CFG0`
///
/// SD10G65 SSC generator Configuration register 0
///
/// Configuration register 0 for SD10G65 SSC generator.
#[derive(From, Into)]
pub struct SD10G65_SSC_CFG0(u32);
impl SD10G65_SSC_CFG0 {
    /// SSC generator enable.
    pub fn ssc_ena(&self) -> u32 {
        (self.0 & 0x1) >> 0
    }
    pub fn set_ssc_ena(&mut self, value: u32) {
        let value = value << 0;
        assert!(value <= 0x1);
        self.0 &= !0x1;
        self.0 |= value;
    }
    /// SSC modulation frequency fine tuning control
    pub fn ssc_mod_freq(&self) -> u32 {
        (self.0 & 0x7e) >> 1
    }
    pub fn set_ssc_mod_freq(&mut self, value: u32) {
        let value = value << 1;
        assert!(value <= 0x7e);
        self.0 &= !0x7e;
        self.0 |= value;
    }
    /// SSC modulation amplitude limiter
    pub fn ssc_mod_lim(&self) -> u32 {
        (self.0 & 0xfff80000) >> 19
    }
    pub fn set_ssc_mod_lim(&mut self, value: u32) {
        let value = value << 19;
        assert!(value <= 0xfff80000);
        self.0 &= !0xfff80000;
        self.0 |= value;
    }
    /// SSC modulation period / amplitude.
    pub fn ssc_mod_period(&self) -> u32 {
        (self.0 & 0x7ff80) >> 7
    }
    pub fn set_ssc_mod_period(&mut self, value: u32) {
        let value = value << 7;
        assert!(value <= 0x7ff80);
        self.0 &= !0x7ff80;
        self.0 |= value;
    }
}

/// Register `SD10G65_TX_SYNTH_CFG0`
///
/// SD10G65 TX Synthesizer Configuration register 0
///
/// Configuration register 0 for SD10G65 TX SYNTH.
#[derive(From, Into)]
pub struct SD10G65_TX_SYNTH_CFG0(u32);
impl SD10G65_TX_SYNTH_CFG0 {
    /// Synthesizer BIAS adjust in steps of ~3%, 0: 100%, 7: 121%
    pub fn synth_bias_adjust(&self) -> u32 {
        (self.0 & 0x3800000) >> 23
    }
    pub fn set_synth_bias_adjust(&mut self, value: u32) {
        let value = value << 23;
        assert!(value <= 0x3800000);
        self.0 &= !0x3800000;
        self.0 |= value;
    }
    /// enables CML2CMOS converter
    pub fn synth_conv_ena(&self) -> u32 {
        (self.0 & 0x2) >> 1
    }
    pub fn set_synth_conv_ena(&mut self, value: u32) {
        let value = value << 1;
        assert!(value <= 0x2);
        self.0 &= !0x2;
        self.0 |= value;
    }
    /// comon sync speed
    pub fn synth_cs_speed(&self) -> u32 {
        (self.0 & 0x3800) >> 11
    }
    pub fn set_synth_cs_speed(&mut self, value: u32) {
        let value = value << 11;
        assert!(value <= 0x3800);
        self.0 &= !0x3800;
        self.0 |= value;
    }
    /// dig. sync direction
    pub fn synth_ds_dir(&self) -> u32 {
        (self.0 & 0x40) >> 6
    }
    pub fn set_synth_ds_dir(&mut self, value: u32) {
        let value = value << 6;
        assert!(value <= 0x40);
        self.0 &= !0x40;
        self.0 |= value;
    }
    /// dig. sync enable
    pub fn synth_ds_ena(&self) -> u32 {
        (self.0 & 0x20) >> 5
    }
    pub fn set_synth_ds_ena(&mut self, value: u32) {
        let value = value << 5;
        assert!(value <= 0x20);
        self.0 &= !0x20;
        self.0 |= value;
    }
    /// dig. sync speed
    pub fn synth_ds_speed(&self) -> u32 {
        (self.0 & 0x80) >> 7
    }
    pub fn set_synth_ds_speed(&mut self, value: u32) {
        let value = value << 7;
        assert!(value <= 0x80);
        self.0 &= !0x80;
        self.0 |= value;
    }
    /// synthesizer enable
    pub fn synth_ena(&self) -> u32 {
        (self.0 & 0x1) >> 0
    }
    pub fn set_synth_ena(&mut self, value: u32) {
        let value = value << 0;
        assert!(value <= 0x1);
        self.0 &= !0x1;
        self.0 |= value;
    }
    /// enable sync unit
    pub fn synth_ena_sync_unit(&self) -> u32 {
        (self.0 & 0x4) >> 2
    }
    pub fn set_synth_ena_sync_unit(&mut self, value: u32) {
        let value = value << 2;
        assert!(value <= 0x4);
        self.0 &= !0x4;
        self.0 |= value;
    }
    /// selects feedback divider setting
    pub fn synth_fbdiv_sel(&self) -> u32 {
        (self.0 & 0x30000) >> 16
    }
    pub fn set_synth_fbdiv_sel(&mut self, value: u32) {
        let value = value << 16;
        assert!(value <= 0x30000);
        self.0 &= !0x30000;
        self.0 |= value;
    }
    /// half rate enable
    pub fn synth_hrate_ena(&self) -> u32 {
        (self.0 & 0x8) >> 3
    }
    pub fn set_synth_hrate_ena(&mut self, value: u32) {
        let value = value << 3;
        assert!(value <= 0x8);
        self.0 &= !0x8;
        self.0 |= value;
    }
    /// lane sync direction
    pub fn synth_ls_dir(&self) -> u32 {
        (self.0 & 0x200) >> 9
    }
    pub fn set_synth_ls_dir(&mut self, value: u32) {
        let value = value << 9;
        assert!(value <= 0x200);
        self.0 &= !0x200;
        self.0 |= value;
    }
    /// lane sync enable
    pub fn synth_ls_ena(&self) -> u32 {
        (self.0 & 0x100) >> 8
    }
    pub fn set_synth_ls_ena(&mut self, value: u32) {
        let value = value << 8;
        assert!(value <= 0x100);
        self.0 &= !0x100;
        self.0 |= value;
    }
    /// lane sync speed
    pub fn synth_ls_speed(&self) -> u32 {
        (self.0 & 0x400) >> 10
    }
    pub fn set_synth_ls_speed(&mut self, value: u32) {
        let value = value << 10;
        assert!(value <= 0x400);
        self.0 &= !0x400;
        self.0 |= value;
    }
    /// Enable for different offset compensation stages
    pub fn synth_off_comp_ena(&self) -> u32 {
        (self.0 & 0x7c0000) >> 18
    }
    pub fn set_synth_off_comp_ena(&mut self, value: u32) {
        let value = value << 18;
        assert!(value <= 0x7c0000);
        self.0 &= !0x7c0000;
        self.0 |= value;
    }
    /// reg. pool for late changes/fixes.
    pub fn synth_spare_pool(&self) -> u32 {
        (self.0 & 0x3c000000) >> 26
    }
    pub fn set_synth_spare_pool(&mut self, value: u32) {
        let value = value << 26;
        assert!(value <= 0x3c000000);
        self.0 &= !0x3c000000;
        self.0 |= value;
    }
    /// Selects circuit speed. Coding: 0 for settings with synth_fbdiv_sel = 2; 1 for setting with synth_fbdiv_sel smaller than 2.
    pub fn synth_speed_sel(&self) -> u32 {
        (self.0 & 0x10) >> 4
    }
    pub fn set_synth_speed_sel(&mut self, value: u32) {
        let value = value << 4;
        assert!(value <= 0x10);
        self.0 &= !0x10;
        self.0 |= value;
    }
}

/// Register `SD10G65_TX_SYNTH_CFG1`
///
/// SD10G65 TX Synthesizer Configuration register 1
///
/// Configuration register 1 for SD10G65 TX SYNTH.
#[derive(From, Into)]
pub struct SD10G65_TX_SYNTH_CFG1(u32);
impl SD10G65_TX_SYNTH_CFG1 {
    /// frequency m setting bits 35:32
    pub fn synth_freqm_1(&self) -> u32 {
        (self.0 & 0xf0) >> 4
    }
    pub fn set_synth_freqm_1(&mut self, value: u32) {
        let value = value << 4;
        assert!(value <= 0xf0);
        self.0 &= !0xf0;
        self.0 |= value;
    }
    /// frequency n setting bits 35:32
    pub fn synth_freqn_1(&self) -> u32 {
        (self.0 & 0xf) >> 0
    }
    pub fn set_synth_freqn_1(&mut self, value: u32) {
        let value = value << 0;
        assert!(value <= 0xf);
        self.0 &= !0xf;
        self.0 |= value;
    }
    /// frequency multiplier
    pub fn synth_freq_mult(&self) -> u32 {
        (self.0 & 0x3fff00) >> 8
    }
    pub fn set_synth_freq_mult(&mut self, value: u32) {
        let value = value << 8;
        assert!(value <= 0x3fff00);
        self.0 &= !0x3fff00;
        self.0 |= value;
    }
    /// frequency multiplier decoder bypass
    pub fn synth_freq_mult_byp(&self) -> u32 {
        (self.0 & 0x4000000) >> 26
    }
    pub fn set_synth_freq_mult_byp(&mut self, value: u32) {
        let value = value << 26;
        assert!(value <= 0x4000000);
        self.0 &= !0x4000000;
        self.0 |= value;
    }
    /// frequency multiplier MSBits in bypass mode
    pub fn synth_freq_mult_hi(&self) -> u32 {
        (self.0 & 0x3c00000) >> 22
    }
    pub fn set_synth_freq_mult_hi(&mut self, value: u32) {
        let value = value << 22;
        assert!(value <= 0x3c00000);
        self.0 &= !0x3c00000;
        self.0 |= value;
    }
}

/// Register `SD10G65_TX_SYNTH_CFG3`
///
/// SD10G65 TX Synthesizer Configuration register 3
///
/// Configuration register 3 for SD10G65 TX SYNTH.
#[derive(From, Into)]
pub struct SD10G65_TX_SYNTH_CFG3(u32);
impl SD10G65_TX_SYNTH_CFG3 {
    /// frequency m setting bits 31:0
    pub fn synth_freqm_0(&self) -> u32 {
        (self.0 & 0xffffffff) >> 0
    }
    pub fn set_synth_freqm_0(&mut self, value: u32) {
        let value = value << 0;
        assert!(value <= 0xffffffff);
        self.0 &= !0xffffffff;
        self.0 |= value;
    }
}

/// Register `SD10G65_TX_SYNTH_CFG4`
///
/// SD10G65 TX Synthesizer Configuration register 4
///
/// Configuration register 4 for SD10G65 TX SYNTH.
#[derive(From, Into)]
pub struct SD10G65_TX_SYNTH_CFG4(u32);
impl SD10G65_TX_SYNTH_CFG4 {
    /// frequency n setting bits 31:0
    pub fn synth_freqn_0(&self) -> u32 {
        (self.0 & 0xffffffff) >> 0
    }
    pub fn set_synth_freqn_0(&mut self, value: u32) {
        let value = value << 0;
        assert!(value <= 0xffffffff);
        self.0 &= !0xffffffff;
        self.0 |= value;
    }
}
