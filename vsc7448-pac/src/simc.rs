// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Based on mesa-v2021.09 (https://github.com/microchip-ung/mesa/) which has
// the following copyright and license:
//
// Copyright (c) 2004-2021 Microchip Technology Inc. and its subsidiaries.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// This is an autogenerated file; do not edit by hand!

use crate::types::RegisterAddress;

// Register groups are stored in the tree as submodules

pub mod simc;

/// SI Master Controller
pub struct SIMC(pub(super) u32);
impl SIMC {
    #[inline(always)]
    pub fn BAUDR(&self) -> RegisterAddress<simc::BAUDR> {
        RegisterAddress::new(self.0 + 0x14)
    }
    #[inline(always)]
    pub fn CTRLR0(&self) -> RegisterAddress<simc::CTRLR0> {
        RegisterAddress::new(self.0 + 0x0)
    }
    #[inline(always)]
    pub fn CTRLR1(&self) -> RegisterAddress<simc::CTRLR1> {
        RegisterAddress::new(self.0 + 0x4)
    }
    #[inline(always)]
    pub fn DR(&self, index: u32) -> RegisterAddress<simc::DR> {
        assert!(index < 36);
        RegisterAddress::new(self.0 + 0x60 + index * 0x4)
    }
    #[inline(always)]
    pub fn ICR(&self) -> RegisterAddress<simc::ICR> {
        RegisterAddress::new(self.0 + 0x48)
    }
    #[inline(always)]
    pub fn IMR(&self) -> RegisterAddress<simc::IMR> {
        RegisterAddress::new(self.0 + 0x2c)
    }
    #[inline(always)]
    pub fn ISR(&self) -> RegisterAddress<simc::ISR> {
        RegisterAddress::new(self.0 + 0x30)
    }
    #[inline(always)]
    pub fn MSTICR(&self) -> RegisterAddress<simc::MSTICR> {
        RegisterAddress::new(self.0 + 0x44)
    }
    #[inline(always)]
    pub fn MWCR(&self) -> RegisterAddress<simc::MWCR> {
        RegisterAddress::new(self.0 + 0xc)
    }
    #[inline(always)]
    pub fn RISR(&self) -> RegisterAddress<simc::RISR> {
        RegisterAddress::new(self.0 + 0x34)
    }
    #[inline(always)]
    pub fn RXFLR(&self) -> RegisterAddress<simc::RXFLR> {
        RegisterAddress::new(self.0 + 0x24)
    }
    #[inline(always)]
    pub fn RXFTLR(&self) -> RegisterAddress<simc::RXFTLR> {
        RegisterAddress::new(self.0 + 0x1c)
    }
    #[inline(always)]
    pub fn RXOICR(&self) -> RegisterAddress<simc::RXOICR> {
        RegisterAddress::new(self.0 + 0x3c)
    }
    #[inline(always)]
    pub fn RXUICR(&self) -> RegisterAddress<simc::RXUICR> {
        RegisterAddress::new(self.0 + 0x40)
    }
    #[inline(always)]
    pub fn SER(&self) -> RegisterAddress<simc::SER> {
        RegisterAddress::new(self.0 + 0x10)
    }
    #[inline(always)]
    pub fn SIMCEN(&self) -> RegisterAddress<simc::SIMCEN> {
        RegisterAddress::new(self.0 + 0x8)
    }
    #[inline(always)]
    pub fn SR(&self) -> RegisterAddress<simc::SR> {
        RegisterAddress::new(self.0 + 0x28)
    }
    #[inline(always)]
    pub fn TXFLR(&self) -> RegisterAddress<simc::TXFLR> {
        RegisterAddress::new(self.0 + 0x20)
    }
    #[inline(always)]
    pub fn TXFTLR(&self) -> RegisterAddress<simc::TXFTLR> {
        RegisterAddress::new(self.0 + 0x18)
    }
    #[inline(always)]
    pub fn TXOICR(&self) -> RegisterAddress<simc::TXOICR> {
        RegisterAddress::new(self.0 + 0x38)
    }
}
