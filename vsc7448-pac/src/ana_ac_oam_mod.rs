// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Based on mesa-v2021.09 (https://github.com/microchip-ung/mesa/) which has
// the following copyright and license:
//
// Copyright (c) 2004-2021 Microchip Technology Inc. and its subsidiaries.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// This is an autogenerated file; do not edit by hand!

use crate::types::RegisterAddress;

// Register groups are stored in the tree as submodules

pub mod oam_pdu_mod_cont;
pub mod pdu_mod_cfg;
pub mod voe_port_lm_cnt;
pub mod voe_srv_lm_cnt;

/// VOE additional information
pub struct OAM_PDU_MOD_CONT(pub(super) u32);
impl OAM_PDU_MOD_CONT {
    #[inline]
    pub fn CCM_LM_INFO_REG(&self) -> RegisterAddress<oam_pdu_mod_cont::CCM_LM_INFO_REG> {
        RegisterAddress::new(self.0 + 0x8)
    }
    #[inline]
    pub fn CCM_LM_RX_B_REG(&self) -> RegisterAddress<oam_pdu_mod_cont::CCM_LM_RX_B_REG> {
        RegisterAddress::new(self.0 + 0x10)
    }
    #[inline]
    pub fn CCM_LM_TX_B_REG(&self) -> RegisterAddress<oam_pdu_mod_cont::CCM_LM_TX_B_REG> {
        RegisterAddress::new(self.0 + 0xc)
    }
    #[inline]
    pub fn LM_CNT_FRAME(&self) -> RegisterAddress<oam_pdu_mod_cont::LM_CNT_FRAME> {
        RegisterAddress::new(self.0 + 0x4)
    }
    #[inline]
    pub fn TEMP_CNT_REG(&self) -> RegisterAddress<oam_pdu_mod_cont::TEMP_CNT_REG> {
        RegisterAddress::new(self.0 + 0x0)
    }
}

/// OAM_PDU_MOD misc. configuration
pub struct PDU_MOD_CFG(pub(super) u32);
impl PDU_MOD_CFG {
    #[inline]
    pub fn DM_PTP_DOMAIN_CFG(&self, index: u32) -> RegisterAddress<pdu_mod_cfg::DM_PTP_DOMAIN_CFG> {
        assert!(index < 53);
        RegisterAddress::new(self.0 + 0x0 + index * 0x4)
    }
    #[inline]
    pub fn RD_LAST_PORT_BYTE_CNT_LSB(
        &self,
    ) -> RegisterAddress<pdu_mod_cfg::RD_LAST_PORT_BYTE_CNT_LSB> {
        RegisterAddress::new(self.0 + 0xe0)
    }
    #[inline]
    pub fn RD_LAST_PORT_BYTE_CNT_MSB(
        &self,
    ) -> RegisterAddress<pdu_mod_cfg::RD_LAST_PORT_BYTE_CNT_MSB> {
        RegisterAddress::new(self.0 + 0xdc)
    }
    #[inline]
    pub fn RD_LAST_PORT_FRM_CNT_LSB(
        &self,
    ) -> RegisterAddress<pdu_mod_cfg::RD_LAST_PORT_FRM_CNT_LSB> {
        RegisterAddress::new(self.0 + 0xd8)
    }
    #[inline]
    pub fn RD_LAST_PORT_LM_CNT_LSB(&self) -> RegisterAddress<pdu_mod_cfg::RD_LAST_PORT_LM_CNT_LSB> {
        RegisterAddress::new(self.0 + 0xd4)
    }
}

/// OAM LM port counters pr. priority
pub struct VOE_PORT_LM_CNT(pub(super) u32);
impl VOE_PORT_LM_CNT {
    #[inline]
    pub fn PORT_BYTE_CNT_LSB(&self) -> RegisterAddress<voe_port_lm_cnt::PORT_BYTE_CNT_LSB> {
        RegisterAddress::new(self.0 + 0xc)
    }
    #[inline]
    pub fn PORT_BYTE_CNT_MSB(&self) -> RegisterAddress<voe_port_lm_cnt::PORT_BYTE_CNT_MSB> {
        RegisterAddress::new(self.0 + 0x8)
    }
    #[inline]
    pub fn PORT_FRM_CNT_LSB(&self) -> RegisterAddress<voe_port_lm_cnt::PORT_FRM_CNT_LSB> {
        RegisterAddress::new(self.0 + 0x4)
    }
    #[inline]
    pub fn PORT_LM_CNT_LSB(&self) -> RegisterAddress<voe_port_lm_cnt::PORT_LM_CNT_LSB> {
        RegisterAddress::new(self.0 + 0x0)
    }
}

/// OAM Service LM counters pr. priority
pub struct VOE_SRV_LM_CNT(pub(super) u32);
impl VOE_SRV_LM_CNT {
    #[inline]
    pub fn SRV_LM_CNT_LSB(&self) -> RegisterAddress<voe_srv_lm_cnt::SRV_LM_CNT_LSB> {
        RegisterAddress::new(self.0 + 0x0)
    }
}
