// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Based on mesa-v2021.09 (https://github.com/microchip-ung/mesa/) which has
// the following copyright and license:
//
// Copyright (c) 2004-2021 Microchip Technology Inc. and its subsidiaries.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// This is an autogenerated file; do not edit by hand!
use derive_more::{From, Into};

/// Register `PLL5G_BIST_CFG2`
///
/// PLL5G BIST Configuration register 2
///
/// Configuration register 2 for PLL5G BIST.
#[derive(From, Into)]
pub struct PLL5G_BIST_CFG2(u32);
impl PLL5G_BIST_CFG2 {
    /// BIST compare divider N
    pub fn pllb_div_factor_n(&self) -> u32 {
        (self.0 & 0xffff) >> 0
    }
    pub fn set_pllb_div_factor_n(&mut self, value: u32) {
        let value = value << 0;
        assert!(value <= 0xffff);
        self.0 &= !0xffff;
        self.0 |= value;
    }
}

/// Register `PLL5G_BIST_STAT0`
///
/// PLL5G BIST Status register 0
///
/// Status register 0 for PLL5G BIST.
#[derive(From, Into)]
pub struct PLL5G_BIST_STAT0(u32);
impl PLL5G_BIST_STAT0 {
    /// BIST busy, 0: not busy, 1: busy
    pub fn pllb_busy(&self) -> u32 {
        (self.0 & 0x4) >> 2
    }
    pub fn set_pllb_busy(&mut self, value: u32) {
        let value = value << 2;
        assert!(value <= 0x4);
        self.0 &= !0x4;
        self.0 |= value;
    }
    /// BIST done, 0: done, 1: not done
    pub fn pllb_done_n(&self) -> u32 {
        (self.0 & 0x2) >> 1
    }
    pub fn set_pllb_done_n(&mut self, value: u32) {
        let value = value << 1;
        assert!(value <= 0x2);
        self.0 &= !0x2;
        self.0 |= value;
    }
    /// BIST pass/fail, 0: passed, 1: failed
    pub fn pllb_fail(&self) -> u32 {
        (self.0 & 0x1) >> 0
    }
    pub fn set_pllb_fail(&mut self, value: u32) {
        let value = value << 0;
        assert!(value <= 0x1);
        self.0 &= !0x1;
        self.0 |= value;
    }
    /// BIST pll_cnt upper limit at max. frequency
    pub fn pllb_fsm_stat(&self) -> u32 {
        (self.0 & 0xf0) >> 4
    }
    pub fn set_pllb_fsm_stat(&mut self, value: u32) {
        let value = value << 4;
        assert!(value <= 0xf0);
        self.0 &= !0xf0;
        self.0 |= value;
    }
}

/// Register `PLL5G_BIST_STAT1A`
///
/// PLL5G BIST Status register 1A
///
/// Status register 1A for PLL5G BIST.
#[derive(From, Into)]
pub struct PLL5G_BIST_STAT1A(u32);
impl PLL5G_BIST_STAT1A {
    /// BIST compare divider phase difference
    pub fn pllb_cnt_ref_diff(&self) -> u32 {
        (self.0 & 0xffff) >> 0
    }
    pub fn set_pllb_cnt_ref_diff(&mut self, value: u32) {
        let value = value << 0;
        assert!(value <= 0xffff);
        self.0 &= !0xffff;
        self.0 |= value;
    }
}
