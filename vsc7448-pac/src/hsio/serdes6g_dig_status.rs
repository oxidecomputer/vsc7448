// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Based on mesa-v2021.09 (https://github.com/microchip-ung/mesa/) which has
// the following copyright and license:
//
// Copyright (c) 2004-2021 Microchip Technology Inc. and its subsidiaries.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// This is an autogenerated file; do not edit by hand!
use derive_more::{From, Into};

/// Register `SERDES6G_DFT_STATUS`
///
/// SERDES6G DFT Status
///
/// Status register of SERDES6G DFT functions
#[derive(From, Into)]
pub struct SERDES6G_DFT_STATUS(u32);
impl SERDES6G_DFT_STATUS {
    /// BIST activity

    ///

    /// 0: BIST inactive 1: BIST active
    pub fn bist_active(&self) -> u32 {
        (self.0 & 0x8) >> 3
    }
    pub fn set_bist_active(&mut self, value: u32) {
        let value = value << 3;
        assert!(value <= 0x8);
        self.0 &= !0x8;
        self.0 |= value;
    }
    /// BIST completion state (low-active)

    ///

    /// 0: BIST completed 1: not completed
    pub fn bist_complete_n(&self) -> u32 {
        (self.0 & 0x2) >> 1
    }
    pub fn set_bist_complete_n(&mut self, value: u32) {
        let value = value << 1;
        assert!(value <= 0x2);
        self.0 &= !0x2;
        self.0 |= value;
    }
    /// BIST result

    ///

    /// 0: No error found 1: Errors during BIST found
    pub fn bist_error(&self) -> u32 {
        (self.0 & 0x1) >> 0
    }
    pub fn set_bist_error(&mut self, value: u32) {
        let value = value << 0;
        assert!(value <= 0x1);
        self.0 &= !0x1;
        self.0 |= value;
    }
    /// BIST sync result

    ///

    /// 0: Synchronization successful 1: Synchronization on BIST data failed
    pub fn bist_nosync(&self) -> u32 {
        (self.0 & 0x4) >> 2
    }
    pub fn set_bist_nosync(&mut self, value: u32) {
        let value = value << 2;
        assert!(value <= 0x4);
        self.0 &= !0x4;
        self.0 |= value;
    }
    /// RC-PLL BIST result

    ///

    /// 0: No error found 1: Errors during BIST found
    pub fn pll_bist_failed(&self) -> u32 {
        (self.0 & 0x40) >> 6
    }
    pub fn set_pll_bist_failed(&mut self, value: u32) {
        let value = value << 6;
        assert!(value <= 0x40);
        self.0 &= !0x40;
        self.0 |= value;
    }
    /// RC-PLL BIST not done flag

    ///

    /// 0: BIST done 1: BIST not started or active
    pub fn pll_bist_not_done(&self) -> u32 {
        (self.0 & 0x80) >> 7
    }
    pub fn set_pll_bist_not_done(&mut self, value: u32) {
        let value = value << 7;
        assert!(value <= 0x80);
        self.0 &= !0x80;
        self.0 |= value;
    }
    /// RC-PLL BIST timeout error flag

    ///

    /// 0: No timeout occured 1: Timeout occured
    pub fn pll_bist_timeout_err(&self) -> u32 {
        (self.0 & 0x20) >> 5
    }
    pub fn set_pll_bist_timeout_err(&mut self, value: u32) {
        let value = value << 5;
        assert!(value <= 0x20);
        self.0 &= !0x20;
        self.0 |= value;
    }
    /// PRBS synchronization status

    ///

    /// 0: PRBS checker not synchronized 1: PRBS checker synchronized
    pub fn prbs_sync_stat(&self) -> u32 {
        (self.0 & 0x100) >> 8
    }
    pub fn set_prbs_sync_stat(&mut self, value: u32) {
        let value = value << 8;
        assert!(value <= 0x100);
        self.0 &= !0x100;
        self.0 |= value;
    }
}

/// Register `SERDES6G_ERR_CNT`
///
/// SERDES6G Error Counter
///
/// Error counter for SERDES6G PRBS
#[derive(From, Into)]
pub struct SERDES6G_ERR_CNT(u32);
impl SERDES6G_ERR_CNT {
    /// PRBS error counter
    pub fn prbs_err_cnt(&self) -> u32 {
        (self.0 & 0xffff) >> 0
    }
    pub fn set_prbs_err_cnt(&mut self, value: u32) {
        let value = value << 0;
        assert!(value <= 0xffff);
        self.0 &= !0xffff;
        self.0 |= value;
    }
}

/// Register `SERDES6G_OB_ANEG_CFG`
///
/// SERDES6G OB ANEG Configuration
///
/// Configuration register for ANEG Output Buffer overwrite parameter. The values are used during Backplane Ethernet Auto-Negotiation when the output level of transmitter (OB output) have to be reduced.
#[derive(From, Into)]
pub struct SERDES6G_OB_ANEG_CFG(u32);
impl SERDES6G_OB_ANEG_CFG {
    /// ANEG overwrite value for SERDES6G_OB_CFG1.ob_ena_cas
    pub fn an_ob_ena_cas(&self) -> u32 {
        (self.0 & 0x1c0) >> 6
    }
    pub fn set_an_ob_ena_cas(&mut self, value: u32) {
        let value = value << 6;
        assert!(value <= 0x1c0);
        self.0 &= !0x1c0;
        self.0 |= value;
    }
    /// ANEG overwrite value for SERDES6G_OB_CFG1.ob_lev
    pub fn an_ob_lev(&self) -> u32 {
        (self.0 & 0x3f) >> 0
    }
    pub fn set_an_ob_lev(&mut self, value: u32) {
        let value = value << 0;
        assert!(value <= 0x3f);
        self.0 &= !0x3f;
        self.0 |= value;
    }
    /// ANEG overwrite value for SERDES6G_OB_CFG.post0
    pub fn an_ob_post0(&self) -> u32 {
        (self.0 & 0x1f800000) >> 23
    }
    pub fn set_an_ob_post0(&mut self, value: u32) {
        let value = value << 23;
        assert!(value <= 0x1f800000);
        self.0 &= !0x1f800000;
        self.0 |= value;
    }
    /// ANEG overwrite value for SERDES6G_OB_CFG.post1
    pub fn an_ob_post1(&self) -> u32 {
        (self.0 & 0x7c0000) >> 18
    }
    pub fn set_an_ob_post1(&mut self, value: u32) {
        let value = value << 18;
        assert!(value <= 0x7c0000);
        self.0 &= !0x7c0000;
        self.0 |= value;
    }
    /// ANEG overwrite value for SERDES6G_OB_CFG.prec
    pub fn an_ob_prec(&self) -> u32 {
        (self.0 & 0x3e000) >> 13
    }
    pub fn set_an_ob_prec(&mut self, value: u32) {
        let value = value << 13;
        assert!(value <= 0x3e000);
        self.0 &= !0x3e000;
        self.0 |= value;
    }
}
