// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Based on mesa-v2021.09 (https://github.com/microchip-ung/mesa/) which has
// the following copyright and license:
//
// Copyright (c) 2004-2021 Microchip Technology Inc. and its subsidiaries.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// This is an autogenerated file; do not edit by hand!
use derive_more::{From, Into};
/// SERDES6G DFT Configuration register 0
///
/// Configuration register 0 for SERDES6G DFT functions
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct SERDES6G_DFT_CFG0(u32);
impl SERDES6G_DFT_CFG0 {
    /// Disable output inverter of BIST PRBS generator
    pub fn inv_dis(&self) -> u32 {
        (self.0 & 0x800000) >> 23
    }
    pub fn set_inv_dis(&mut self, value: u32) {
        let value = value << 23;
        assert!(value <= 0x800000);
        self.0 &= !0x800000;
        self.0 |= value;
    }
    /// Lazy designers spare bit
    pub fn lazybit(&self) -> u32 {
        (self.0 & 0x80000000) >> 31
    }
    pub fn set_lazybit(&mut self, value: u32) {
        let value = value << 31;
        assert!(value <= 0x80000000);
        self.0 &= !0x80000000;
        self.0 |= value;
    }
    /// Select PRBS pattern for BIST
    ///
    /// 0: G(x) = x^7 + x^6 + 1 1: G(x) = x^15 + x^14 + 1 2: G(x) = x^23 + x^18 + 1 3: G(x) = x^31 + x^28 + 1
    pub fn prbs_sel(&self) -> u32 {
        (self.0 & 0x300000) >> 20
    }
    pub fn set_prbs_sel(&mut self, value: u32) {
        let value = value << 20;
        assert!(value <= 0x300000);
        self.0 &= !0x300000;
        self.0 |= value;
    }
    /// General enable for Jitter-Injection/Frequency-Offset-Generation Block (RX-Path)
    ///
    /// 0: Off 1: On
    pub fn rx_dft_ena(&self) -> u32 {
        (self.0 & 0x4) >> 2
    }
    pub fn set_rx_dft_ena(&mut self, value: u32) {
        let value = value << 2;
        assert!(value <= 0x4);
        self.0 &= !0x4;
        self.0 |= value;
    }
    /// Enable sensitivity for phasedetector CP/MD (RX-Path)
    ///
    /// 0: Off 1: On
    pub fn rx_pdsens_ena(&self) -> u32 {
        (self.0 & 0x8) >> 3
    }
    pub fn set_rx_pdsens_ena(&mut self, value: u32) {
        let value = value << 3;
        assert!(value <= 0x8);
        self.0 &= !0x8;
        self.0 |= value;
    }
    /// Disable influence of external phase correction on step controller
    ///
    /// 0: Enable 1: Disable
    pub fn rx_phs_corr_dis(&self) -> u32 {
        (self.0 & 0x10) >> 4
    }
    pub fn set_rx_phs_corr_dis(&mut self, value: u32) {
        let value = value << 4;
        assert!(value <= 0x10);
        self.0 &= !0x10;
        self.0 |= value;
    }
    /// Selection of test mode
    ///
    /// 0: Normal operation 1: BIST 2: Fixed pattern 3: Random pattern 4: Jitter injection 5-7: Reserved
    pub fn test_mode(&self) -> u32 {
        (self.0 & 0x70000) >> 16
    }
    pub fn set_test_mode(&mut self, value: u32) {
        let value = value << 16;
        assert!(value <= 0x70000);
        self.0 &= !0x70000;
        self.0 |= value;
    }
    /// General enable for Jitter-Injection/Frequency-Offset-Generation Block (TX-Path)
    ///
    /// 0: Off 1: On
    pub fn tx_dft_ena(&self) -> u32 {
        self.0 & 0x1
    }
    pub fn set_tx_dft_ena(&mut self, value: u32) {
        assert!(value <= 0x1);
        self.0 &= !0x1;
        self.0 |= value;
    }
}
/// SERDES6G DFT Configuration register 1
///
/// Configuration register 1 for SERDES6G DFT functions (TX direction)
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct SERDES6G_DFT_CFG1(u32);
impl SERDES6G_DFT_CFG1 {
    /// Direction of Frequency-Offset (TX-Path)
    ///
    /// 0: Down 1: Up
    pub fn tx_freqoff_dir(&self) -> u32 {
        (self.0 & 0x2) >> 1
    }
    pub fn set_tx_freqoff_dir(&mut self, value: u32) {
        let value = value << 1;
        assert!(value <= 0x2);
        self.0 &= !0x2;
        self.0 |= value;
    }
    /// Enable Frequency-Offset-Generation (TX-Path)
    ///
    /// 0: Off 1: On
    pub fn tx_freqoff_ena(&self) -> u32 {
        self.0 & 0x1
    }
    pub fn set_tx_freqoff_ena(&mut self, value: u32) {
        assert!(value <= 0x1);
        self.0 &= !0x1;
        self.0 |= value;
    }
    /// Amplitude of jitter for Jitter-Injection (TX-Path)
    pub fn tx_jitter_ampl(&self) -> u32 {
        (self.0 & 0x3ff00) >> 8
    }
    pub fn set_tx_jitter_ampl(&mut self, value: u32) {
        let value = value << 8;
        assert!(value <= 0x3ff00);
        self.0 &= !0x3ff00;
        self.0 |= value;
    }
    /// Enable TX jitter intertion
    ///
    /// 0: Off 1:On
    pub fn tx_ji_ena(&self) -> u32 {
        (self.0 & 0x8) >> 3
    }
    pub fn set_tx_ji_ena(&mut self, value: u32) {
        let value = value << 3;
        assert!(value <= 0x8);
        self.0 &= !0x8;
        self.0 |= value;
    }
    /// Stepping frequency for Jitter-Injection/Frequency-Offset-Generation (1/2^n) (RX-Path)
    pub fn tx_step_freq(&self) -> u32 {
        (self.0 & 0xf0) >> 4
    }
    pub fn set_tx_step_freq(&mut self, value: u32) {
        let value = value << 4;
        assert!(value <= 0xf0);
        self.0 &= !0xf0;
        self.0 |= value;
    }
    /// Select waveform for Jitter-Injection (TX-Path)
    ///
    /// 0: Triangular 1: Flattened (sinusoidal)
    pub fn tx_waveform_sel(&self) -> u32 {
        (self.0 & 0x4) >> 2
    }
    pub fn set_tx_waveform_sel(&mut self, value: u32) {
        let value = value << 2;
        assert!(value <= 0x4);
        self.0 &= !0x4;
        self.0 |= value;
    }
}
/// SERDES6G DFT Configuration register 2
///
/// Configuration register 2 for SERDES6G DFT functions (RX direction)
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct SERDES6G_DFT_CFG2(u32);
impl SERDES6G_DFT_CFG2 {
    /// Direction of Frequency-Offset (RX-Path)
    ///
    /// 0: Down 1: Up
    pub fn rx_freqoff_dir(&self) -> u32 {
        (self.0 & 0x2) >> 1
    }
    pub fn set_rx_freqoff_dir(&mut self, value: u32) {
        let value = value << 1;
        assert!(value <= 0x2);
        self.0 &= !0x2;
        self.0 |= value;
    }
    /// Enable Frequency-Offset-Generation (RX-Path)
    ///
    /// 0: Off 1: On
    pub fn rx_freqoff_ena(&self) -> u32 {
        self.0 & 0x1
    }
    pub fn set_rx_freqoff_ena(&mut self, value: u32) {
        assert!(value <= 0x1);
        self.0 &= !0x1;
        self.0 |= value;
    }
    /// Amplitude of jitter for Link-Quality-Evaluation/Jitter-Injection (RX-Path)
    pub fn rx_jitter_ampl(&self) -> u32 {
        (self.0 & 0x3ff00) >> 8
    }
    pub fn set_rx_jitter_ampl(&mut self, value: u32) {
        let value = value << 8;
        assert!(value <= 0x3ff00);
        self.0 &= !0x3ff00;
        self.0 |= value;
    }
    /// Enable RX jitter intertion
    ///
    /// 0: Off 1:On
    pub fn rx_ji_ena(&self) -> u32 {
        (self.0 & 0x8) >> 3
    }
    pub fn set_rx_ji_ena(&mut self, value: u32) {
        let value = value << 3;
        assert!(value <= 0x8);
        self.0 &= !0x8;
        self.0 |= value;
    }
    /// Stepping frequency for Jitter-Injection/Frequency-Offset-Generation (1/2^n) (TX-Path)
    pub fn rx_step_freq(&self) -> u32 {
        (self.0 & 0xf0) >> 4
    }
    pub fn set_rx_step_freq(&mut self, value: u32) {
        let value = value << 4;
        assert!(value <= 0xf0);
        self.0 &= !0xf0;
        self.0 |= value;
    }
    /// Select waveform for Jitter-Injection (RX-Path)
    ///
    /// 0: Triangular 1: Flattened
    pub fn rx_waveform_sel(&self) -> u32 {
        (self.0 & 0x4) >> 2
    }
    pub fn set_rx_waveform_sel(&mut self, value: u32) {
        let value = value << 2;
        assert!(value <= 0x4);
        self.0 &= !0x4;
        self.0 |= value;
    }
}
/// SERDES6G Digital Configuration register
///
/// Configuration register for SERDES6G digital functions
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct SERDES6G_DIG_CFG(u32);
impl SERDES6G_DIG_CFG {
    /// General purpose bits, reserved for future use.
    pub fn gp(&self) -> u32 {
        (self.0 & 0x70000) >> 16
    }
    pub fn set_gp(&mut self, value: u32) {
        let value = value << 16;
        assert!(value <= 0x70000);
        self.0 &= !0x70000;
        self.0 |= value;
    }
    /// Signal detect assertion time
    ///
    /// 0: 0 us 1: 35 us 2: 70 us 3: 105 us 4: 140 us 5..7: reserved
    pub fn sigdet_ast(&self) -> u32 {
        (self.0 & 0x38) >> 3
    }
    pub fn set_sigdet_ast(&mut self, value: u32) {
        let value = value << 3;
        assert!(value <= 0x38);
        self.0 &= !0x38;
        self.0 |= value;
    }
    /// Signal detect de-assertion time
    ///
    /// 0: 0 us 1: 250 us 2: 350 us 3: 450 us 4: 550 us 5..7: reserved
    pub fn sigdet_dst(&self) -> u32 {
        self.0 & 0x7
    }
    pub fn set_sigdet_dst(&mut self, value: u32) {
        assert!(value <= 0x7);
        self.0 &= !0x7;
        self.0 |= value;
    }
    /// Reserved for test purposes. SigDet timer values are divided by 2^6
    ///
    /// 1: Enable division 0: Normal operation
    pub fn sigdet_testmode(&self) -> u32 {
        (self.0 & 0x40) >> 6
    }
    pub fn set_sigdet_testmode(&mut self, value: u32) {
        let value = value << 6;
        assert!(value <= 0x40);
        self.0 &= !0x40;
        self.0 |= value;
    }
    /// Select bit doubling mode
    ///
    /// 0: (20 bit) Data word contains two byte constant for 2 UI 1: Every bit is streched to two UI.
    pub fn tx_bit_doubling_mode_ena(&self) -> u32 {
        (self.0 & 0x80) >> 7
    }
    pub fn set_tx_bit_doubling_mode_ena(&mut self, value: u32) {
        let value = value << 7;
        assert!(value <= 0x80);
        self.0 &= !0x80;
        self.0 |= value;
    }
}
/// SERDES6G Misc Configuration
///
/// Configuration register for miscellaneous functions
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct SERDES6G_MISC_CFG(u32);
impl SERDES6G_MISC_CFG {
    /// Enable deserializer cp/md handling for 100fx mode
    ///
    /// 0: Disable 1: Enable
    pub fn des_100fx_cpmd_ena(&self) -> u32 {
        (self.0 & 0x100) >> 8
    }
    pub fn set_des_100fx_cpmd_ena(&mut self, value: u32) {
        let value = value << 8;
        assert!(value <= 0x100);
        self.0 &= !0x100;
        self.0 |= value;
    }
    /// Select simple 100fx mode
    ///
    /// 0: Normal mode 1: Simple mode
    pub fn des_100fx_cpmd_mode(&self) -> u32 {
        (self.0 & 0x200) >> 9
    }
    pub fn set_des_100fx_cpmd_mode(&mut self, value: u32) {
        let value = value << 9;
        assert!(value <= 0x200);
        self.0 &= !0x200;
        self.0 |= value;
    }
    /// Swap cp/md signals in 100fx mode
    ///
    /// 0: No swapping of cp and md 1: Swap cp and md
    pub fn des_100fx_cpmd_swap(&self) -> u32 {
        (self.0 & 0x400) >> 10
    }
    pub fn set_des_100fx_cpmd_swap(&mut self, value: u32) {
        let value = value << 10;
        assert!(value <= 0x400);
        self.0 &= !0x400;
        self.0 |= value;
    }
    /// Select mode of kick-out-of-180-degree functionality
    pub fn des_100fx_kick_mode(&self) -> u32 {
        (self.0 & 0x1800) >> 11
    }
    pub fn set_des_100fx_kick_mode(&mut self, value: u32) {
        let value = value << 11;
        assert!(value <= 0x1800);
        self.0 &= !0x1800;
        self.0 |= value;
    }
    /// Lane Reset
    ///
    /// 0: No reset 1: Reset (not self-clearing)
    pub fn lane_rst(&self) -> u32 {
        self.0 & 0x1
    }
    pub fn set_lane_rst(&mut self, value: u32) {
        assert!(value <= 0x1);
        self.0 &= !0x1;
        self.0 |= value;
    }
    /// Enable flipping rx databus (MSB - LSB)
    pub fn rx_bus_flip_ena(&self) -> u32 {
        (self.0 & 0x80) >> 7
    }
    pub fn set_rx_bus_flip_ena(&mut self, value: u32) {
        let value = value << 7;
        assert!(value <= 0x80);
        self.0 &= !0x80;
        self.0 |= value;
    }
    /// Enable data inversion received from Deserializer
    ///
    /// 0: Disable 1: Enable
    pub fn rx_data_inv_ena(&self) -> u32 {
        (self.0 & 0x8) >> 3
    }
    pub fn set_rx_data_inv_ena(&mut self, value: u32) {
        let value = value << 3;
        assert!(value <= 0x8);
        self.0 &= !0x8;
        self.0 |= value;
    }
    /// Enable RX-Low-Power feature (Power control by LPI-FSM in connected PCS)
    ///
    /// 0: Disable 1: Enable
    pub fn rx_lpi_mode_ena(&self) -> u32 {
        (self.0 & 0x20) >> 5
    }
    pub fn set_rx_lpi_mode_ena(&mut self, value: u32) {
        let value = value << 5;
        assert!(value <= 0x20);
        self.0 &= !0x20;
        self.0 |= value;
    }
    /// Select recovered clock divider
    ///
    /// 0: No clock dividing 1: Divide clock by 5 2: Divide clock by 4 3: Reserved
    pub fn sel_reco_clk(&self) -> u32 {
        (self.0 & 0x6000) >> 13
    }
    pub fn set_sel_reco_clk(&mut self, value: u32) {
        let value = value << 13;
        assert!(value <= 0x6000);
        self.0 &= !0x6000;
        self.0 |= value;
    }
    /// Enable flipping tx databus (MSB - LSB)
    pub fn tx_bus_flip_ena(&self) -> u32 {
        (self.0 & 0x40) >> 6
    }
    pub fn set_tx_bus_flip_ena(&mut self, value: u32) {
        let value = value << 6;
        assert!(value <= 0x40);
        self.0 &= !0x40;
        self.0 |= value;
    }
    /// Enable data inversion sent to Serializer
    ///
    /// 0: Disable 1: Enable
    pub fn tx_data_inv_ena(&self) -> u32 {
        (self.0 & 0x4) >> 2
    }
    pub fn set_tx_data_inv_ena(&mut self, value: u32) {
        let value = value << 2;
        assert!(value <= 0x4);
        self.0 &= !0x4;
        self.0 |= value;
    }
    /// Enable TX-Low-Power feature (Power control by LPI-FSM in connected PCS)
    ///
    /// 0: Disable 1: Enable
    pub fn tx_lpi_mode_ena(&self) -> u32 {
        (self.0 & 0x10) >> 4
    }
    pub fn set_tx_lpi_mode_ena(&mut self, value: u32) {
        let value = value << 4;
        assert!(value <= 0x10);
        self.0 &= !0x10;
        self.0 |= value;
    }
}
/// SERDES6G OB ANEG Configuration
///
/// Configuration register for ANEG Output Buffer overwrite parameter. The values are used during Backplane Ethernet Auto-Negotiation when the output level of transmitter (OB output) have to be reduced.
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct SERDES6G_OB_ANEG_CFG(u32);
impl SERDES6G_OB_ANEG_CFG {
    /// ANEG overwrite value for SERDES6G_OB_CFG1.ob_ena_cas
    pub fn an_ob_ena_cas(&self) -> u32 {
        (self.0 & 0x1c0) >> 6
    }
    pub fn set_an_ob_ena_cas(&mut self, value: u32) {
        let value = value << 6;
        assert!(value <= 0x1c0);
        self.0 &= !0x1c0;
        self.0 |= value;
    }
    /// ANEG overwrite value for SERDES6G_OB_CFG1.ob_lev
    pub fn an_ob_lev(&self) -> u32 {
        self.0 & 0x3f
    }
    pub fn set_an_ob_lev(&mut self, value: u32) {
        assert!(value <= 0x3f);
        self.0 &= !0x3f;
        self.0 |= value;
    }
    /// ANEG overwrite value for SERDES6G_OB_CFG.post0
    pub fn an_ob_post0(&self) -> u32 {
        (self.0 & 0x1f800000) >> 23
    }
    pub fn set_an_ob_post0(&mut self, value: u32) {
        let value = value << 23;
        assert!(value <= 0x1f800000);
        self.0 &= !0x1f800000;
        self.0 |= value;
    }
    /// ANEG overwrite value for SERDES6G_OB_CFG.post1
    pub fn an_ob_post1(&self) -> u32 {
        (self.0 & 0x7c0000) >> 18
    }
    pub fn set_an_ob_post1(&mut self, value: u32) {
        let value = value << 18;
        assert!(value <= 0x7c0000);
        self.0 &= !0x7c0000;
        self.0 |= value;
    }
    /// ANEG overwrite value for SERDES6G_OB_CFG.prec
    pub fn an_ob_prec(&self) -> u32 {
        (self.0 & 0x3e000) >> 13
    }
    pub fn set_an_ob_prec(&mut self, value: u32) {
        let value = value << 13;
        assert!(value <= 0x3e000);
        self.0 &= !0x3e000;
        self.0 |= value;
    }
}
/// SERDES6G RCPLL BIST Configuration
///
/// Configuration register for the 6G RC-PLL BIST
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct SERDES6G_RC_PLL_BIST_CFG(u32);
impl SERDES6G_RC_PLL_BIST_CFG {
    /// Enables the BIST for the RC-PLL
    pub fn pll_bist_ena(&self) -> u32 {
        (self.0 & 0x100000) >> 20
    }
    pub fn set_pll_bist_ena(&mut self, value: u32) {
        let value = value << 20;
        assert!(value <= 0x100000);
        self.0 &= !0x100000;
        self.0 |= value;
    }
    /// Feedback divider setting for closed loop test at high frequency. B3: Div4, B2: Ena_rot, B1: Rot_dir, B0: Rot_frq
    pub fn pll_bist_fbs_high(&self) -> u32 {
        (self.0 & 0xf0000) >> 16
    }
    pub fn set_pll_bist_fbs_high(&mut self, value: u32) {
        let value = value << 16;
        assert!(value <= 0xf0000);
        self.0 &= !0xf0000;
        self.0 |= value;
    }
    /// Higher frequnecy for the RC-PLL BIST
    pub fn pll_bist_high(&self) -> u32 {
        (self.0 & 0xff00) >> 8
    }
    pub fn set_pll_bist_high(&mut self, value: u32) {
        let value = value << 8;
        assert!(value <= 0xff00);
        self.0 &= !0xff00;
        self.0 |= value;
    }
    /// Lower frequnecy for the RC-PLL BIST
    pub fn pll_bist_low(&self) -> u32 {
        self.0 & 0xff
    }
    pub fn set_pll_bist_low(&mut self, value: u32) {
        assert!(value <= 0xff);
        self.0 &= !0xff;
        self.0 |= value;
    }
}
/// SERDES6G Test Pattern Configuration
///
/// Test bits (pattern) for SERDES6G lane. These bits are used when Lane_Test_cfg.Test_mode is set to 2 (fixed pattern)
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct SERDES6G_TP_CFG0(u32);
impl SERDES6G_TP_CFG0 {
    /// Static pattern tranferred in fixed pattern test mode, LSB is transferred first
    pub fn static_pattern0(&self) -> u32 {
        self.0 & 0xfffff
    }
    pub fn set_static_pattern0(&mut self, value: u32) {
        assert!(value <= 0xfffff);
        self.0 &= !0xfffff;
        self.0 |= value;
    }
}
/// SERDES6G Test Pattern Configuration
///
/// Test bits (pattern) for SERDES6G lane. These bits are used when Lane_Test_cfg.Test_mode is set to 2 (fixed pattern) and Lane_cfg.hr_mode_ena = '0'. In 20 bit modes bits from static_pattern and static_pattern2 are transmitted alternating.
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct SERDES6G_TP_CFG1(u32);
impl SERDES6G_TP_CFG1 {
    /// Static pattern 2nd part only used in 20 bit mode, LSB is transferred first
    pub fn static_pattern1(&self) -> u32 {
        self.0 & 0xfffff
    }
    pub fn set_static_pattern1(&mut self, value: u32) {
        assert!(value <= 0xfffff);
        self.0 &= !0xfffff;
        self.0 |= value;
    }
}
