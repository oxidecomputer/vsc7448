// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Based on mesa-v2021.09 (https://github.com/microchip-ung/mesa/) which has
// the following copyright and license:
//
// Copyright (c) 2004-2021 Microchip Technology Inc. and its subsidiaries.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// This is an autogenerated file; do not edit by hand!
use derive_more::{From, Into};

/// Register `SERDES1G_PLL_CFG`
///
/// SERDES1G Pll Cfg
///
/// Configuration register for SERDES1G RCPLL
#[derive(From, Into)]
pub struct SERDES1G_PLL_CFG(u32);
impl SERDES1G_PLL_CFG {
    /// Enable feedback divider (divide by two)

    ///

    /// 0: Disable 1: Enable
    pub fn pll_ena_fb_div2(&self) -> u32 {
        (self.0 & 0x400000) >> 22
    }
    pub fn set_pll_ena_fb_div2(&mut self, value: u32) {
        let value = value << 22;
        assert!(value <= 0x400000);
        self.0 &= !0x400000;
        self.0 |= value;
    }
    /// Enable reference clock divider (divide by two)

    ///

    /// 0: Disable 1: Enable
    pub fn pll_ena_rc_div2(&self) -> u32 {
        (self.0 & 0x200000) >> 21
    }
    pub fn set_pll_ena_rc_div2(&mut self, value: u32) {
        let value = value << 21;
        assert!(value <= 0x200000);
        self.0 &= !0x200000;
        self.0 |= value;
    }
    /// Control data for FSM
    pub fn pll_fsm_ctrl_data(&self) -> u32 {
        (self.0 & 0xff00) >> 8
    }
    pub fn set_pll_fsm_ctrl_data(&mut self, value: u32) {
        let value = value << 8;
        assert!(value <= 0xff00);
        self.0 &= !0xff00;
        self.0 |= value;
    }
    /// Enable FSM
    pub fn pll_fsm_ena(&self) -> u32 {
        (self.0 & 0x80) >> 7
    }
    pub fn set_pll_fsm_ena(&mut self, value: u32) {
        let value = value << 7;
        assert!(value <= 0x80);
        self.0 &= !0x80;
        self.0 |= value;
    }
    /// Enable FSM forcing
    pub fn pll_fsm_force_set_ena(&self) -> u32 {
        (self.0 & 0x40) >> 6
    }
    pub fn set_pll_fsm_force_set_ena(&mut self, value: u32) {
        let value = value << 6;
        assert!(value <= 0x40);
        self.0 &= !0x40;
        self.0 |= value;
    }
    /// Enable FSM recalibration
    pub fn pll_fsm_oor_recal_ena(&self) -> u32 {
        (self.0 & 0x20) >> 5
    }
    pub fn set_pll_fsm_oor_recal_ena(&mut self, value: u32) {
        let value = value << 5;
        assert!(value <= 0x20);
        self.0 &= !0x20;
        self.0 |= value;
    }
    /// Select RB data
    pub fn pll_rb_data_sel(&self) -> u32 {
        (self.0 & 0x8) >> 3
    }
    pub fn set_pll_rb_data_sel(&mut self, value: u32) {
        let value = value << 3;
        assert!(value <= 0x8);
        self.0 &= !0x8;
        self.0 |= value;
    }
}
