// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Based on mesa-v2021.09 (https://github.com/microchip-ung/mesa/) which has
// the following copyright and license:
//
// Copyright (c) 2004-2021 Microchip Technology Inc. and its subsidiaries.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// This is an autogenerated file; do not edit by hand!
use derive_more::{From, Into};
/// PLL5G Status 0
///
/// Status register 0 for the PLL5G
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct PLL5G_STATUS0(u32);
impl PLL5G_STATUS0 {
    /// RCPLL Flag that indicates that the calibration procedure has finished.
    #[inline]
    pub fn calibration_done(&self) -> u32 {
        (self.0 & 0x200) >> 9
    }
    #[inline]
    pub fn set_calibration_done(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 9;
        self.0 &= !0x200;
        self.0 |= value;
    }
    /// RCPLL Flag that indicates errors that may occur during the calibration procedure.
    #[inline]
    pub fn calibration_err(&self) -> u32 {
        (self.0 & 0x400) >> 10
    }
    #[inline]
    pub fn set_calibration_err(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 10;
        self.0 &= !0x400;
        self.0 |= value;
    }
    /// PLL lock status 0: not locked, 1: locked
    #[inline]
    pub fn lock_status(&self) -> u32 {
        self.0 & 0x1
    }
    #[inline]
    pub fn set_lock_status(&mut self, value: u32) {
        assert!(value <= 0x1);
        self.0 &= !0x1;
        self.0 |= value;
    }
    /// RCPLL Flag that indicates a out of range condition while NOT in calibration mode.
    #[inline]
    pub fn out_of_range_err(&self) -> u32 {
        (self.0 & 0x800) >> 11
    }
    #[inline]
    pub fn set_out_of_range_err(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 11;
        self.0 &= !0x800;
        self.0 |= value;
    }
    /// RCPLL Flag range limiter signaling
    #[inline]
    pub fn range_lim(&self) -> u32 {
        (self.0 & 0x1000) >> 12
    }
    #[inline]
    pub fn set_range_lim(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 12;
        self.0 &= !0x1000;
        self.0 |= value;
    }
    /// RCPLL Interface to read back internal data of the FSM.
    #[inline]
    pub fn readback_data(&self) -> u32 {
        (self.0 & 0x1fe) >> 1
    }
    #[inline]
    pub fn set_readback_data(&mut self, value: u32) {
        assert!(value <= 0xff);
        let value = value << 1;
        self.0 &= !0x1fe;
        self.0 |= value;
    }
}
/// PLL5G Status 1
///
/// Status register 1 for the PLL5G
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct PLL5G_STATUS1(u32);
impl PLL5G_STATUS1 {
    /// VCO frequency difference to refclk
    #[inline]
    pub fn fbcnt_dif(&self) -> u32 {
        (self.0 & 0x3ff0) >> 4
    }
    #[inline]
    pub fn set_fbcnt_dif(&mut self, value: u32) {
        assert!(value <= 0x3ff);
        let value = value << 4;
        self.0 &= !0x3ff0;
        self.0 |= value;
    }
    /// startup FSM lock status
    #[inline]
    pub fn fsm_lock(&self) -> u32 {
        self.0 & 0x1
    }
    #[inline]
    pub fn set_fsm_lock(&mut self, value: u32) {
        assert!(value <= 0x1);
        self.0 &= !0x1;
        self.0 |= value;
    }
    /// startup FSM internal status
    #[inline]
    pub fn fsm_stat(&self) -> u32 {
        (self.0 & 0xe) >> 1
    }
    #[inline]
    pub fn set_fsm_stat(&mut self, value: u32) {
        assert!(value <= 0x7);
        let value = value << 1;
        self.0 &= !0xe;
        self.0 |= value;
    }
    /// VCO frequency step stop
    #[inline]
    pub fn gain_stat(&self) -> u32 {
        (self.0 & 0x7c000) >> 14
    }
    #[inline]
    pub fn set_gain_stat(&mut self, value: u32) {
        assert!(value <= 0x1f);
        let value = value << 14;
        self.0 &= !0x7c000;
        self.0 |= value;
    }
    /// sigma delta ADC output
    #[inline]
    pub fn sig_del(&self) -> u32 {
        (self.0 & 0x7f80000) >> 19
    }
    #[inline]
    pub fn set_sig_del(&mut self, value: u32) {
        assert!(value <= 0xff);
        let value = value << 19;
        self.0 &= !0x7f80000;
        self.0 |= value;
    }
}
