// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Based on mesa-v2021.09 (https://github.com/microchip-ung/mesa/) which has
// the following copyright and license:
//
// Copyright (c) 2004-2021 Microchip Technology Inc. and its subsidiaries.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// This is an autogenerated file; do not edit by hand!
use derive_more::{From, Into};

/// Register `PLL5G_CFG6`
///
/// PLL5G Configuration 6
///
/// Configuration register 6 for PLL5G
#[derive(From, Into)]
pub struct PLL5G_CFG6(u32);
impl PLL5G_CFG6 {
    /// Setting for DDR clock divider

    ///

    /// 2: 500 MHz 5: 250 MHz 6: 416.66 MHz 14: 312.5 MHz 15: 166.66 MHz Others: Reserved
    pub fn ddr_clk_div(&self) -> u32 {
        (self.0 & 0x3f) >> 0
    }
    pub fn set_ddr_clk_div(&mut self, value: u32) {
        let value = value << 0;
        assert!(value <= 0x3f);
        self.0 &= !0x3f;
        self.0 |= value;
    }
    /// enable feedback divider CMOS 1/2 clock (for FSM)
    pub fn ena_fbclkc2(&self) -> u32 {
        (self.0 & 0x40) >> 6
    }
    pub fn set_ena_fbclkc2(&mut self, value: u32) {
        let value = value << 6;
        assert!(value <= 0x40);
        self.0 &= !0x40;
        self.0 |= value;
    }
    /// Enable reference CMOS 1/2 clock
    pub fn ena_refclkc2(&self) -> u32 {
        (self.0 & 0x80) >> 7
    }
    pub fn set_ena_refclkc2(&mut self, value: u32) {
        let value = value << 7;
        assert!(value <= 0x80);
        self.0 &= !0x80;
        self.0 |= value;
    }
}

/// Register `PLL5G_STATUS0`
///
/// PLL5G Status 0
///
/// Status register 0 for the PLL5G
#[derive(From, Into)]
pub struct PLL5G_STATUS0(u32);
impl PLL5G_STATUS0 {
    /// RCPLL Flag that indicates that the calibration procedure has finished.
    pub fn calibration_done(&self) -> u32 {
        (self.0 & 0x200) >> 9
    }
    pub fn set_calibration_done(&mut self, value: u32) {
        let value = value << 9;
        assert!(value <= 0x200);
        self.0 &= !0x200;
        self.0 |= value;
    }
    /// RCPLL Flag that indicates errors that may occur during the calibration procedure.
    pub fn calibration_err(&self) -> u32 {
        (self.0 & 0x400) >> 10
    }
    pub fn set_calibration_err(&mut self, value: u32) {
        let value = value << 10;
        assert!(value <= 0x400);
        self.0 &= !0x400;
        self.0 |= value;
    }
    /// PLL lock status 0: not locked, 1: locked
    pub fn lock_status(&self) -> u32 {
        (self.0 & 0x1) >> 0
    }
    pub fn set_lock_status(&mut self, value: u32) {
        let value = value << 0;
        assert!(value <= 0x1);
        self.0 &= !0x1;
        self.0 |= value;
    }
    /// RCPLL Flag that indicates a out of range condition while NOT in calibration mode.
    pub fn out_of_range_err(&self) -> u32 {
        (self.0 & 0x800) >> 11
    }
    pub fn set_out_of_range_err(&mut self, value: u32) {
        let value = value << 11;
        assert!(value <= 0x800);
        self.0 &= !0x800;
        self.0 |= value;
    }
    /// RCPLL Flag range limiter signaling
    pub fn range_lim(&self) -> u32 {
        (self.0 & 0x1000) >> 12
    }
    pub fn set_range_lim(&mut self, value: u32) {
        let value = value << 12;
        assert!(value <= 0x1000);
        self.0 &= !0x1000;
        self.0 |= value;
    }
    /// RCPLL Interface to read back internal data of the FSM.
    pub fn readback_data(&self) -> u32 {
        (self.0 & 0x1fe) >> 1
    }
    pub fn set_readback_data(&mut self, value: u32) {
        let value = value << 1;
        assert!(value <= 0x1fe);
        self.0 &= !0x1fe;
        self.0 |= value;
    }
}
