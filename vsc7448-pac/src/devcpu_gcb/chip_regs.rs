// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Based on mesa-v2021.09 (https://github.com/microchip-ung/mesa/) which has
// the following copyright and license:
//
// Copyright (c) 2004-2021 Microchip Technology Inc. and its subsidiaries.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// This is an autogenerated file; do not edit by hand!
use derive_more::{From, Into};
/// Chip ID register
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct CHIP_ID(u32);
impl CHIP_ID {
    /// Manufacturer ID.
    pub fn mfg_id(&self) -> u32 {
        (self.0 & 0xffe) >> 1
    }
    pub fn set_mfg_id(&mut self, value: u32) {
        let value = value << 1;
        assert!(value <= 0xffe);
        self.0 &= !0xffe;
        self.0 |= value;
    }
    /// Always 1.
    pub fn one(&self) -> u32 {
        self.0 & 0x1
    }
    pub fn set_one(&mut self, value: u32) {
        assert!(value <= 0x1);
        self.0 &= !0x1;
        self.0 |= value;
    }
    /// Part ID: Part ID for identification of Vitesse Chips.
    pub fn part_id(&self) -> u32 {
        (self.0 & 0xffff000) >> 12
    }
    pub fn set_part_id(&mut self, value: u32) {
        let value = value << 12;
        assert!(value <= 0xffff000);
        self.0 &= !0xffff000;
        self.0 |= value;
    }
    /// Revision ID : Chip revision starting from 0.
    pub fn rev_id(&self) -> u32 {
        (self.0 & 0xf0000000) >> 28
    }
    pub fn set_rev_id(&mut self, value: u32) {
        let value = value << 28;
        assert!(value <= 0xf0000000);
        self.0 &= !0xf0000000;
        self.0 |= value;
    }
}
/// Encoded features
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct FEA_STAT(u32);
impl FEA_STAT {
    /// Efuse values. Some of these bits controls the hardware of the chip, others are free for SW to use.
    pub fn fea_stat(&self) -> u32 {
        self.0
    }
    pub fn set_fea_stat(&mut self, value: u32) {
        self.0 = value;
    }
}
/// General purpose register
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct GPR(u32);
impl GPR {
    /// General purpose register for software development.
    pub fn gpr(&self) -> u32 {
        self.0
    }
    pub fn set_gpr(&mut self, value: u32) {
        self.0 = value;
    }
}
/// Various configrations
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct HW_CFG(u32);
impl HW_CFG {
    /// Set to enable the DFT clock monitor feature on the GPIOs.
    pub fn dft_clk_mon_ena(&self) -> u32 {
        self.0 & 0x1
    }
    pub fn set_dft_clk_mon_ena(&mut self, value: u32) {
        assert!(value <= 0x1);
        self.0 &= !0x1;
        self.0 |= value;
    }
    /// Set to enable the DFT STAToutput on the GPIOs.
    pub fn dft_stat_ena(&self) -> u32 {
        (self.0 & 0x2) >> 1
    }
    pub fn set_dft_stat_ena(&mut self, value: u32) {
        let value = value << 1;
        assert!(value <= 0x2);
        self.0 &= !0x2;
        self.0 |= value;
    }
}
/// Additional configuration of SGPIO signal detect
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct HW_SGPIO_SD_CFG(u32);
impl HW_SGPIO_SD_CFG {
    /// Set bits in this field to use 2G5 and 10G signal detects from 3'rd SIO controller instead of default positions inside 1'st and 2'nd controllers. Bit 0 in this field corresponds to dev2g5_0, bit 1 corresponds ot dev2g5_1 and so on. Bit 24 corrsponds to NPI port. Bit 25 corresponds to dev10g_0, bit 26 corresponds to dev10g_1 and so on. For the dev10g devices; signal detect is provided to both the 10g device and the corresponding dev2g5 (see HSIO::HW_CFG.DEV10G_0_MODE for more information.)
    pub fn sd_high_ena(&self) -> u32 {
        self.0 & 0x1fffffff
    }
    pub fn set_sd_high_ena(&mut self, value: u32) {
        assert!(value <= 0x1fffffff);
        self.0 &= !0x1fffffff;
        self.0 |= value;
    }
}
/// Various status indications
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct HW_STAT(u32);
impl HW_STAT {
    /// This field is set if a hardware fail has been detected in any of the memories during startup-initialization of the chip. This field is valid after release of reset.
    pub fn mem_fail(&self) -> u32 {
        self.0 & 0x1
    }
    pub fn set_mem_fail(&mut self, value: u32) {
        assert!(value <= 0x1);
        self.0 &= !0x1;
        self.0 |= value;
    }
}
/// Reset control register
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct SOFT_RST(u32);
impl SOFT_RST {
    /// Set this field to reset the whole chip. This field is automatically cleared by the reset. Note: It is possible for the VCore to protect itself from this soft-reset, for more info see ICPU_CFG::RESET.CORE_RST_PROTECT.
    pub fn soft_chip_rst(&self) -> u32 {
        self.0 & 0x1
    }
    pub fn set_soft_chip_rst(&mut self, value: u32) {
        assert!(value <= 0x1);
        self.0 &= !0x1;
        self.0 |= value;
    }
    /// Set this field to reset everything except the chip configuration. The reset remains asserted until this field is cleared.
    pub fn soft_non_cfg_rst(&self) -> u32 {
        (self.0 & 0x4) >> 2
    }
    pub fn set_soft_non_cfg_rst(&mut self, value: u32) {
        let value = value << 2;
        assert!(value <= 0x4);
        self.0 &= !0x4;
        self.0 |= value;
    }
    /// Set this field to reset the switch core (everything except the SERDES IO and PLL blocks.) This field is automatically cleared by the reset. Note: It is possible for the VCore to protect itself from this soft-reset, for more info see ICPU_CFG::RESET.CORE_RST_PROTECT.
    pub fn soft_swc_rst(&self) -> u32 {
        (self.0 & 0x2) >> 1
    }
    pub fn set_soft_swc_rst(&mut self, value: u32) {
        let value = value << 1;
        assert!(value <= 0x2);
        self.0 &= !0x2;
        self.0 |= value;
    }
}
