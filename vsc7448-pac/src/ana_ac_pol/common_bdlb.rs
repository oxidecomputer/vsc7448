// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Based on mesa-v2021.09 (https://github.com/microchip-ung/mesa/) which has
// the following copyright and license:
//
// Copyright (c) 2004-2021 Microchip Technology Inc. and its subsidiaries.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// This is an autogenerated file; do not edit by hand!
use derive_more::{From, Into};
/// Configuration of common leaky bucket handling
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct DLB_CTRL(u32);
impl DLB_CTRL {
    /// TIMESCALE_VAL and BASE_TICK_CNT controls the the rate interval as well as the rate granularity available for LB rate configuration Refer to TIMESCALE_VAL for details.
    #[inline(always)]
    pub fn base_tick_cnt(&self) -> u32 {
        (self.0 & 0x7fff0) >> 4
    }
    #[inline(always)]
    pub fn set_base_tick_cnt(&mut self, value: u32) {
        assert!(value <= 0x7fff);
        let value = value << 4;
        self.0 &= !0x7fff0;
        self.0 |= value;
    }
    /// Specifies the clock period in unit of 0.1ns.
    ///
    /// 40: 4ns (250MHz) 64: 6,4ns (156.25MHz) 192: 19,2 ns (52.08MHz)
    #[inline(always)]
    pub fn clk_period_01ns(&self) -> u32 {
        (self.0 & 0x7f80000) >> 19
    }
    #[inline(always)]
    pub fn set_clk_period_01ns(&mut self, value: u32) {
        assert!(value <= 0xff);
        let value = value << 19;
        self.0 &= !0x7f80000;
        self.0 |= value;
    }
    /// Enables adding of frame bytes to the leaky buckets.
    ///
    /// 0: Disable bucket addition 1: Enable bucket addition
    #[inline(always)]
    pub fn dlb_add_ena(&self) -> u32 {
        self.0 & 0x1
    }
    #[inline(always)]
    pub fn set_dlb_add_ena(&mut self, value: u32) {
        assert!(value <= 0x1);
        self.0 &= !0x1;
        self.0 |= value;
    }
    /// Enables leaking from the leaky buckets.
    ///
    /// 0: Disable bucket leaking 1: Enable bucket leaking
    #[inline(always)]
    pub fn leak_ena(&self) -> u32 {
        (self.0 & 0x2) >> 1
    }
    #[inline(always)]
    pub fn set_leak_ena(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 1;
        self.0 &= !0x2;
        self.0 |= value;
    }
}
/// LB policer diagnostic
#[derive(Copy, Clone, Eq, PartialEq, From, Into)]
pub struct DLB_STICKY(u32);
impl DLB_STICKY {
    /// Set when the frame rate is exceeding the Committed Information Rate. Bit is cleared by writing a 1 to this position.
    ///
    /// 0: No event has occured 1: CIR exceeded
    #[inline(always)]
    pub fn cir_exceeded_sticky(&self) -> u32 {
        (self.0 & 0x2) >> 1
    }
    #[inline(always)]
    pub fn set_cir_exceeded_sticky(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 1;
        self.0 &= !0x2;
        self.0 |= value;
    }
    /// Set when the frame rate is below both the Committed Information Rate and the Peak Information Rate. Bit is cleared by writing a 1 to this position.
    ///
    /// 0: No event has occured 1: Traffic received without triggering CIR and PIR policing
    #[inline(always)]
    pub fn cir_pir_open_sticky(&self) -> u32 {
        self.0 & 0x1
    }
    #[inline(always)]
    pub fn set_cir_pir_open_sticky(&mut self, value: u32) {
        assert!(value <= 0x1);
        self.0 &= !0x1;
        self.0 |= value;
    }
    /// Set when a LB scan completes. Bit is cleared by writing a 1.
    ///
    /// 0: No event has occured 1: Leak scan completes
    #[inline(always)]
    pub fn leak_scan_completed_sticky(&self) -> u32 {
        (self.0 & 0x80000000) >> 31
    }
    #[inline(always)]
    pub fn set_leak_scan_completed_sticky(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 31;
        self.0 &= !0x80000000;
        self.0 |= value;
    }
    /// Set when a LB scan starts. Bit is cleared by writing a 1 to this position.
    ///
    /// 0: No event has occured 1: Leak scan started
    #[inline(always)]
    pub fn leak_scan_started_sticky(&self) -> u32 {
        (self.0 & 0x40000000) >> 30
    }
    #[inline(always)]
    pub fn set_leak_scan_started_sticky(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 30;
        self.0 &= !0x40000000;
        self.0 |= value;
    }
    /// Set when a LB scan could not start because a scan is already ongoing. If this occur, BASE_TICK_CNT is set too low and must be increased. Bit is cleared by writing a 1 to this position.
    ///
    /// 0: No event has occured 1: Leak scan could not start at time
    #[inline(always)]
    pub fn leak_start_delayed_sticky(&self) -> u32 {
        (self.0 & 0x20000000) >> 29
    }
    #[inline(always)]
    pub fn set_leak_start_delayed_sticky(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 29;
        self.0 &= !0x20000000;
        self.0 |= value;
    }
    /// Set when the frame rate is exceeding the Peak Information Rate. Bit is cleared by writing a 1 to this position.
    ///
    /// 0: No event has occured 1: PIR exceeded
    #[inline(always)]
    pub fn pir_exceeded_sticky(&self) -> u32 {
        (self.0 & 0x4) >> 2
    }
    #[inline(always)]
    pub fn set_pir_exceeded_sticky(&mut self, value: u32) {
        assert!(value <= 0x1);
        let value = value << 2;
        self.0 &= !0x4;
        self.0 |= value;
    }
}
