//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
use std::collections::{HashMap, HashSet};
use std::fs::File;
use std::io::{Read, Write};
use std::path::PathBuf;

use clap::{App, Arg};
use vsc7448_types::{OwnedTarget, Page};

mod doxygen;
mod phy;
mod symregs;

use doxygen::parse_regs_doxygen;
use phy::{parse_phy_pages, parse_phy_registers};
use symregs::{parse_symregs, TargetList};

fn main() -> Result<(), std::io::Error> {
    let matches = App::new("mesa-parse")
        .version("0.1")
        .author("Matt Keeter <matt@oxide.computer>")
        .about("Parses C headers from MESA to build a register map")
        .arg(Arg::with_name("root")
            .required(true)
            .help("Path to `mesa-v20xx...` folder")
            .takes_value(true))
        .arg(Arg::with_name("pac")
            .long("pac")
            .help("Root directory of the vs7488-pac crate")
            .takes_value(true))
        .arg(Arg::with_name("info")
            .long("info")
            .help("Root directory of the vs7488-info crate")
            .takes_value(true))
        .arg(Arg::with_name("family")
            .required(true)
            .help("Chip family (e.g. `jaguar2`).  This may include a subfamily separated by `:`, e.g. `jaguar2:servalt`")
            .takes_value(true))
        .get_matches();

    let mesa_root = matches.value_of("root").unwrap();
    let family = matches.value_of("family").unwrap();

    let (family, subfamily) = if family.contains(':') {
        let mut iter = family.split(':');
        (iter.next().unwrap(), iter.next().unwrap())
    } else {
        (family, family)
    };

    // Parse the symregs file first, since that gives us all of our target file
    // names for doxygen parsing
    let mut path = PathBuf::from(mesa_root);
    path.push("base");
    path.push(family);
    path.push(format!("vtss_{}_symregs.c", subfamily));
    let mut file = File::open(&path)?;
    let mut contents = String::new();
    file.read_to_string(&mut contents)?;
    let (target_data, target_list) = parse_symregs(&contents);
    path.pop();

    // Then, parse each target-specific file
    let mut seen_targets = HashSet::new();
    let mut target_docs = HashMap::new();
    for target in &target_list {
        let base_target = target.1 .0.clone();

        if seen_targets.insert(base_target.clone()) {
            path.push(format!(
                "vtss_{}_regs_{}.h",
                subfamily,
                base_target.to_lowercase()
            ));
            let mut file = File::open(&path)?;
            let mut contents = String::new();
            file.read_to_string(&mut contents)?;
            path.pop();
            let docs = parse_regs_doxygen(&contents, &target_data[&base_target]);
            target_docs.insert(base_target, docs);
        }
    }

    // Then, handle the PHY registers
    let mut path = PathBuf::from(mesa_root);
    path.push("include");
    path.push("vtss_phy_api.h");

    let mut file = File::open(&path)?;
    let mut contents = String::new();
    file.read_to_string(&mut contents)?;
    let mut pages = parse_phy_pages(&contents);

    let mut path = PathBuf::from(mesa_root);
    path.push("base");
    path.push("phy");
    path.push("phy_1g");
    path.push("vtss_phy.h");
    let mut file = File::open(&path)?;
    let mut contents = String::new();
    file.read_to_string(&mut contents)?;
    parse_phy_registers(&contents, &mut pages);

    if let Some(pac) = matches.value_of("pac") {
        print_pac_lib(pac, &target_list, &target_docs, &pages)?;
    }

    if let Some(info) = matches.value_of("info") {
        print_info_lib(info, &target_list, &target_docs, &pages)?;
    }

    if matches.value_of("info").is_none() && matches.value_of("pac").is_none() {
        eprintln!("--info or --pac required");
    }

    Ok(())
}

/// Prints `lib.rs` for the vsc7448_pac crate
fn print_pac_lib(
    _dir: &str,
    _target_list: &TargetList,
    _target_docs: &HashMap<String, OwnedTarget>,
    _pages: &HashMap<String, Page<String>>,
) -> Result<(), std::io::Error> {
    unimplemented!()
}

/// Prints lib.rs for the vsc7448_info crate
fn print_info_lib(
    dir: &str,
    target_list: &TargetList,
    target_docs: &HashMap<String, OwnedTarget>,
    pages: &HashMap<String, Page<String>>,
) -> Result<(), std::io::Error> {
    let mut path = PathBuf::from(dir);
    path.push("src");
    path.push("lib.rs");
    let mut file = File::create(&path)?;

    write!(
        &mut file,
        "//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//

// This is an autogenerated file; do not edit by hand!
use std::collections::HashMap;

use lazy_static::lazy_static;
use vsc7448_types::{{Address, Field, Page, Register, RegisterGroup, Target}};

pub mod parse;

lazy_static! {{
    /// Maps from user-facing target name to a tuple of
    /// - Name in `TARGETS` map (which may be different!)
    /// - List of instances, as tuples of `(instance id, address)`.  If there is
    ///   only one instance of this target, then this is vec![(None, ADDRESS)].
    pub static ref MEMORY_MAP: HashMap<&'static str, (&'static str, Vec<(Option<u32>, u32)>)> = {{
        let mut out = HashMap::new();"
    )?;
    let mut keys = target_list.keys().collect::<Vec<_>>();
    keys.sort();
    for k in keys {
        let t = &target_list[k];
        write!(
            &mut file,
            "
        out.insert({:?}, ({:?}, vec![",
            k, t.0
        )?;
        for t in &t.1 {
            write!(&mut file, "({:?},{:#x}),", t.0, t.1)?;
        }
        write!(&mut file, "]));")?;
    }
    writeln!(
        &mut file,
        "
        return out;
    }};"
    )?;

    write!(
        &mut file,
        "
    /// Maps from target name to `Target`, which contains a hierarchy
    /// of register groups, registers, and fields.
    pub static ref TARGETS: HashMap<&'static str, Target> = {{
        let mut out = HashMap::new();"
    )?;
    let mut keys = target_docs.keys().collect::<Vec<_>>();
    keys.sort();
    // Iteration over targets
    for k in keys {
        let t = &target_docs[k];
        write!(
            &mut file,
            "

        let {}groups = HashMap::new();",
            if t.groups.is_empty() { "" } else { "mut " }
        )?;
        let mut keys = t.groups.keys().collect::<Vec<_>>();
        keys.sort();

        // Iteration over register groups
        for k in keys {
            let t = &t.groups[k];
            write!(
                &mut file,
                "
        let {}regs = HashMap::new();",
                if t.regs.is_empty() { "" } else { "mut " }
            )?;
            let mut keys = t.regs.keys().collect::<Vec<_>>();
            keys.sort();

            // Iteration over registers
            for k in keys {
                write!(
                    &mut file,
                    "
        let mut fields = HashMap::new();"
                )?;
                let t = &t.regs[k];
                let mut keys = t.fields.keys().collect::<Vec<_>>();
                keys.sort();

                // Iteration over fields
                for k in keys {
                    let t = &t.fields[k];
                    if t.hi > 32 {
                        panic!("Invalid hi bit for {:?}", t);
                    }
                    write!(
                        &mut file,
                        "
        fields.insert({:?}, {:?});",
                        k, t
                    )?;
                }
                write!(
                    &mut file,
                    "
        regs.insert({:?}, Register {{ addr: {:?}, brief: {:?}, details: {:?}, fields }});",
                    k, t.addr, t.brief, t.details
                )?;
            }
            write!(
                &mut file,
                "
        groups.insert({:?}, RegisterGroup {{ addr: {:?}, desc: {:?}, regs }});",
                k, t.addr, t.desc
            )?;
        }
        write!(
            &mut file,
            "
        out.insert({:?}, Target {{ desc: {:?}, groups }});",
            k, t.desc
        )?;
    }
    writeln!(
        &mut file,
        "
        return out;
    }};"
    )?;

    write!(
        &mut file,
        "
    /// Maps from PHY page name to `Page`, which contains a hierarchy
    /// of registers containing bit fields.
    pub static ref PHY_MAP: HashMap<&'static str, Page<&'static str>> = {{
        let mut out = HashMap::new();"
    )?;

    // Iteration over pages
    let mut keys = pages.keys().collect::<Vec<_>>();
    keys.sort_by_key(|k| (pages[k.as_str()].base, k.as_str()));
    for k in keys {
        let t = &pages[k];
        write!(
            &mut file,
            "

        let {}regs = HashMap::new();",
            if t.regs.is_empty() { "" } else { "mut " }
        )?;
        let mut keys = t.regs.keys().collect::<Vec<_>>();
        keys.sort_by_key(|k| (t.regs[k.as_str()].addr.base, k.as_str()));

        // Iteration over registers
        for k in keys {
            let t = &t.regs[k];
            write!(
                &mut file,
                "
        let {}fields = HashMap::new();",
                if t.fields.is_empty() { "" } else { "mut " }
            )?;
            let mut keys = t.fields.keys().collect::<Vec<_>>();
            keys.sort_by_key(|k| (t.fields[k.as_str()].lo, k.as_str()));

            // Iteration over fields
            for k in keys {
                let t = &t.fields[k];
                if t.hi > 32 {
                    panic!("Invalid hi bit for {:?}", t);
                }
                write!(
                    &mut file,
                    "
        fields.insert({:?}, {:?});",
                    k, t
                )?;
            }
            if t.addr.base > 31 {
                panic!("Invalid register address for {:?}", t);
            }
            write!(
                &mut file,
                "
        regs.insert({:?}, Register {{ addr: {:?}, brief: {:?}, details: {:?}, fields }});",
                k, t.addr, t.brief, t.details
            )?;
        }

        write!(
            &mut file,
            "
        out.insert({:?}, Page {{ desc: {:?}, base: {}, regs }});",
            k, t.desc, t.base,
        )?;
    }
    writeln!(
        &mut file,
        "
        return out;
    }};
}}"
    )?;
    Ok(())
}
